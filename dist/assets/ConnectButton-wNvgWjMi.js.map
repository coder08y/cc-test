{"version":3,"file":"ConnectButton-wNvgWjMi.js","sources":["../../../cetus-design/src/components/wallet/provider/usePhantomAutoConnect.ts","../../../cetus-design/src/components/wallet/ConnectButton.tsx"],"sourcesContent":["import useGlobalStore from '@cetus/stores/src/global'\nimport { useConnectWallet, useWallets } from '@mysten/dapp-kit'\nimport { useEffect } from 'react'\n\nexport default function usePhantomAutoConnect() {\n  const { phantomInstance } = useGlobalStore()\n  const { mutate: connect } = useConnectWallet()\n  const supportWalletList = useWallets()\n\n  const autoConnectPhantom = () => {\n    const suiDappKitLocalData = JSON.parse(window?.localStorage?.getItem('sui-dapp-kit:wallet-connection-info') || '{}')\n    const lastConnectedWalletName = suiDappKitLocalData?.state?.lastConnectedWalletName\n\n    if (lastConnectedWalletName === 'Phantom') {\n      const walletObj = supportWalletList.find(item => item.name === 'Phantom')\n      if (walletObj) {\n        connect({ wallet: walletObj })\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (phantomInstance) {\n      autoConnectPhantom()\n    }\n  }, [phantomInstance])\n}\n","import { useAccountServiceName } from '@cetus/hooks/src/useAccountServiceName'\nimport useExplorer from '@cetus/hooks/src/useExplorer'\nimport useTrack from '@cetus/hooks/src/useTrack'\nimport useWindowWidth from '@cetus/hooks/src/useWindowWidth'\nimport { useSdkStore } from '@cetus/sdk-factory'\nimport { useAccountStore } from '@cetus/stores'\nimport useGlobalStore from '@cetus/stores/src/global'\nimport useRpcConfigStore from '@cetus/stores/src/useRpcConfigStore'\nimport { APP_ENV, suiWalletList, VITE_TEST_WALLET_ADDRESS } from '@cetus/types'\nimport Icon from '@cetus/ui-kit/src/components/Icon'\nimport { addressAbridge } from '@cetus/utils'\nimport { Button, HStack, Image, Popover, PopoverContent, PopoverTrigger, Text, useDisclosure, VStack } from '@chakra-ui/react'\nimport { useCurrentAccount, useCurrentWallet, useDisconnectWallet } from '@mysten/dapp-kit'\nimport { isValidSuiAddress } from '@mysten/sui/utils'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useAccountBalance } from '../../../../hooks/src/useAccountBalance'\nimport { CetusTooltip, CopyButton } from '../common'\nimport AccountSwitch from './AccountSwitch'\nimport RecentTransactions from './RecentTransactions'\nimport usePhantomAutoConnect from './provider/usePhantomAutoConnect'\n\nexport default function ConnectButton({ isCetusPump }: { isCetusPump: boolean }) {\n  usePhantomAutoConnect()\n  const [isOpenRecentTrans, setIsOpenRecentTrans] = useState<boolean>(false)\n  const { currentAccount, accounts, onWalletModal, saveAccounts } = useAccountStore()\n  const { currentWallet, connectionStatus } = useCurrentWallet()\n  const account = useCurrentAccount()\n  const { mutate: disconnect } = useDisconnectWallet()\n  const { getExplorerUrl } = useExplorer()\n  const { windowWidth } = useWindowWidth()\n  const navigate = useNavigate()\n  const { fetchAccountBalance } = useAccountBalance()\n  const { isOpen, onToggle, onClose } = useDisclosure()\n  const { currentNode } = useRpcConfigStore()\n  const { fetchServiceNames } = useAccountServiceName()\n  const { phantomInstance } = useGlobalStore()\n  const { toTrackWalletConnect } = useTrack()\n  const { isInitialized } = useSdkStore()\n\n  const { saveCurrentAccount, accountServiceNameObj, setAccountServiceNameObj } = useAccountStore()\n\n  // 保存当前钱包账户\n  useEffect(() => {\n    if (APP_ENV !== 'mainnet' && VITE_TEST_WALLET_ADDRESS && isValidSuiAddress(VITE_TEST_WALLET_ADDRESS)) {\n      const testAccount = {\n        address: VITE_TEST_WALLET_ADDRESS,\n        publicKey: [],\n        chains: ['sui:mainnet']\n      }\n      saveCurrentAccount(testAccount as any)\n    } else {\n      saveCurrentAccount(account || undefined)\n    }\n\n    if (account) {\n      fetchServiceNames([account.address])\n    }\n\n    if (account && isInitialized) {\n      fetchAccountBalance(account.address, true)\n    }\n  }, [account, isInitialized])\n\n  useEffect(() => {\n    const accounts = currentWallet?.accounts || []\n    saveAccounts([...accounts])\n  }, [currentWallet])\n\n  useEffect(() => {\n    if (account?.address && currentWallet?.name) {\n      toTrackWalletConnect({\n        walletAddress: account?.address,\n        walletName: currentWallet?.name\n      })\n    }\n  }, [account?.address, currentWallet?.name])\n\n  const walletIcon = useMemo(() => {\n    if (currentWallet) {\n      const info = suiWalletList.find(wallet => currentWallet.name === wallet.walletName)\n      if (info) {\n        return info.icon.startsWith('http') ? info.icon : `/images/wallet/${info.icon}.png`\n      }\n      return currentWallet.icon\n    }\n    return undefined\n  }, [currentWallet])\n\n  return (\n    <HStack>\n      {!currentAccount && (\n        <Button\n          borderRadius=\"8px\"\n          fontSize=\"14px\"\n          // w=\"136px\"\n          p=\"0 16px\"\n          h=\"36px\"\n          fontWeight=\"500\"\n          onClick={() => {\n            onWalletModal(true)\n            onClose()\n          }}\n        >\n          Connect\n        </Button>\n      )}\n\n      {currentAccount && (\n        <Popover isLazy isOpen={isOpen} onClose={onClose}>\n          <PopoverTrigger>\n            <Button\n              variant=\"unstyled\"\n              display=\"flex\"\n              gap=\"8px\"\n              cursor=\"pointer\"\n              borderRadius=\"8px\"\n              border=\"1px solid\"\n              borderColor=\"border\"\n              p={{ base: '0 8px', lg: '0 16px' }}\n              bg=\"block_color_opacity.50\"\n              backdropFilter=\"blur(20px)\"\n              h=\"36px\"\n              sx={{\n                _hover: {\n                  bg: 'button_outline_hov_bg'\n                }\n              }}\n              onClick={onToggle}\n            >\n              <Image src={walletIcon} alt=\"SVG Image\" boxSize=\"20px\" objectFit=\"cover\" borderRadius=\"4px\" />\n              <Text fontSize=\"14px\" color=\"text_caption\" fontWeight=\"500\">\n                {accountServiceNameObj?.[currentAccount.address] || addressAbridge(currentAccount.address)}\n              </Text>\n            </Button>\n          </PopoverTrigger>\n          {(isOpenRecentTrans ? true : isOpen) && (\n            <PopoverContent\n              w={windowWidth <= 352 ? '100%' : '352px'}\n              right={windowWidth <= 352 ? '0px' : '8px'}\n              bg=\"bg_secondary\"\n              borderRadius=\"12px\"\n              p=\"0px\"\n            >\n              <VStack alignItems=\"start\" p=\"16px\" w=\"100%\">\n                <Text fontSize=\"14px\" color=\"text_caption\">\n                  Connected with {currentWallet?.name}\n                </Text>\n                <VStack\n                  mt=\"8px\"\n                  w=\"100%\"\n                  p=\"20px\"\n                  borderRadius=\"12px\"\n                  alignItems=\"start\"\n                  sx={{\n                    backgroundImage: \"url('/images/bg@2x.png')\",\n                    backgroundPosition: 'top 0px',\n                    backgroundSize: '328px 116px',\n                    backgroundRepeat: 'no-repeat'\n                  }}\n                >\n                  <HStack gap=\"8px\">\n                    <Image src={walletIcon} alt=\"SVG Image\" boxSize=\"30px\" objectFit=\"cover\" borderRadius=\"8px\" />\n                    <Text fontSize=\"14px\" fontWeight=\"500\">\n                      {currentAccount?.label}\n                    </Text>\n                  </HStack>\n\n                  <HStack w=\"100%\" justifyContent=\"space-between\" alignItems=\"center\" mt=\"8px\">\n                    {/* 展示钱包地址 */}\n                    <AccountSwitch currentAccount={currentAccount} accounts={accounts} onClose={onClose} />\n                    {/* 拷贝和跳转 */}\n                    <HStack gap=\"8px\">\n                      <CetusTooltip\n                        children={<CopyButton svgW=\"18px\" svgH=\"18px\" text={currentAccount.address} />}\n                        tooltip=\"Copy address\"\n                        placement=\"top\"\n                      />\n                      <CetusTooltip\n                        children={\n                          <Icon\n                            xlinkHref=\"#icon-icon_link1\"\n                            fontSize=\"18px\"\n                            onClick={() => {\n                              window.open(getExplorerUrl(currentAccount.address), '_blank')\n                            }}\n                          />\n                        }\n                        tooltip=\"View on Explorer\"\n                        placement=\"top\"\n                      />\n                    </HStack>\n                  </HStack>\n                </VStack>\n\n                {isCetusPump && (\n                  <Button\n                    variant=\"outline\"\n                    fontSize=\"14px\"\n                    w=\"100%\"\n                    mt=\"12px\"\n                    onClick={() => {\n                      onClose()\n                      navigate(`/portfolio`)\n                    }}\n                  >\n                    Profile\n                  </Button>\n                )}\n\n                <HStack w=\"100%\" mt=\"8px\">\n                  {/* 最近交易记录 */}\n                  <HStack\n                    cursor=\"pointer\"\n                    sx={{\n                      _hover: {\n                        p: {\n                          color: 'text_caption'\n                        },\n                        svg: {\n                          fill: 'text_caption'\n                        }\n                      }\n                    }}\n                    onClick={() => {\n                      setIsOpenRecentTrans(true)\n                    }}\n                  >\n                    <Icon xlinkHref=\"#icon-icon_recenttransactions\" svgW=\"20px\" svgH=\"20px\" />\n                    <Text>Recent Transactions</Text>\n                  </HStack>\n\n                  {/* 断开链接 */}\n                  <HStack\n                    pl=\"16px\"\n                    cursor=\"pointer\"\n                    sx={{\n                      _hover: {\n                        p: {\n                          color: 'text_caption'\n                        },\n                        svg: {\n                          fill: 'text_caption'\n                        }\n                      }\n                    }}\n                    onClick={() => {\n                      disconnect()\n                      if (phantomInstance) {\n                        phantomInstance.hide()\n                      }\n\n                      onClose()\n                    }}\n                  >\n                    <Icon xlinkHref=\"#icon-icon_disconnect\" svgW=\"20px\" svgH=\"20px\" svgHover=\"text_paragraph\" />\n                    <Text>Disconnect</Text>\n                  </HStack>\n                </HStack>\n              </VStack>\n            </PopoverContent>\n          )}\n        </Popover>\n      )}\n      {isOpenRecentTrans && <RecentTransactions isOpen={isOpenRecentTrans} onClose={() => setIsOpenRecentTrans(false)} />}\n    </HStack>\n  )\n}\n"],"names":["usePhantomAutoConnect","phantomInstance","useGlobalStore","connect","useConnectWallet","supportWalletList","useWallets","autoConnectPhantom","suiDappKitLocalData","_a","_b","walletObj","item","useEffect","ConnectButton","isCetusPump","isOpenRecentTrans","setIsOpenRecentTrans","useState","currentAccount","accounts","onWalletModal","saveAccounts","useAccountStore","currentWallet","connectionStatus","useCurrentWallet","account","useCurrentAccount","disconnect","useDisconnectWallet","getExplorerUrl","useExplorer","windowWidth","useWindowWidth","navigate","useNavigate","fetchAccountBalance","useAccountBalance","isOpen","onToggle","onClose","useDisclosure","currentNode","useRpcConfigStore","fetchServiceNames","useAccountServiceName","toTrackWalletConnect","useTrack","isInitialized","useSdkStore","saveCurrentAccount","accountServiceNameObj","setAccountServiceNameObj","walletIcon","useMemo","info","suiWalletList","wallet","HStack","jsx","Button","jsxs","Popover","PopoverTrigger","Image","Text","addressAbridge","PopoverContent","VStack","AccountSwitch","CetusTooltip","CopyButton","Icon","RecentTransactions"],"mappings":"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"}