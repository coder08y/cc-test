{"version":3,"file":"useChainTime-DkQgY6Ea.js","sources":["../../src/hooks/common/useChainTime.ts"],"sourcesContent":["import useGlobalStore from '@/store/common/global'\nimport { useSdk } from '@cetus/sdk-factory'\nimport { d } from '@cetus/utils'\nimport { CLOCK_ADDRESS, getObjectFields } from '@cetusprotocol/common-sdk'\n\nexport function useChainTime() {\n  const clmmSdk = useSdk('clmm')\n  const { userTimeHasChang } = useGlobalStore()\n\n  const fetchChainTime = async () => {\n    if (!clmmSdk) {\n      return undefined\n    }\n    try {\n      const res = await clmmSdk.FullClient.getObject({ id: CLOCK_ADDRESS, options: { showContent: true } })\n      const filed = getObjectFields(res)\n      console.log('🚀 ~ fetchCHainTime ~ filed:', filed)\n\n      return Number(filed.timestamp_ms)\n    } catch (error) {\n      console.log('🚀 ~ fetchCHainTime ~ error:', error)\n    }\n    return undefined\n  }\n\n  /**\n   * 计算网络时间和本地时间偏差\n   */\n  const calculateTimeDiff = async () => {\n    const chainTime = await fetchChainTime()\n    if (chainTime) {\n      const now = new Date()\n      const diffTime = chainTime - now.getTime()\n      return diffTime\n    }\n    return 0\n  }\n\n  const getCountDown = async (expired_at: number) => {\n    if (!expired_at || expired_at === 0) {\n      return 0\n    }\n    const now = new Date()\n\n    let difference = 0\n    let nowTime = now.getTime()\n\n    if (userTimeHasChang) {\n      nowTime = (await fetchChainTime()) || now.getTime()\n      difference = expired_at * 1000 - nowTime\n    } else {\n      difference = expired_at * 1000 - now.getTime()\n    }\n\n    const rawDuration = Math.floor((difference / 1000) % 60)\n    const duration = rawDuration > 30 ? 30 : rawDuration\n    console.log('🚀 ~ getCountDown ~ timeDiff:', { userTimeHasChang, difference, duration, expired_at, nowTime })\n    return duration\n  }\n\n  /**\n   * 获取准确的时间，如果本地时间和链上时间偏差大于5秒则用链上时间\n   */\n  const getAccurateTime = async () => {\n    try {\n      const chainTime = await fetchChainTime()\n      const localTime = new Date().getTime()\n\n      if (chainTime) {\n        const diffTime = chainTime - localTime\n        if (\n          d(diffTime)\n            .abs()\n            .gt(5 * 1000)\n        ) {\n          return chainTime\n        }\n      }\n      return localTime\n    } catch (error) {\n      return new Date().getTime()\n    }\n  }\n\n  return {\n    fetchChainTime,\n    calculateTimeDiff,\n    getCountDown,\n    getAccurateTime\n  }\n}\n"],"names":["useChainTime","clmmSdk","useSdk","userTimeHasChang","useGlobalStore","fetchChainTime","res","CLOCK_ADDRESS","filed","getObjectFields","error","chainTime","expired_at","now","difference","nowTime","rawDuration","duration","localTime","diffTime","d"],"mappings":"kGAKO,SAASA,GAAe,CAC7B,MAAMC,EAAUC,EAAO,MAAM,EACvB,CAAE,iBAAAC,CAAA,EAAqBC,EAAA,EAEvBC,EAAiB,SAAY,CACjC,GAAKJ,EAGL,GAAI,CACF,MAAMK,EAAM,MAAML,EAAQ,WAAW,UAAU,CAAE,GAAIM,EAAe,QAAS,CAAE,YAAa,EAAA,EAAQ,EAC9FC,EAAQC,EAAgBH,CAAG,EACjC,eAAQ,IAAI,+BAAgCE,CAAK,EAE1C,OAAOA,EAAM,YAAY,CAClC,OAASE,EAAO,CACd,QAAQ,IAAI,+BAAgCA,CAAK,CACnD,CAEF,EA6DA,MAAO,CACL,eAAAL,EACA,kBA1DwB,SAAY,CACpC,MAAMM,EAAY,MAAMN,EAAA,EACxB,OAAIM,EAEeA,MADD,KAAA,EACiB,QAAA,EAG5B,CACT,EAmDE,aAjDmB,MAAOC,GAAuB,CACjD,GAAI,CAACA,GAAcA,IAAe,EAChC,MAAO,GAET,MAAMC,MAAU,KAEhB,IAAIC,EAAa,EACbC,EAAUF,EAAI,QAAA,EAEdV,GACFY,EAAW,MAAMV,KAAqBQ,EAAI,QAAA,EAC1CC,EAAaF,EAAa,IAAOG,GAEjCD,EAAaF,EAAa,IAAOC,EAAI,QAAA,EAGvC,MAAMG,EAAc,KAAK,MAAOF,EAAa,IAAQ,EAAE,EACjDG,EAAWD,EAAc,GAAK,GAAKA,EACzC,eAAQ,IAAI,gCAAiC,CAAE,iBAAAb,EAAkB,WAAAW,EAAY,SAAAG,EAAU,WAAAL,EAAY,QAAAG,EAAS,EACrGE,CACT,EA8BE,gBAzBsB,SAAY,CAClC,GAAI,CACF,MAAMN,EAAY,MAAMN,EAAA,EAClBa,EAAY,IAAI,KAAA,EAAO,QAAA,EAE7B,GAAIP,EAAW,CACb,MAAMQ,EAAWR,EAAYO,EAC7B,GACEE,EAAED,CAAQ,EACP,IAAA,EACA,GAAG,EAAI,GAAI,EAEd,OAAOR,CAEX,CACA,OAAOO,CACT,MAAgB,CACd,OAAO,IAAI,KAAA,EAAO,QAAA,CACpB,CACF,CAME,CAEJ"}