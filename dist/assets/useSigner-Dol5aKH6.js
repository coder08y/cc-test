import{f as w,M as x,a9 as E,aa as p,ab as h,j as A}from"./index-Lo8eQgA0.js";import{T as u,f as d}from"./cross-J9VCREIf.js";import{r as k}from"./vendor-CBmAETR3.js";function P(){const g=w("clmm"),{currentAccount:l}=x(),{mutateAsync:m}=E(),{mutate:T}=p(),{mutate:S}=h({execute:async({bytes:s,signature:o})=>await f(s,o)}),c=k.useMemo(()=>A.env==="mainnet"?"sui:mainnet":"sui:testnet",[l]),f=async(s,o,t=!1)=>{var a,n;if(t){const r=await g.FullClient.devInspectTransactionBlock({transactionBlock:u.from(d(s)),sender:l.address});if(console.log("devInspectTransactionBlock:",r),!r||((a=r.effects)==null?void 0:a.status.status)==="failure")throw Error((n=r.effects)==null?void 0:n.status.error)}return await g.FullClient.executeTransactionBlock({transactionBlock:s,signature:o,options:{showEvents:!0,showRawEffects:!0,showEffects:!0,showBalanceChanges:!0,showObjectChanges:!0,showInput:!0}})};return{signAndExecuteTransactionBlock:async(s,o=!1)=>{var e,a;let t;if(typeof s=="string"?t=u.from(s):t=s,console.log("chain: ",{chain:c,transactionBlock:s}),o){const n=await g.FullClient.devInspectTransactionBlock({transactionBlock:s,sender:l.address});if(console.log("devInspectTransactionBlock:",n),!n||((e=n.effects)==null?void 0:e.status.status)==="failure")throw Error((a=n.effects)==null?void 0:a.status.error)}return console.log("ðŸš€ ~ file: useSigner.ts:71 ~ signTransactionBlock ~ transactionBlock:",s,c),new Promise((n,r)=>{S({transaction:t,chain:c},{onSuccess:i=>{console.log(" signAndExecuteTransactionBlock  executed transaction",i),n(i)},onError:i=>{console.error("signAndExecuteTransactionBlock transaction failed",i),r(i)}})})},signTransactionBlock:async s=>(console.log("ðŸš€ðŸš€ðŸš€ ~ file: useSigner.ts:74 ~ signTransactionBlock ~ transactionBlock:",s instanceof Uint8Array,s),s instanceof Uint8Array&&(s=u.from(s)),typeof s=="string"&&(s=u.from(d(s))),console.log("ðŸš€ ~ file: useSigner.ts:105 ~ signTransactionBlock ~ transactionBlock:",{transactionBlock:s,chain:c}),new Promise((o,t)=>{m({transaction:s,chain:c},{onSuccess:e=>{console.log("signTransactionBlock result",e),o(e)},onError:e=>{console.error("signTransactionBlock failed",e),t(e)},onSettled:(e,a,n,r)=>{}})})),executeTransactionBlock:f,signUserMessage:async s=>(console.log("ðŸš€ðŸš€ðŸš€ ~ useSigner.ts:167 ~ signUserMessage ~ message:",s),console.log("ðŸš€ðŸš€ðŸš€ ~ useSigner.ts:167 ~ returnnewPromise ~ currentAccount:",l),new Promise((o,t)=>{T({message:s},{onSuccess:e=>{console.log("signUserMessage result",e),o(e)},onError:e=>{console.error("signUserMessage failed",e),t(e)},onSettled:(e,a,n,r)=>{}})}))}}export{P as u};
