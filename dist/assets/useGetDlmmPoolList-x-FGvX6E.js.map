{"version":3,"file":"useGetDlmmPoolList-x-FGvX6E.js","sources":["../../src/hooks/pool/useWrapDlmmPoolData.ts","../../src/hooks/pool/useGetDlmmPoolList.ts"],"sourcesContent":["import { d, symbolDataDisplayProcessing } from '@cetus/utils'\nimport Decimal from 'decimal.js'\nimport useWrapPoolData from './useWrapPoolData'\n\nfunction useWrapDlmmPoolData() {\n  const { wrapDLmmPoolData } = useWrapPoolData()\n  const wrapDlmmGroupedPoolData = (list: any[], isLocalData = false) => {\n    return list?.map((item: any) => {\n      const isReverse = item?.showReverse\n      const pools = item?.pools || []\n      const wrapPools = pools?.map(pool =>\n        wrapDLmmPoolData(\n          {\n            ...pool,\n            showReverse: isReverse,\n            coinA: item?.coinA || { coinType: pool?.coinTypeA, symbol: pool?.coinTypeA?.split('::')?.pop() },\n            coinB: item?.coinB || { coinType: pool?.coinTypeB, symbol: pool?.coinTypeB?.split('::')?.pop() },\n            pool: pool?.pool || pool?.id\n          },\n          isLocalData\n        )\n      )\n      let totalApr = '--'\n\n      if (wrapPools?.length === 1) {\n        // 如果只有1个池子，直接使用该池子的APR\n        totalApr = wrapPools[0].totalApr\n      } else if (wrapPools?.length > 1) {\n        // 过滤掉无效池子：APR > 1,000,000% 且 TVL < $10\n        const validPools = wrapPools.filter((pool: any) => {\n          console.log('00000: ', pool)\n          const apr = d(pool.totalApr == '--' ? 0 : pool.totalApr)\n          const tvl = d(pool.tvl == '--' ? 0 : pool.tvl)\n          // 如果APR > 1,000,000% 且 TVL < $10，则视为无效\n          return !(apr.gt(10000) && tvl.lt(10))\n        })\n\n        // 检查是否有无效池子且其他池子APR都是0%\n        const invalidPools = wrapPools.filter((pool: any) => {\n          const apr = d(pool.totalApr == '--' ? 0 : pool.totalApr)\n          const tvl = d(pool.tvl == '--' ? 0 : pool.tvl)\n          // 如果APR > 1,000,000% 且 TVL < $10，则视为无效\n          return apr.gt(10000) && tvl.lt(10)\n        })\n\n        const zeroAprPools = wrapPools.filter((pool: any) => {\n          const apr = d(pool.totalApr == '--' ? 0 : pool.totalApr)\n          return apr.eq(0)\n        })\n\n        // 如果有无效池子且其他池子APR都是0%，则取>1,000,000%\n        if (invalidPools.length > 0 && zeroAprPools.length === wrapPools.length - invalidPools.length) {\n          totalApr = '10001'\n        } else if (validPools.length === 1) {\n          // 如果过滤后只剩1个池子，使用该池子的APR\n          totalApr = validPools[0].totalApr\n        } else {\n          // 如果过滤后有多个有效池子，取最大APR\n          const maxApr = Decimal.max(...validPools.map(pool => d(pool.totalApr)))\n          totalApr = maxApr.toString()\n        }\n      }\n\n      // 移除重复的代码\n      // const newWrapPools = wrapPools.filter(pool => !d(pool.totalApr).gt(10000) && d(pool.tvl).lt(10))\n      // const totalApr = isLocalData ? '--' : Decimal.max(...newWrapPools?.map(pool => Number(pool.totalApr)))\n      const miningRewardList = new Map()\n      wrapPools?.forEach((pool: any) => {\n        pool?.miningRewardList?.forEach((reward: any) => {\n          if (miningRewardList.has(reward?.coinType)) {\n            miningRewardList.set(reward?.coinType, {\n              ...reward,\n              emissionsEveryDay: d(miningRewardList.get(reward?.coinType)?.emissionsEveryDay).plus(reward?.emissionsEveryDay).toString()\n            })\n          } else {\n            miningRewardList.set(reward?.coinType, reward)\n          }\n        })\n      })\n      const farmsRewarderList = new Map()\n      wrapPools?.forEach((pool: any) => {\n        pool?.farmsRewarderList?.forEach((reward: any) => {\n          if (farmsRewarderList.has(reward?.coinType)) {\n            farmsRewarderList.set(reward?.coinType, {\n              ...reward,\n              emissionsEveryDay: d(farmsRewarderList.get(reward?.coinType)?.emissionsEveryDay).plus(reward?.emissionsEveryDay).toString()\n            })\n          } else {\n            farmsRewarderList.set(reward?.coinType, reward)\n          }\n        })\n      })\n      const tvlDisplay = isLocalData\n        ? '--'\n        : symbolDataDisplayProcessing(\n            pools?.reduce(\n              (sum: any, current: any) =>\n                d(sum)\n                  .plus(current?.tvl || '0')\n                  .toString(),\n              '0'\n            ) || 0\n          )\n\n      const tokenA = item?.coinTypeA\n        ? {\n            coinType: item?.coinTypeA,\n            symbol: item?.coinTypeA?.split('::')?.pop()\n          }\n        : item?.coinA\n      const tokenB = item?.coinTypeB\n        ? {\n            coinType: item?.coinTypeB,\n            symbol: item?.coinTypeB?.split('::')?.pop()\n          }\n        : item?.coinB\n      return {\n        id: (item?.coinA?.coinType || item?.coinTypeA) + '-' + (item?.coinB?.coinType || item?.coinTypeB),\n        tokenA,\n        tokenB,\n        isReverse,\n        displayTokenA: isReverse ? tokenB : tokenA,\n        displayTokenB: isReverse ? tokenA : tokenB,\n        ...item,\n        coinTypeA: item?.coinA?.coinType || item?.coinTypeA,\n        coinTypeB: item?.coinB?.coinType || item?.coinTypeB,\n        haveFarming: wrapPools?.some((p: any) => p.haveFarming),\n        haveMining: wrapPools?.some((p: any) => p.haveMining),\n        volume24Display: isLocalData\n          ? '--'\n          : symbolDataDisplayProcessing(\n              pools?.reduce((sum, current) => d(sum).plus(current?.stats?.find(s => s.dateType === '24H')?.vol || '0'), '0')\n            ),\n\n        fees24Display: isLocalData\n          ? '--'\n          : symbolDataDisplayProcessing(\n              pools?.reduce((sum, current) => d(sum).plus(current?.stats?.find(s => s.dateType === '24H')?.fee || '0'), '0'),\n              '$'\n            ),\n        miningRewardList: Array.from(miningRewardList?.values()),\n        farmsRewarderList: Array.from(farmsRewarderList?.values()),\n        totalAllAprDisplay:\n          isLocalData || totalApr === '--'\n            ? totalApr\n            : d(totalApr).gt(10000)\n              ? '>1,000,000%'\n              : d(totalApr).lt(0.0001) && d(totalApr).gt(0)\n                ? '<0.01%'\n                : symbolDataDisplayProcessing(d(totalApr).mul(100).toString(), '%'),\n        tvlDisplay,\n        list: wrapPools\n      }\n    })\n  }\n\n  return {\n    wrapDlmmGroupedPoolData\n  }\n}\n\nexport default useWrapDlmmPoolData\n","import { DLMMStatsPairsPath } from '@/apis/path'\nimport { DLMMPoolApiInfo } from '@/types/pool'\nimport { formatCoinTypesParams } from '@/utils/pool'\nimport { useFetch } from '@cetus/hooks'\nimport { useSdk, useSdkStore } from '@cetus/sdk-factory'\nimport envConfigs from '@cetus/types/src/config/envConfigs'\nimport { fixCoinType } from '@cetusprotocol/common-sdk'\nimport { useCallback } from 'react'\nimport useWrapDlmmPoolData from './useWrapDlmmPoolData'\nimport useWrapPoolData from './useWrapPoolData'\nimport { wrapGetDlmmPoolParams } from './utils'\n\nexport default function useGetDlmmPoolList() {\n  const dlmmSdk = useSdk('dlmm')\n  const { isInitialized } = useSdkStore()\n  const { fetchByApi } = useFetch()\n  const { wrapDlmmGroupedPoolData } = useWrapDlmmPoolData()\n  const { wrapDLmmPoolData } = useWrapPoolData()\n\n  const getDlmmPoolListFromApi = async (params: any) => {\n    try {\n      const apiParams = { ...params }\n      const coinTypes = formatCoinTypesParams(params?.coin_type)\n      if (coinTypes) {\n        apiParams['coin_type'] = coinTypes\n      }\n      const wrapApiParams = wrapGetDlmmPoolParams(apiParams)\n      const res = await fetchByApi(DLMMStatsPairsPath, 'POST', wrapApiParams)\n\n      console.log('🚀 ~ getDlmmPoolListFromApi ~ res:', res)\n      // if ((!res?.data?.list || res?.data?.list?.length === 0) && envConfigs.env === 'testnet') {\n      //   throw Error('testnet no data')\n      // }\n      if (res?.data?.list) {\n        const poolList = wrapDlmmGroupedPoolData(res?.data?.list)\n        console.log('🚀 ~ file: useGetDlmmPoolList.ts:22 ~ poolList ~ poolList:', JSON.stringify(res?.data?.list), res?.data?.list, poolList)\n\n        return {\n          list: poolList,\n          total: res?.data?.pool_num,\n          isLocal: false\n        }\n      }\n    } catch (error) {\n      console.log('🚀 ~ getLocalJsonPoolList ~ error:', error)\n      return await getLocalJsonPoolList(params, true)\n    }\n\n    return {\n      list: [],\n      total: 0\n    }\n  }\n\n  const getLocalJsonPoolList = async (\n    params: any,\n    isGetGroupData: boolean = true\n  ): Promise<{\n    list: DLMMPoolApiInfo[]\n    total: number\n    isLocal: boolean\n  }> => {\n    console.log('🚀🚀🚀 ~ useGetPoolList.ts:136 ~ useGetPoolList ~ params:', params)\n    try {\n      console.log('🚀 ~ useGetPoolList ~ envConfigs?.env:', envConfigs?.env)\n      const url = envConfigs?.env === 'testnet' ? '/data/dlmm-pools-testnet.json' : '/data/dlmm-pools.json'\n\n      const res = await fetch(url, { cache: 'no-cache' }).then(rsp => {\n        return rsp.json()\n      })\n      console.log(res, 'getLocalJsonPoolList')\n      if (res?.data?.list) {\n        const originList = res?.data?.list\n        let list = originList\n\n        // 支持pool筛选\n        if (params?.pools) {\n          const lowerCaseParamsPools = params?.pools?.map((p: string) => p?.toLowerCase())\n          list = originList?.filter((item: any) => {\n            // 检查是否有匹配的池子\n            const hasMatchingPool = item?.pools?.some((pool: any) => lowerCaseParamsPools?.includes(pool?.pool?.toLowerCase()))\n            if (hasMatchingPool) {\n              // 如果有匹配的池子，过滤掉不属于params.pools的池子\n              item.pools = item.pools?.filter((pool: any) => lowerCaseParamsPools?.includes(pool?.pool?.toLowerCase()))\n            }\n            return hasMatchingPool\n          })\n        }\n\n        if (params?.pool) {\n          const lowerCaseParamsPool = params?.pool?.toLowerCase()\n          list = originList?.filter((item: any) => {\n            // 检查是否有匹配的池子\n            const hasMatchingPool = item?.pools?.some((pool: any) => pool?.pool?.toLowerCase() === lowerCaseParamsPool)\n            if (hasMatchingPool) {\n              // 如果有匹配的池子，过滤掉不属于params.pool的池子\n              item.pools = item.pools?.filter((pool: any) => pool?.pool?.toLowerCase() === lowerCaseParamsPool)\n            }\n            return hasMatchingPool\n          })\n        }\n        console.log('🚀🚀🚀 ~ useGetPoolList.ts:151 ~ useGetPoolList ~ originList:', params, originList)\n\n        // 支持coin_type筛选\n        if ((params?.coinTypes && params?.coinTypes?.length > 0) || (params?.coin_type && params?.coin_type?.length > 0)) {\n          const coinArr = params?.coinTypes || params?.coin_type\n          console.log(coinArr, originList, 'coinArr, originList')\n          list = originList?.filter((item: any) => {\n            const coinTypeA = fixCoinType(item?.coinA?.coinType, false)\n            const coinTypeB = fixCoinType(item?.coinB?.coinType, false)\n            if (\n              coinArr?.length > 1 &&\n              ((coinArr.includes(coinTypeA) && coinArr.includes(coinTypeB)) || (coinArr.includes(coinTypeB) && coinArr.includes(coinTypeA)))\n            ) {\n              return true\n            } else if (coinArr?.length === 1 && (coinArr.includes(coinTypeA) || coinArr.includes(coinTypeB))) {\n              return true\n            } else {\n              return false\n            }\n          })\n        }\n\n        if (isGetGroupData) {\n          const poolList = wrapDlmmGroupedPoolData(list, true)\n\n          console.log('getLocalJsonPoolList 🚀 ~ poolList ~ poolList:', poolList)\n\n          return {\n            list: poolList,\n            total: list?.length || 0,\n            isLocal: true\n          }\n        }\n        const newList: any = []\n        const poolList = list?.map((item: any) => {\n          item.pools?.forEach((pool: any) => {\n            newList.push(wrapDLmmPoolData({ ...pool, ...item }, true))\n          })\n        })\n        console.log('getLocalJsonPoolList 🚀 ~ poolList ~ poolList:', poolList)\n\n        return {\n          list: newList,\n          total: newList?.length || 0,\n          isLocal: true\n        }\n      }\n    } catch (error) {\n      console.error('getLocalJsonPoolList Error:', error)\n    }\n\n    return {\n      list: [],\n      total: 0,\n      isLocal: false\n    }\n  }\n\n  const getDlmmPoolList = useCallback(\n    (params: any) => {\n      if (isInitialized) {\n        // return getDlmmPoolListFromSdk(params).then(res => {\n        //   return res\n        // })\n        return getDlmmPoolListFromApi(params).then(res => {\n          return res\n        })\n      } else {\n        setTimeout(() => {\n          getDlmmPoolList(params)\n        }, 1000)\n      }\n    },\n    [isInitialized]\n  )\n\n  return {\n    getDlmmPoolList,\n    getLocalJsonPoolList\n  }\n}\n"],"names":["useWrapDlmmPoolData","wrapDLmmPoolData","useWrapPoolData","list","isLocalData","item","isReverse","pools","wrapPools","pool","_b","_a","_d","_c","totalApr","validPools","apr","d","tvl","invalidPools","zeroAprPools","Decimal","miningRewardList","reward","farmsRewarderList","tvlDisplay","symbolDataDisplayProcessing","sum","current","tokenA","tokenB","_e","_f","_g","_h","p","s","useGetDlmmPoolList","useSdk","isInitialized","useSdkStore","fetchByApi","useFetch","wrapDlmmGroupedPoolData","getDlmmPoolListFromApi","params","apiParams","coinTypes","formatCoinTypesParams","wrapApiParams","wrapGetDlmmPoolParams","res","DLMMStatsPairsPath","poolList","error","getLocalJsonPoolList","isGetGroupData","envConfigs","url","rsp","originList","lowerCaseParamsPools","hasMatchingPool","lowerCaseParamsPool","coinArr","coinTypeA","fixCoinType","coinTypeB","newList","getDlmmPoolList","useCallback"],"mappings":"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"}