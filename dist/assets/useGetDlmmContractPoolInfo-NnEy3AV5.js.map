{"version":3,"file":"useGetDlmmContractPoolInfo-NnEy3AV5.js","sources":["../../src/hooks/pool/useGetDlmmPools.ts","../../src/hooks/dlmm/useGetDlmmContractPoolInfo.ts"],"sourcesContent":["import { DLMMStatsPoolsPath } from '@/apis/path'\nimport { DLMMPoolApiInfo } from '@/types'\nimport { formatCoinTypesParams } from '@/utils/pool'\nimport { useFetch } from '@cetus/hooks'\nimport envConfigs from '@cetus/types/src/config/envConfigs'\nimport { normalizeCoinType } from '@cetusprotocol/common-sdk'\nimport { GetPoolListParams } from './type'\nimport useGetDlmmPoolList from './useGetDlmmPoolList'\nimport useWrapPoolData from './useWrapPoolData'\nimport { wrapGetPoolParams } from './utils'\n\nexport default function useGetDlmmPools() {\n  const { fetchByApi } = useFetch()\n  const { wrapDLmmPoolData } = useWrapPoolData()\n  const { getLocalJsonPoolList } = useGetDlmmPoolList()\n\n  const getDlmmPools = async (\n    params: GetPoolListParams\n  ): Promise<{\n    list: DLMMPoolApiInfo[]\n    total: number\n    isLocal?: boolean\n  }> => {\n    const apiParams = { ...params }\n    const coinTypes = formatCoinTypesParams(params?.coin_type)\n    if (coinTypes) {\n      apiParams['coin_type'] = coinTypes\n    }\n    const wrapApiParams = wrapGetPoolParams(apiParams)\n    try {\n      console.log('ðŸš€ðŸš€ðŸš€ ~ getDlmmPools.ts:89 ~ getDlmmPools ~ warapApiParams:', wrapApiParams)\n\n      const res = await fetchByApi(DLMMStatsPoolsPath, 'POST', wrapApiParams)\n      console.log('ðŸš€ðŸš€ðŸš€ ~ getDlmmPools.ts:41 ~ getDlmmPools ~ res:', res)\n      // if ((!res?.data?.list || res?.data?.list?.length === 0) && envConfigs.env === 'testnet') {\n      //   throw Error('testnet no data')\n      // }\n\n      if (res?.data?.list) {\n        const poolList = res?.data?.list?.map((item: any) => {\n          return wrapDLmmPoolData(item)\n        })\n        console.log('ðŸš€ ~ file: getDlmmPools.ts:42 ~ poolList ~ poolList:', poolList)\n\n        return {\n          list: poolList,\n          total: res?.data?.total\n        }\n      }\n    } catch (error) {\n      console.log('ðŸš€ ~ useGetPoolList ~ error:', error)\n\n      const res = await getLocalJsonPoolList(wrapApiParams, false)\n      console.log('ðŸš€ ~ useGetDlmmPools ~ res:', res)\n      return res\n    }\n\n    return {\n      list: [],\n      total: 0\n    }\n  }\n\n  const formatCoinAddress = (address: string) => {\n    return normalizeCoinType(address) === '0x2::sui::SUI'\n      ? '0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI'\n      : normalizeCoinType(address)\n  }\n\n  const getLocalJsonPoolAddress = async (from_type: string, to_type: string): Promise<string[]> => {\n    try {\n      const from = formatCoinAddress(from_type)\n      const to = formatCoinAddress(to_type)\n\n      const url = envConfigs.env === 'testnet' ? '/data/all-pools-testnet.json' : '/data/all-pools.json'\n      const res = await fetch(url).then(rsp => {\n        return rsp.json()\n      })\n      if (res) {\n        const poolList = res[`${from.toLocaleLowerCase()}-${to.toLocaleLowerCase()}`] || res[`${to.toLocaleLowerCase()}-${from.toLocaleLowerCase()}`]\n\n        console.log('ðŸš€ --------------------------------------------------ðŸš€')\n        console.log(\n          'ðŸš€ ~ getLocalJsonPoolAddress ~ poolList:',\n          poolList,\n          `${from.toLocaleLowerCase()}-${to.toLocaleLowerCase()}`,\n          `${to.toLocaleLowerCase()}-${from.toLocaleLowerCase()}`\n        )\n        console.log('ðŸš€ --------------------------------------------------ðŸš€')\n        return poolList as string[]\n      }\n    } catch (error) {\n      console.error('getLocalJsonPoolAddress Error:', error)\n    }\n\n    return []\n  }\n\n  return {\n    getDlmmPools,\n    getLocalJsonPoolList,\n    getLocalJsonPoolAddress\n  }\n}\n","import useDlmmLiquidityStore from '@/store/dlmm'\nimport useAddDlmmLiquidityStore from '@/store/dlmm/addDlmmLiquidity'\nimport { getPoolDirection } from '@/utils/pool'\nimport { useGetToken } from '@cetus/hooks/src/useToken'\nimport { useSdk } from '@cetus/sdk-factory'\nimport { CoinType } from '@cetus/types'\nimport { camelCaseObject, d } from '@cetus/utils'\nimport { FEE_PRECISION } from '@cetusprotocol/dlmm-sdk'\n\nfunction useGetDlmmContractPoolInfo() {\n  const dlmmSdk = useSdk('dlmm')\n  const { fetchTokenInfo } = useGetToken()\n  const {\n    dlmmContractPoolInfo,\n    setDlmmContractPoolInfo,\n    setDlmmContractPoolInfoLoading,\n    dlmmApiPoolInfo,\n    setDlmmApiPoolInfo,\n    setDlmmApiPoolInfoLoading\n  } = useDlmmLiquidityStore()\n\n  const { setFromToken, setToToken } = useAddDlmmLiquidityStore()\n  const getDlmmContractPoolInfo = async (poolId: string) => {\n    setDlmmContractPoolInfoLoading(true)\n    let poolInfo: any = null\n    if (dlmmSdk) {\n      try {\n        const res = await dlmmSdk!.Pool.getPool(poolId)\n        poolInfo = { ...res, ...camelCaseObject(res), poolAddress: res?.id }\n        if ((dlmmApiPoolInfo as any)?.displayTokenA === undefined) {\n          const _dlmmApiPool = await formatDlmmApiPoolByContractPool(poolInfo)\n          if (_dlmmApiPool) {\n            setDlmmApiPoolInfo(_dlmmApiPool as any)\n            setDlmmApiPoolInfoLoading(false)\n            setFromToken(_dlmmApiPool?.displayTokenA)\n            setToToken(_dlmmApiPool?.displayTokenB)\n          }\n        }\n      } catch (error) {\n        console.error('getDlmmContractPoolInfo error:', error)\n      } finally {\n        setDlmmContractPoolInfoLoading(false)\n        setDlmmApiPoolInfoLoading(false)\n      }\n    }\n    if (!dlmmContractPoolInfo) {\n      setDlmmContractPoolInfo(poolInfo || null)\n      return poolInfo\n    } else {\n      if (poolInfo) {\n        setDlmmContractPoolInfo(poolInfo as any)\n        return poolInfo\n      } else {\n        return dlmmContractPoolInfo\n      }\n    }\n  }\n\n  async function formatDlmmApiPoolByContractPool(cPool: Record<string, any>) {\n    const tokenA = await fetchTokenInfo(cPool.coinTypeA as CoinType)\n    const tokenB = await fetchTokenInfo(cPool.coinTypeB as CoinType)\n    if (tokenA && tokenB) {\n      const name = `${tokenA?.symbol} - ${tokenB?.symbol}`\n\n      const baseFee = d(cPool?.baseFeeRate).div(FEE_PRECISION).toString()\n      const baseFeeDisplay = d(baseFee).mul(100).toString() + '%'\n      const isReverse = !getPoolDirection(cPool.coinTypeA, cPool.coinTypeB)\n      const pool = {\n        ...cPool,\n        poolAddress: cPool.poolAddress,\n        name,\n        isReverse,\n        tokenA,\n        tokenB,\n        displayTokenA: isReverse ? tokenB : tokenA,\n        displayTokenB: isReverse ? tokenA : tokenB,\n        haveMining: false,\n        miningRewardList: null,\n        miningAprList: null,\n        haveFarming: false,\n        farmsRewarderList: null,\n        farmsApr: '',\n        farmingAprDisplay: '',\n        feeApr: '',\n        feeAprDisplay: '',\n        miningAprTotal: '',\n        feeAndMiningAprDisplay: '',\n        totalAprDisplay: '',\n        baseFee,\n        baseFeeRate: cPool?.baseFeeRate,\n        feeDisplay: baseFeeDisplay,\n        baseFeeDisplay,\n        tvlDisplay: '0',\n        volume24Display: '0',\n        fees24Display: '0',\n        isVaults: false\n      }\n      return pool\n    }\n    return undefined\n  }\n\n  return { getDlmmContractPoolInfo, formatDlmmApiPoolByContractPool }\n}\n\nexport default useGetDlmmContractPoolInfo\n"],"names":["useGetDlmmPools","fetchByApi","useFetch","wrapDLmmPoolData","useWrapPoolData","getLocalJsonPoolList","useGetDlmmPoolList","getDlmmPools","params","apiParams","coinTypes","formatCoinTypesParams","wrapApiParams","wrapGetPoolParams","res","DLMMStatsPoolsPath","_a","poolList","_c","_b","item","_d","error","formatCoinAddress","address","normalizeCoinType","from_type","to_type","from","to","url","envConfigs","rsp","useGetDlmmContractPoolInfo","dlmmSdk","useSdk","fetchTokenInfo","useGetToken","dlmmContractPoolInfo","setDlmmContractPoolInfo","setDlmmContractPoolInfoLoading","dlmmApiPoolInfo","setDlmmApiPoolInfo","setDlmmApiPoolInfoLoading","useDlmmLiquidityStore","setFromToken","setToToken","useAddDlmmLiquidityStore","getDlmmContractPoolInfo","poolId","poolInfo","camelCaseObject","_dlmmApiPool","formatDlmmApiPoolByContractPool","cPool","tokenA","tokenB","name","baseFee","d","FEE_PRECISION","baseFeeDisplay","isReverse","getPoolDirection"],"mappings":"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"}