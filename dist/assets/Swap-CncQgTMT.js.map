{"version":3,"file":"Swap-CncQgTMT.js","sources":["../../../hooks/src/useCountdownTimer.ts","../../src/components/modal/SwapConfirmModel.tsx","../../src/components/swap/Swap.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\ninterface UseCountdownTimerOptions {\n  initialCount: number\n  expired_at: string\n  onComplete?: () => void\n  onTick?: (currentCount: number) => void\n}\n\nexport const useCountdownTimer = ({ initialCount, expired_at, onComplete, onTick }: UseCountdownTimerOptions) => {\n  const timerRef = useRef<NodeJS.Timeout | null>(null)\n  const currentCountRef = useRef(initialCount)\n\n  useEffect(() => {\n    currentCountRef.current = initialCount\n    if (initialCount > 0) {\n      timerRef.current = setInterval(() => {\n        currentCountRef.current = currentCountRef.current - 1\n\n        onTick?.(currentCountRef.current)\n\n        if (currentCountRef.current <= 0) {\n          if (timerRef.current) {\n            clearInterval(timerRef.current)\n            timerRef.current = null\n          }\n          onComplete?.()\n        }\n      }, 1000)\n      onTick?.(currentCountRef.current)\n    } else {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n        timerRef.current = null\n      }\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n        timerRef.current = null\n      }\n    }\n  }, [expired_at])\n\n  return {\n    count: currentCountRef.current\n  }\n}\n","import useProStore from '@/store/pro'\nimport useSwapStore from '@/store/swap/swap'\nimport { SwapRfqData, SwapRouterData } from '@/types/swap'\nimport { Heading, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react'\nimport SwapConfirmBlock from '../swap/SwapConfirmBlock'\nimport { RfqLogoTitle } from '../swap/rfq/RfqLogoTitle'\n\ntype SwapConfirmModelProps = {\n  data: SwapRouterData | SwapRfqData\n  isOpen: boolean\n  onClose: (isManualClose?: boolean) => void\n  rftCountdownFlagRef?: React.MutableRefObject<number | undefined>\n  handleRouterSwap: (data: SwapRouterData | SwapRfqData) => void\n}\n\nexport default function SwapConfirmModel(props: SwapConfirmModelProps) {\n  const { isOpen, onClose, data, handleRouterSwap, rftCountdownFlagRef } = props\n  const { fromCoin, toCoin, routerData, userSelectQuoteMode } = useSwapStore()\n  const { isProMode } = useProStore()\n\n  return (\n    <Modal autoFocus={false} returnFocusOnClose={false} trapFocus={false} isOpen={isOpen} onClose={() => onClose(false)} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          {userSelectQuoteMode === 'rfq' ? (\n            <RfqLogoTitle />\n          ) : (\n            <Heading fontWeight=\"500\" fontSize=\"16px\">\n              {isProMode ? 'Trade' : 'Swap'}\n            </Heading>\n          )}\n        </ModalHeader>\n        <ModalCloseButton onClick={() => onClose(true)} />\n        <ModalBody textAlign=\"center\" p=\"0px\">\n          <SwapConfirmBlock\n            rftCountdownFlagRef={rftCountdownFlagRef}\n            handleRouterSwap={handleRouterSwap}\n            onClose={onClose}\n            data={data}\n            lastRouterData={routerData}\n            fromCoin={fromCoin!}\n            toCoin={toCoin!}\n            isWidget={false}\n            isSelectedRfq={userSelectQuoteMode === 'rfq'}\n          />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n","// import V3Router from '@/components/swap/V3Router'\nimport useCustomizeRouting from '@/hooks/swap/useCustomizeRouting'\nimport { useFindRfqRouting } from '@/hooks/swap/useFindRfqRouting'\nimport { useSwapHook } from '@/hooks/swap/useSwap'\nimport { useSwapButtonStatus } from '@/hooks/swap/useSwapButtonStatus'\nimport { useGetRfqData } from '@/hooks/swap/useSwapHelper'\nimport { useSwapRouter } from '@/hooks/swap/useSwapRouter'\nimport useGlobalStore from '@/store/common/global'\nimport useProStore from '@/store/pro'\nimport useSwapStore from '@/store/swap/swap'\nimport useSwapConfigStore from '@/store/swap/swapConfig'\nimport { CetusTooltip, IconBg, TradeInputGroup } from '@cetus/design'\nimport WarningTokenTipsModal from '@cetus/design/src/components/common/WarningTokenTipModal'\nimport { useAccountBalance, useCountdownTimer } from '@cetus/hooks'\nimport useWindowWidth from '@cetus/hooks/src/useWindowWidth'\nimport { useAccountStore } from '@cetus/stores'\nimport { Token } from '@cetus/types'\nimport { HTextLabelBox } from '@cetus/ui-kit'\nimport { Decimal, formatNumber } from '@cetus/utils'\nimport { fixCoinType } from '@cetusprotocol/common-sdk'\nimport { Box, Button, Center, HStack, Text, VStack } from '@chakra-ui/react'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport Slippage from '../common/Slippage'\nimport SwapConfirmModel from '../modal/SwapConfirmModel'\nimport AggregatorMode from './AggregatorMode'\nimport FreshProgressV2, { FreshProgressRef } from './FreshProgressV2'\nimport PriceRatio from './PriceRatio'\nimport PriceReference from './PriceReference'\nimport ScamsAlert from './ScamsAlert'\nimport SwapRoutes from './SwapRoutes'\nimport { RfqBottomWidget } from './rfq/RfqBottomWidget'\nimport { RfqRightWidget } from './rfq/RfqRightWidget'\n// const FreshProgressV2 = lazy(() => import('./FreshProgressV2'))\n// const PriceReference = lazy(() => import('./PriceReference'))\n\nfunction Swap() {\n  const rftCountdownFlagRef = useRef<number | undefined>(undefined)\n  const swapStore = useSwapStore()\n  const { fromCoin, toCoin, byAmountIn, setUserSelectQuoteMode, findRouterLoading, rfqData, routerData, userSelectQuoteMode } = swapStore\n  const {\n    handleSelectToken,\n    handleAmountChange,\n    fromAmount,\n    toAmount,\n    fromAmountValue,\n    toAmountValue,\n    fromBalanceInfo,\n    toBalanceInfo,\n    amountLimit,\n    getSwapSecondaryData,\n    handleRouterSwap,\n    reCalculateRouteData,\n    scamsText,\n    refreshMarketPrice,\n    isOpenConfirmModel,\n    setIsOpenConfirmModel,\n    resetInputAmount,\n    onReverseClick\n  } = useSwapHook(swapStore, false, rftCountdownFlagRef)\n\n  const { showTokenInfo, isProMode, currentProTab, currentProTabUpdateWith } = useProStore()\n  useEffect(() => {\n    console.log('Swap üöÄ ~ useEffect ~ currentProTabUpdateWith:', currentProTabUpdateWith)\n    if (currentProTabUpdateWith === 'toggleBtn' || !currentProTabUpdateWith) return\n\n    if (showTokenInfo?.coin_type && toCoin?.coin_type && fromCoin?.coin_type) {\n      if (\n        (currentProTab == 'Buy' && fixCoinType(showTokenInfo?.coin_type) !== fixCoinType(toCoin?.coin_type)) ||\n        (currentProTab == 'Sell' && fixCoinType(showTokenInfo?.coin_type) !== fixCoinType(fromCoin?.coin_type))\n      ) {\n        // return\n        onReverseClick(!isAllowInputReceiveSide)\n      }\n    } else if (showTokenInfo?.coin_type && fromCoin?.coin_type && !toCoin?.coin_type) {\n      onReverseClick(!isAllowInputReceiveSide)\n    } else if (showTokenInfo?.coin_type && !fromCoin?.coin_type && toCoin?.coin_type) {\n      onReverseClick(!isAllowInputReceiveSide)\n    }\n  }, [currentProTab])\n\n  const { currentAccount, onWalletModal } = useAccountStore()\n  const { fetchAccountBalance } = useAccountBalance()\n  const { isOpenRfqSwitch, rfqConfigs } = useSwapConfigStore()\n  const { fetchRfqConfigs } = useFindRfqRouting()\n\n  useEffect(() => {\n    if (currentAccount?.address) {\n      fetchAccountBalance()\n    }\n    // Ëé∑ÂèñrfqÈÖçÁΩÆ‰ø°ÊÅØ\n    fetchRfqConfigs()\n  }, [])\n  // Swap ÊåâÈíÆÁä∂ÊÄÅ\n  const { btnText, btnDisabled } = useSwapButtonStatus(fromAmount, toAmount, fromBalanceInfo?.balanceFormat, fromCoin, toCoin, routerData)\n  const progressRef = useRef<FreshProgressRef>(null)\n\n  const { allProviders } = useSwapRouter(routerData)\n  const { isOpenAggregatorMode, isAllowInputReceiveSide } = useCustomizeRouting(true)\n\n  const isOpenConfirmModelRef = useRef<boolean>(isOpenConfirmModel)\n\n  const bestRfqData = useGetRfqData(rfqData, routerData)\n\n  useCountdownTimer({\n    initialCount: bestRfqData?.rfqQuote?.total_countdown || 0,\n    expired_at: bestRfqData?.rfqQuote?.expired_at || '0',\n    onTick: (currentAccount: number) => {\n      if (findRouterLoading) {\n        rftCountdownFlagRef.current = undefined\n        return\n      }\n      rftCountdownFlagRef.current = currentAccount\n      if (currentAccount === 0) {\n        if (!isOpenConfirmModelRef.current) {\n          reCalculateRouteData()\n        }\n      }\n    }\n  })\n\n  useEffect(() => {\n    isOpenConfirmModelRef.current = isOpenConfirmModel\n  }, [isOpenConfirmModel])\n\n  const handleReset = () => {\n    progressRef.current?.reset()\n  }\n\n  const handleRefresh = (refreshRfq = true) => {\n    rftCountdownFlagRef.current = undefined\n    //Âà∑Êñ∞Router\n    reCalculateRouteData(refreshRfq)\n\n    //Âà∑Êñ∞‰ΩôÈ¢ù\n    fetchAccountBalance()\n    // Âà∑Êñ∞Â∏ÇÂú∫‰ª∑Ê†º\n    refreshMarketPrice()\n  }\n\n  // TODO Â¶ÇÊûúÊúâ‰øÆÊîπÔºåÈáçÁΩÆÂÆöÊó∂Âô®\n  useEffect(() => {\n    handleReset()\n  }, [toAmount, fromAmount, fromCoin?.coin_type, toCoin?.coin_type])\n\n  useEffect(() => {\n    if (!byAmountIn) {\n      handleRefresh()\n    }\n  }, [fromCoin?.coin_type, toCoin?.coin_type])\n\n  // ÂàáÊç¢ÂºÄÂÖ≥ ÊÉÖÂÜµËæìÂÖ•\n  useEffect(() => {\n    resetInputAmount()\n  }, [isOpenAggregatorMode])\n\n  const warningTokenList = useMemo(() => {\n    const list: Token[] = []\n    if (fromCoin) {\n      list.push(fromCoin)\n    }\n\n    if (toCoin) {\n      list.push(toCoin)\n    }\n\n    return list\n  }, [fromCoin, toCoin])\n\n  const [tradeIcon, setTradeIcon] = useState('#icon-a-icon_trade')\n\n  const onTradeIconMouseEnter = () => {\n    setTradeIcon('#icon-icon_swap1')\n  }\n\n  const onTradeIconMouseLeave = () => {\n    setTradeIcon('#icon-a-icon_trade')\n  }\n  const { isApp, windowWidth } = useWindowWidth()\n  const { isShowTradeChart, setIsShowTradeChart, isShowTradeOrders, setIsShowTradeOrders } = useGlobalStore()\n  return (\n    <HStack position=\"relative\">\n      <VStack gap={{ base: '16px', lg: '8px' }} w={{ base: '100%', lg: isProMode ? '380px' : '470px' }}>\n        <HStack w=\"100%\" justify=\"space-between\">\n          <AggregatorMode showRfqSwitch={true} />\n          <HStack>\n            <Slippage />\n            {/* <MEVProtect /> */}\n            {!isProMode && (\n              <CetusTooltip\n                showTooltip={isApp ? false : true}\n                placement=\"bottom-end\"\n                tooltip={<Text fontSize=\"12px\">{isShowTradeChart ? 'Hide reference price' : 'View reference price'}</Text>}\n              >\n                <Center>\n                  <IconBg\n                    w=\"28px\"\n                    h=\"28px\"\n                    borderRadius=\"8px\"\n                    variant=\"\"\n                    xlinkHref=\"#icon-icon_kline\"\n                    svgFill={isShowTradeChart ? 'primary' : ''}\n                    svgHover={isShowTradeChart ? 'primary' : isApp ? 'text_paragraph' : 'text_caption'}\n                    onClick={() => setIsShowTradeChart(!isShowTradeChart)}\n                  />\n                </Center>\n              </CetusTooltip>\n            )}\n            {/* <Suspense fallback={<div />}> */}\n\n            <FreshProgressV2\n              // toDo: ‰∏∫‰∫ÜË∞ÉËØïÊñ∞ÁöÑË∑ØÂæÑÂºπÊ°ÜÊöÇÊó∂Ë∞ÉÊï¥Ëá™Âä®Âà∑Êñ∞Êó∂Èó¥Âå∫Èó¥ÔºåÂêéÈù¢Ë¶ÅÊîπÂõû\n              callbackInterval={isOpenConfirmModel ? 5 : 10}\n              // callbackInterval={isOpenConfirmModel ? 5 : 99999999999}\n              ref={progressRef}\n              min={0}\n              max={10}\n              // max={99999999999}\n              onClick={() => {\n                // Â¶ÇÊûúÂΩìÂâçÊâìÂºÄ‰∫åÊ¨°Á°ÆËÆ§ÂºπÁ™óÔºå‰∏îÈÄâÊã©ÁöÑÊòØrfq,Âàô‰∏çËá™Âä®Âà∑Êñ∞\n                if (isOpenConfirmModel && userSelectQuoteMode === 'rfq') {\n                  return\n                }\n                // Â¶ÇÊûúÂΩìÂâçÊâìÂºÄrouter‰∫åÊ¨°Á°ÆËÆ§ÂºπÁ™óÔºåÂàô‰∏çÂà∑Êñ∞rfqÔºåÊ≠§Êó∂rfqÁõ∏ÂÖ≥Êï∞ÊçÆ‰ºöË¢´Ê∏ÖÁ©∫\n                handleRefresh(!isOpenConfirmModel)\n              }}\n            />\n            {/* </Suspense> */}\n          </HStack>\n        </HStack>\n        <Box w=\"100%\">\n          <TradeInputGroup\n            // h5ÂéªÊéâËÉåÊôØÂõæ\n            // wrapStyle={isApp && !isShowTradeChart ? { bg: \"center / cover no-repeat url('/images/swap_bg.png')\" } : {}}\n            wrapStyle={{ gap: { base: '16px', lg: '8px' }, mt: { base: '0px', lg: '4px' } }}\n            onClick={() => onReverseClick(!isOpenAggregatorMode, true)}\n            from={{\n              title: 'You Pay',\n              balance: fromBalanceInfo?.balanceFormat || '',\n              value: fromAmount,\n              amountValue: !byAmountIn && findRouterLoading ? '' : fromAmountValue,\n              loading: !byAmountIn && findRouterLoading,\n              onChange: value => {\n                handleAmountChange(value, true)\n              },\n              selectable: true,\n              placeholder: '0.0',\n              token: fromCoin,\n              onFocusChange: (focus: boolean) => {\n                if (focus && +fromAmount && !byAmountIn) {\n                  handleAmountChange(fromAmount, true)\n                }\n              },\n              onTokenChange: (token: any) => {\n                handleSelectToken(token, true)\n              }\n            }}\n            to={{\n              title: 'You Receive',\n              balance: toBalanceInfo?.balanceFormat || '',\n              value: toAmount,\n              amountValue: byAmountIn && findRouterLoading ? '' : toAmountValue,\n              loading: byAmountIn && findRouterLoading,\n              onFocusChange: (focus: boolean) => {\n                if (focus && +toAmount && byAmountIn) {\n                  handleAmountChange(toAmount, false)\n                }\n              },\n              onTokenChange: (token: any) => {\n                handleSelectToken(token, false)\n              },\n              inputAllowed: isAllowInputReceiveSide,\n              onChange: value => {\n                handleAmountChange(value, false)\n              },\n              selectable: true,\n              placeholder: '0.0',\n              token: toCoin,\n              half: false,\n              max: false\n            }}\n            iconParams={{\n              xlinkHref: tradeIcon,\n              svgFill: 'text_caption',\n              transform: tradeIcon === '#icon-a-icon_trade' ? '' : 'rotate(90deg)',\n              fontSize: tradeIcon === '#icon-a-icon_trade' ? '12px' : '16px',\n              onMouseEnter: onTradeIconMouseEnter,\n              onMouseLeave: onTradeIconMouseLeave\n            }}\n          />\n\n          {/* È£éÈô©ÊèêÁ§∫ */}\n          {scamsText && (\n            <Box mt=\"-32px\" p=\"48px 16px 16px\" borderRadius=\"20px\" bg=\"bg_secondary\" border=\"1px solid\" borderColor=\"border\">\n              <ScamsAlert scamsText={scamsText} />\n            </Box>\n          )}\n        </Box>\n\n        {/* Token Ë≠¶ÂëäÂºπÁ™ó */}\n        {(fromCoin || toCoin) && (\n          <WarningTokenTipsModal\n            addToken\n            tokensInfo={warningTokenList}\n            waringModalCancel={(tokenInfo: Token[]) => {\n              tokenInfo.forEach(coin => {\n                const hasFind = coin.coin_type === fromCoin?.coin_type || coin.coin_type === toCoin?.coin_type\n                if (hasFind) {\n                  handleSelectToken(undefined, coin.coin_type === fromCoin?.coin_type)\n                }\n              })\n            }}\n          />\n        )}\n\n        <VStack\n          p={!!+fromAmount && !!+toAmount ? '0 8px 12px' : '0 8px'}\n          w=\"100%\"\n          gap=\"8px\"\n          border=\"1px solid\"\n          borderColor=\"border\"\n          borderRadius=\"20px\"\n          bg=\"bg_secondary\"\n        >\n          <Button\n            w=\"calc(100% + 18px)\"\n            h=\"52px\"\n            margin=\"-1px\"\n            fontSize=\"18px\"\n            fontWeight=\"500\"\n            borderRadius=\"12px\"\n            variant={isProMode ? `solid-${currentProTab?.toLocaleLowerCase()}` : 'solid'}\n            // variant=\"solid\"\n            isDisabled={findRouterLoading || btnDisabled}\n            isLoading={findRouterLoading}\n            onClick={() => {\n              if (currentAccount) {\n                setUserSelectQuoteMode('router')\n                setIsOpenConfirmModel(true)\n              } else {\n                onWalletModal(true)\n              }\n            }}\n          >\n            {[fromCoin, toCoin]?.filter(Boolean).length < 2 ? 'Select a token' : isProMode && btnText == 'Swap' ? currentProTab : btnText}\n          </Button>\n          {!!+fromAmount && !!+toAmount && (\n            <VStack w=\"100%\" gap=\"12px\">\n              <PriceRatio findRouterLoading={findRouterLoading} routerData={routerData} fromCoin={fromCoin} toCoin={toCoin} />\n              <HTextLabelBox\n                isLoading={findRouterLoading}\n                label={byAmountIn ? 'Minimum Received' : 'Maximum Sold'}\n                value={`${formatNumber(amountLimit, byAmountIn ? toCoin?.decimals : fromCoin?.decimals, false, Decimal.ROUND_DOWN)} ${byAmountIn ? toCoin?.symbol : fromCoin?.symbol}`}\n                labelStyle={{ fontWeight: 500, whiteSpace: 'nowrap', fontSize: '14px' }}\n                valueStyle={{ fontWeight: 500, fontSize: '14px' }}\n                skeletonStyle={{\n                  valueW: '128px'\n                }}\n                wrapStyle={{\n                  p: '0 8px',\n                  minH: '20px'\n                }}\n              />\n\n              <SwapRoutes\n                allProviders={allProviders}\n                findRouterLoading={findRouterLoading}\n                fromAmount={fromAmount}\n                toAmount={toAmount}\n                fromCoin={fromCoin}\n                toCoin={toCoin}\n                data={routerData}\n              />\n            </VStack>\n          )}\n        </VStack>\n        {/* Â∫ïÈÉ®RFQÂ±ïÁ§∫ */}\n        {(isApp || isShowTradeChart || isProMode) && (\n          <RfqBottomWidget\n            rftCountdownFlagRef={rftCountdownFlagRef}\n            findRouterLoading={findRouterLoading}\n            isShowRfqWidget={bestRfqData?.rfqQuote !== undefined && !findRouterLoading}\n            rfqData={bestRfqData}\n            fromCoin={fromCoin}\n            toCoin={toCoin}\n            onTrade={() => {\n              setUserSelectQuoteMode('rfq')\n              setIsOpenConfirmModel(true)\n            }}\n          />\n        )}\n\n        {(!isShowTradeChart || isProMode) && (\n          // <Suspense fallback={<div />}>\n          <PriceReference fromCoin={fromCoin} toCoin={toCoin} />\n          // </Suspense>\n        )}\n        {isApp && <Box h=\"0px\" mt=\"-4px\" />}\n\n        {/* ‰∫§ÊòìÁ°ÆËÆ§ÂºπÁ™ó */}\n        {isOpenConfirmModel && (\n          <SwapConfirmModel\n            rftCountdownFlagRef={rftCountdownFlagRef}\n            data={getSwapSecondaryData()}\n            isOpen={isOpenConfirmModel}\n            handleRouterSwap={data => {\n              handleRouterSwap(data)\n            }}\n            onClose={(isManualClose = false) => {\n              setIsOpenConfirmModel(false)\n              console.log('üöÄ ~ onClose ~ userSelectQuoteMode:', userSelectQuoteMode, rftCountdownFlagRef.current)\n\n              // Â¶ÇÊûúÂΩìÂâçÊâìÂºÄÁöÑÊòØrfqÔºåËã•Ë∂ÖÊó∂ Ëã•Â∑≤ÂâçÁ´ØËá™Âä®Ëß¶ÂèëÂà∑Êñ∞ÂΩìÂâçÊä•‰ª∑\n              if (userSelectQuoteMode === 'rfq' && rftCountdownFlagRef.current === 0) {\n                reCalculateRouteData()\n              }\n\n              // Â¶ÇÊûúÂΩìÂâçÊâìÂºÄÁöÑÊòØrouterÔºåÁî®Êà∑ÂÖ≥Èó≠ÂºπÊ°ÜÂêé, Ëã•rfqÂºÄÂÖ≥ÊâìÂºÄÔºå‰∏îÊúârfq providerÔºåÂπ∂‰∏îË∂ÖÊó∂ÔºåÂàôÂà∑Êñ∞ÂΩìÂâçÊä•‰ª∑\n              if (userSelectQuoteMode === 'router' && isOpenRfqSwitch && rfqConfigs?.enable && rftCountdownFlagRef.current === 0) {\n                reCalculateRouteData()\n              }\n            }}\n          />\n        )}\n\n        {/* <V3Router data={routerData} /> */}\n      </VStack>\n      {/* Âè≥ËæπRFQÂ±ïÁ§∫ */}\n      {!isShowTradeChart && !isApp && !isProMode && (\n        <RfqRightWidget\n          rftCountdownFlagRef={rftCountdownFlagRef}\n          findRouterLoading={findRouterLoading}\n          isShowRfqWidget={bestRfqData?.rfqQuote !== undefined && !findRouterLoading}\n          rfqData={bestRfqData}\n          fromCoin={fromCoin}\n          toCoin={toCoin}\n          onTrade={() => {\n            setUserSelectQuoteMode('rfq')\n            setIsOpenConfirmModel(true)\n          }}\n        />\n      )}\n    </HStack>\n  )\n}\n\nexport default Swap\n"],"names":["useCountdownTimer","initialCount","expired_at","onComplete","onTick","timerRef","useRef","currentCountRef","useEffect","SwapConfirmModel","props","isOpen","onClose","data","handleRouterSwap","rftCountdownFlagRef","fromCoin","toCoin","routerData","userSelectQuoteMode","useSwapStore","isProMode","useProStore","jsxs","Modal","jsx","ModalOverlay","ModalContent","ModalHeader","RfqLogoTitle","Heading","ModalCloseButton","ModalBody","SwapConfirmBlock","Swap","swapStore","byAmountIn","setUserSelectQuoteMode","findRouterLoading","rfqData","handleSelectToken","handleAmountChange","fromAmount","toAmount","fromAmountValue","toAmountValue","fromBalanceInfo","toBalanceInfo","amountLimit","getSwapSecondaryData","reCalculateRouteData","scamsText","refreshMarketPrice","isOpenConfirmModel","setIsOpenConfirmModel","resetInputAmount","onReverseClick","useSwapHook","showTokenInfo","currentProTab","currentProTabUpdateWith","fixCoinType","isAllowInputReceiveSide","currentAccount","onWalletModal","useAccountStore","fetchAccountBalance","useAccountBalance","isOpenRfqSwitch","rfqConfigs","useSwapConfigStore","fetchRfqConfigs","useFindRfqRouting","btnText","btnDisabled","useSwapButtonStatus","progressRef","allProviders","useSwapRouter","isOpenAggregatorMode","useCustomizeRouting","isOpenConfirmModelRef","bestRfqData","useGetRfqData","_a","_b","handleReset","handleRefresh","refreshRfq","warningTokenList","useMemo","list","tradeIcon","setTradeIcon","useState","onTradeIconMouseEnter","onTradeIconMouseLeave","isApp","useWindowWidth","isShowTradeChart","setIsShowTradeChart","isShowTradeOrders","setIsShowTradeOrders","useGlobalStore","HStack","VStack","AggregatorMode","Slippage","CetusTooltip","Text","Center","IconBg","FreshProgressV2","Box","TradeInputGroup","value","focus","token","ScamsAlert","WarningTokenTipsModal","tokenInfo","coin","Button","PriceRatio","HTextLabelBox","formatNumber","Decimal","SwapRoutes","RfqBottomWidget","PriceReference","isManualClose","RfqRightWidget"],"mappings":"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"}