{"version":3,"file":"addLiquidity-ByI4XtN_.js","sources":["../../src/store/zap/index.ts","../../src/store/clmm/addLiquidity.ts"],"sourcesContent":["import { Token } from '@cetus/types'\nimport { create, StateCreator } from 'zustand'\n\ninterface zapState {\n  currentTokens: Token[]\n  setCurrentTokens: (data: Token[]) => void\n  zapAmount: string\n  setZapAmount: (value: string) => void\n  zapAmountRate: string\n  setZapAmountRate: (value: string) => void\n  currentZapToken: Token | undefined\n  setCurrentZapToken: (value: Token) => void\n  zapTokenBalance: any\n  setZapTokenBalance: (value: any) => void\n  preDepositeData: any\n  setPreDepositeData: (data: any) => void\n  isPreLoading: boolean\n  setIsPreLoading: (value: any) => void\n  zapApiPool: any\n  setZapApiPool: (data: any) => void\n  lower: number\n  setLower: (value: number) => void\n  upper: number\n  setUpper: (value: number) => void\n  liquidity: string\n  setLiquidity: (value: string) => void\n  zapCurrPriceData: any\n  setZapCurrPriceData: (data: any) => void\n  zapSlideValue: number\n  setZapSlideValue: (value: number | string) => void\n  resetZapData: () => void\n  posOriginAmounts: any\n  setPosOriginAmounts: (data: any) => void\n}\n\nconst store: StateCreator<zapState> = (set, get) => ({\n  currentTokens: [],\n  setCurrentTokens: (data: Token[]) => {\n    set(() => ({\n      currentTokens: data\n    }))\n  },\n  zapAmount: '',\n  setZapAmount: (value: string) => {\n    set(() => ({\n      zapAmount: value\n    }))\n  },\n  currentZapToken: undefined,\n  setCurrentZapToken: (value: Token) => {\n    set(() => ({\n      currentZapToken: value\n    }))\n  },\n  zapAmountRate: '',\n  setZapAmountRate: (value: string) => {\n    set(() => ({\n      zapAmountRate: value\n    }))\n  },\n  zapTokenBalance: undefined,\n  setZapTokenBalance: (value: any) => {\n    set(() => ({\n      zapTokenBalance: value\n    }))\n  },\n  isPreLoading: false,\n  setIsPreLoading: (value: any) => {\n    set(() => ({\n      isPreLoading: value\n    }))\n  },\n  preDepositeData: undefined,\n  setPreDepositeData: (data: any) => {\n    set(() => ({\n      preDepositeData: data,\n      isPreLoading: false\n    }))\n  },\n  zapApiPool: undefined,\n  setZapApiPool: (data: any) => {\n    set(() => ({\n      zapApiPool: data\n    }))\n  },\n  lower: 0,\n  setLower: (value: number) => {\n    set(() => ({\n      lower: value\n    }))\n  },\n  upper: 0,\n  setUpper: (value: number) => {\n    set(() => ({\n      upper: value\n    }))\n  },\n  liquidity: '',\n  setLiquidity: (value: string) => {\n    set(() => ({\n      liquidity: value\n    }))\n  },\n  zapCurrPriceData: {},\n  setZapCurrPriceData: (data: any) => {\n    set(() => ({\n      zapCurrPriceData: data\n    }))\n  },\n  zapSlideValue: 0,\n  setZapSlideValue: (value: number | string) => {\n    set(() => ({\n      zapSlideValue: Number(value === '--' ? 0 : value)\n    }))\n  },\n  posOriginAmounts: {},\n  setPosOriginAmounts: (data: any) => {\n    set(() => ({\n      posOriginAmounts: data\n    }))\n  },\n  resetZapData: () => {\n    set(() => ({\n      zapAmount: '',\n      zapAmountRate: '',\n      lower: 0,\n      upper: 0,\n      preDepositeData: undefined,\n      isPreLoading: false,\n      liquidity: '',\n      zapSlideValue: 0,\n      posOriginAmounts: {}\n    }))\n  }\n})\n\nconst useZapStore = create(store)\nexport default useZapStore\n","import { TokensMap } from '@/types'\nimport { Token } from '@cetus/types'\nimport { create, StateCreator } from 'zustand'\n\ninterface AddLiquidityState {\n  fromAmount: string\n  setFromAmount: (value: string) => void\n  fromAmountValue: string\n  setFromAmountValue: (value: string) => void\n  toAmount: string\n  setToAmount: (value: string) => void\n  toAmountValue: string\n  setToAmountValue: (value: string) => void\n  liquidityAmount: string\n  setLiquidityAmount: (value: string) => void\n  byAmountIn: boolean\n  tokenMaxA: string\n  setTokenMaxA: (value?: string) => void\n  tokenMaxB: string\n  setTokenMaxB: (value?: string) => void\n  setByAmountIn: (value: boolean) => void\n  isTokenA: boolean\n  setIsTokenA: (value: boolean) => void\n  percentMap: TokensMap\n  setPercentMap: (value: TokensMap) => void\n  isFullRange: boolean\n  setIsFullRange: (value: boolean) => void\n  fromToken: Token | undefined\n  setFromToken: (token?: Token) => void\n  fromTokenLock: boolean\n  setFromTokenLock: (lock: boolean) => void\n  toToken: Token | undefined\n  setToToken: (token?: Token) => void\n  toTokenLock: boolean\n  setToTokenLock: (lock: boolean) => void\n  totalAmount: string | undefined\n  setTotalAmount: (value?: string) => void\n  autoStakePosition: boolean\n  setAutoStakePosition: (autoStake: boolean) => void\n  isFarmRewardsRange: boolean\n  setIsFarmRewardsRange: (isRange: boolean) => void\n  resetAddLiquidity: () => void\n  useZapIn: boolean\n  setUseZapIn: (value: boolean) => void\n  confirmModalOpen: boolean\n  setConfirmModalOpen: (value: boolean) => void\n  nftOpen: boolean\n  setNftOpen: (value: boolean) => void\n  relatedPosId: string\n  setRelatedPosId: (value: string) => void\n}\n\nconst store: StateCreator<AddLiquidityState> = (set, get) => ({\n  fromAmount: '',\n  setFromAmount: (value: string) => {\n    set(() => ({\n      fromAmount: value\n    }))\n  },\n  fromAmountValue: '',\n  setFromAmountValue: (value: string) => {\n    set(() => ({\n      fromAmountValue: value\n    }))\n  },\n  toAmount: '',\n  setToAmount: (value: string) => {\n    set(() => ({\n      toAmount: value\n    }))\n  },\n  toAmountValue: '',\n  setToAmountValue: (value: string) => {\n    set(() => ({\n      toAmountValue: value\n    }))\n  },\n  liquidityAmount: '',\n  setLiquidityAmount: (value: string) => {\n    set(() => ({\n      liquidityAmount: value\n    }))\n  },\n  tokenMaxA: '',\n  setTokenMaxA: (value?: string) => {\n    set(() => ({\n      tokenMaxA: value\n    }))\n  },\n  tokenMaxB: '',\n  setTokenMaxB: (value?: string) => {\n    set(() => ({\n      tokenMaxB: value\n    }))\n  },\n  byAmountIn: true,\n  setByAmountIn: (value: boolean) => {\n    set(() => ({\n      byAmountIn: value\n    }))\n  },\n\n  isTokenA: true,\n  setIsTokenA: (value: boolean) => {\n    set(() => ({\n      isTokenA: value\n    }))\n  },\n  percentMap: { percentA: '0', percentB: '0' },\n  setPercentMap: (value: TokensMap) => {\n    set(() => ({\n      percentMap: value\n    }))\n  },\n  isFullRange: false,\n  setIsFullRange: (value: boolean) => {\n    set(() => ({\n      isFullRange: value\n    }))\n  },\n  fromToken: undefined,\n  setFromToken: (token?: Token) => {\n    set(() => ({\n      fromToken: token\n    }))\n  },\n  fromTokenLock: false,\n  setFromTokenLock: (lock: boolean) => {\n    set(() => ({\n      fromTokenLock: lock\n    }))\n  },\n  toToken: undefined,\n  setToToken: (token?: Token) => {\n    set(() => ({\n      toToken: token\n    }))\n  },\n  toTokenLock: false,\n  setToTokenLock: (lock: boolean) => {\n    set(() => ({\n      toTokenLock: lock\n    }))\n  },\n  totalAmount: undefined,\n  setTotalAmount: (value?: string) => {\n    set(() => ({\n      totalAmount: value\n    }))\n  },\n  autoStakePosition: false,\n  setAutoStakePosition: (autoStake: boolean) => {\n    set(() => ({\n      autoStakePosition: autoStake\n    }))\n  },\n  isFarmRewardsRange: false,\n  setIsFarmRewardsRange: (isRange: boolean) => {\n    set(() => ({\n      isFarmRewardsRange: isRange\n    }))\n  },\n  useZapIn: false,\n  setUseZapIn: (value: boolean) => {\n    set(() => ({\n      useZapIn: value\n    }))\n  },\n  confirmModalOpen: false,\n  setConfirmModalOpen: (value: boolean) => {\n    set(() => ({\n      confirmModalOpen: value\n    }))\n  },\n  nftOpen: false,\n  setNftOpen: (value: boolean) => {\n    set(() => ({\n      nftOpen: value\n    }))\n  },\n  relatedPosId: '',\n  setRelatedPosId: (value: string) => {\n    set(() => ({\n      relatedPosId: value\n    }))\n  },\n  resetAddLiquidity: () => {\n    set(() => ({\n      isFarmRewardsRange: false,\n      autoStakePosition: false,\n      totalAmount: undefined,\n      fromTokenLock: false,\n      fromToken: undefined,\n      toTokenLock: false,\n      toToken: undefined,\n      isFullRange: false,\n      percentMap: { percentA: '0', percentB: '0' },\n      fromAmount: '',\n      toAmount: '',\n      fromAmountValue: '',\n      toAmountValue: '',\n      liquidityAmount: '',\n      byAmountIn: true,\n      isTokenA: true,\n      useZapIn: false,\n      nftOpen: false,\n      relatedPosId: ''\n    }))\n  }\n})\n\nconst useAddLiquidityStore = create(store)\nexport default useAddLiquidityStore\n"],"names":["store","set","get","data","value","useZapStore","create","token","lock","autoStake","isRange","useAddLiquidityStore"],"mappings":"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"}