{"version":3,"file":"useXCetusHelper-CrXtSO0d.js","sources":["../../src/hooks/xcetus/useXCetusHelper.ts"],"sourcesContent":["import useXCetusStore from '@/store/xcetus/useXCetus'\nimport { XCetusRewardInfo } from '@/types/xcetus'\nimport { useGetToken } from '@cetus/hooks/src/useToken'\nimport useTokenPrice from '@cetus/hooks/src/useTokenPrice'\nimport { useSdk } from '@cetus/sdk-factory'\nimport { useAccountStore } from '@cetus/stores'\nimport useTokenPriceStore from '@cetus/stores/src/tokenPrice'\nimport envConfigs, { xcetusConfig } from '@cetus/types/src/config/envConfigs'\nimport { d } from '@cetus/utils'\nimport { buildNFT, extractStructTagFromType, fixCoinType, fromDecimalsAmount, getMoveObjectType } from '@cetusprotocol/common-sdk'\nimport { CetusXcetusSDK, DividendManager, DividendReward, LockCetus, PhaseDividendInfo, VeNFT, XCetusUtil } from '@cetusprotocol/xcetus-sdk'\nimport { useDebounceEffect } from 'ahooks'\nimport { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n *  获取我的xcetus 订单\n * @returns\n */\nexport function useGetOwnerLockCetusList() {\n  const xCetusSdk = useSdk('xcetus')\n  const { currentAccount } = useAccountStore()\n\n  const addressRef = useRef(currentAccount?.address)\n\n  useEffect(() => {\n    addressRef.current = currentAccount?.address\n  }, [currentAccount?.address])\n\n  const { setLockCetusListLoading, clearData, setLockCetusList, setAvailableXCetusAmount, veNFT, setAvailableXCetusAmountLoading } = useXCetusStore()\n\n  const fetchOwnerLockCetusList = async (veNFT: VeNFT, address = currentAccount?.address) => {\n    if (!address) {\n      setLockCetusListLoading(false)\n      clearData()\n      return\n    }\n    setAvailableXCetusAmountLoading(true)\n\n    try {\n      const lockList = await xCetusSdk!.XCetusModule.getOwnerRedeemLockList(address)\n      console.log('🚀 ~ fetchOwnerLockCetusList ~ lockList:', {\n        lockList,\n        veNFT,\n        availableXCetusAmount: XCetusUtil.getAvailableXCetus(veNFT, lockList)\n      })\n      if (address === addressRef.current) {\n        lockList.sort((a, b) => a.locked_until_time - b.locked_until_time)\n        setLockCetusList(lockList)\n        if (veNFT) {\n          setAvailableXCetusAmount(XCetusUtil.getAvailableXCetus(veNFT, lockList))\n        }\n      }\n    } catch (error) {\n      console.log('🚀 ~ fetchOwnerLockCetusList ~ error:', error)\n    } finally {\n      setLockCetusListLoading(false)\n      setAvailableXCetusAmountLoading(false)\n    }\n  }\n\n  return {\n    fetchOwnerLockCetusList\n  }\n}\n\n/**\n *  获取用户的分红信息\n */\nexport function useGetVeNFTDividendInfo() {\n  const xCetusSdk = useSdk('xcetus')\n\n  const { setDividendRewardList } = useXCetusStore()\n\n  const fetchVeNFTDividendInfo = async (veNftId: string) => {\n    try {\n      const dividendInfo = await xCetusSdk!.XCetusModule.getVeNFTDividendInfo(veNftId)\n      console.log('🚀 ~ file: useXCetusHelper.ts:62 ~ fetchVeNFTDividendInfo ~ dividendInfo:', dividendInfo)\n\n      if (dividendInfo) {\n        setDividendRewardList(dividendInfo.rewards)\n      }\n    } catch (error) {\n      console.log('🚀 ~ fetchVeNFTDividendInfo ~ error:', error, veNftId)\n    }\n  }\n\n  return { fetchVeNFTDividendInfo }\n}\n\nexport function useGetOwnerVeNFT() {\n  const xCetusSdk = useSdk('xcetus')\n  const { currentAccount } = useAccountStore()\n  const { fetchOwnerLockCetusList } = useGetOwnerLockCetusList()\n\n  const { setVeNFTLoading, clearData, setVeNFT, setAvailableXCetusAmountLoading } = useXCetusStore()\n\n  const fetchOwnerVeNFT = async (address = currentAccount?.address, forceRefresh?: boolean) => {\n    if (!address) {\n      setVeNFTLoading(false)\n      clearData()\n      return\n    }\n\n    setVeNFTLoading(true)\n\n    try {\n      const veNFT = await xCetusSdk!.XCetusModule.getOwnerVeNFT(address, forceRefresh)\n      console.log('🚀 ~ fetchOwnerVeNFT ~ veNFT:', veNFT)\n      if (veNFT) {\n        setVeNFT(veNFT, address)\n        fetchOwnerLockCetusList(veNFT, address)\n        return veNFT\n      }\n    } catch (error) {\n      console.log('🚀 ~ fetchOwnerVeNFT ~ error:', error)\n    } finally {\n      setVeNFTLoading(false)\n      setAvailableXCetusAmountLoading(false)\n    }\n  }\n\n  return { fetchOwnerVeNFT }\n}\n\n/**\n * 获取当前期数和下一期开始时间\n */\nexport function useGetCurrPeriod() {\n  const { dividendManager } = useXCetusStore()\n  const [currentPeriod, setCurrentPeriod] = useState<number | undefined>()\n  const [nextStartTime, setNextStartTime] = useState<number | undefined>()\n\n  const calculateCurrPeriod = (dividendManager: DividendManager) => {\n    const currentTime = Date.now() / 1000\n    const { start_time, interval_day } = dividendManager\n\n    const nextStartTime = Number(XCetusUtil.getNextStartTime(dividendManager).toString())\n\n    const currentPeriod =\n      envConfigs.env == 'testnet'\n        ? Math.ceil((currentTime - start_time) / (interval_day * 60))\n        : Math.ceil((currentTime - start_time) / (interval_day * 24 * 3600))\n\n    setCurrentPeriod(currentPeriod)\n    setNextStartTime(nextStartTime)\n  }\n\n  useEffect(() => {\n    if (dividendManager) {\n      calculateCurrPeriod(dividendManager)\n    }\n  }, [dividendManager])\n\n  return {\n    currentPeriod,\n    nextStartTime,\n    calculateCurrPeriod\n  }\n}\n\n/**\n * 计算APR\n */\nexport function useGetXCetusApr(phaseDividendInfo?: PhaseDividendInfo, treasury?: string) {\n  const { fetchTokenInfo } = useGetToken()\n  const { getTokenAmountValue } = useTokenPrice()\n  const { coinPriceObj } = useTokenPriceStore()\n  const [cetusApr, setCetusApr] = useState<string>('0')\n  const calculateAPR = useCallback(async () => {\n    if (!phaseDividendInfo || !treasury) return\n\n    try {\n      const bonusList = phaseDividendInfo.bonus\n      const coinTypeList = bonusList.map(bonus => fixCoinType(bonus.name, false))\n      const tokenMap = await fetchTokenInfo<string[]>(coinTypeList)\n      // 并行获取所有代币信息和金额价值\n      const totalBonusAmountValue = bonusList\n        .map(bonus => {\n          const coinType = fixCoinType(bonus.name, false)\n          const coinInfo = tokenMap?.get(coinType)\n          if (coinInfo) {\n            const amount = fromDecimalsAmount(bonus.value, coinInfo.decimals).toString()\n            const value = getTokenAmountValue(coinType, amount)\n            // console.log('🚀 ---------------------------------------------------------------🚀')\n            // console.log('🚀 ~ file: useXCetusHelper.ts:158 ~ calculateAPR ~ value:', value, coinType)\n            // console.log('🚀 ---------------------------------------------------------------🚀')\n            return value\n          }\n          return '0'\n        })\n        .reduce((acc, value) => acc.add(value), d(0)) // 汇总价值\n      // 获取 Cetus 的总价值\n      const cetusValue = getTokenAmountValue(envConfigs.cetus_coin.coin_type, fromDecimalsAmount(treasury, 9).toString())\n\n      // 计算 APR\n      const apr = d(cetusValue).gt(0) ? totalBonusAmountValue.div(7).mul(365).div(cetusValue).mul(100).toFixed(2) : '0'\n\n      setCetusApr(Number(apr) > 0 && Number(apr) < 0.01 ? '0.01' : apr.toString())\n    } catch (error) {\n      console.error('Error calculating APR:', error)\n      setCetusApr('0.01') // 处理错误时设置默认值\n    }\n  }, [phaseDividendInfo?.bonus, treasury, coinPriceObj])\n\n  useDebounceEffect(() => {\n    calculateAPR()\n  }, [phaseDividendInfo?.bonus, treasury, coinPriceObj])\n\n  return { cetusApr }\n}\n\n/**\n * 获取用户的奖励信息\n */\nexport function useGetUserRewards(currentPeriod?: number) {\n  const { dividendRewardList } = useXCetusStore()\n  const { fetchTokenInfo } = useGetToken()\n  const { getTokenAmountValue } = useTokenPrice()\n  const [summaryRewardList, setSummaryRewardList] = useState<XCetusRewardInfo[]>([])\n  const [rewardList, setRewardList] = useState<DividendReward[]>([])\n  const [totalRewardValue, setTotalRewardValue] = useState<string>('0')\n\n  const calculateRewards = useCallback(async () => {\n    let totalValue = d(0)\n\n    // 过滤掉奖励全为0的 和  当期的奖励\n    const filteredList = dividendRewardList.filter(item => {\n      if (item.period === currentPeriod) {\n        return false\n      }\n      if (item.rewards.find(reward => d(reward.amount).eq(0))) {\n        return false\n      }\n      return true\n    })\n\n    console.log('🚀 ~ file: useXCetusHelper.ts:107 ~ calculateRewards ~ filteredList:', {\n      filteredList,\n      dividendRewardList,\n      currentPeriod\n    })\n\n    setRewardList(filteredList)\n\n    const rewardMap: Record<string, XCetusRewardInfo> = {}\n    const coinTypeList = filteredList.flatMap(item => item.rewards.map(reward => fixCoinType(reward.coin_type, false)))\n    const tokenMap = await fetchTokenInfo<string[]>(coinTypeList)\n\n    filteredList.forEach(item => {\n      for (const reward of item.rewards) {\n        const coinType = fixCoinType(reward.coin_type, false)\n        const coinInfo = tokenMap?.get(coinType)\n        if (coinInfo) {\n          const amount = fromDecimalsAmount(reward.amount, coinInfo.decimals).toString()\n\n          const amountValue = getTokenAmountValue(coinType, amount)\n          // console.log('🚀 -------------------------------------------------------------------------------🚀')\n          // console.log('🚀 ~ file: useXCetusHelper.ts:213 ~ calculateRewards ~ amountValue:', amountValue, coinType)\n          // console.log('🚀 -------------------------------------------------------------------------------🚀')\n\n          totalValue = totalValue.add(amountValue)\n\n          // 更新 rewardMap\n          rewardMap[coinType] = rewardMap[coinType]\n            ? {\n                ...rewardMap[coinType],\n                amount: d(rewardMap[coinType].amount).add(amount).toString(),\n                value: d(rewardMap[coinType].value).add(amountValue).toString()\n              }\n            : {\n                amount,\n                coin_type: coinType,\n                value: amountValue\n              }\n        }\n      }\n    })\n    setSummaryRewardList(\n      Object.values(rewardMap)\n        .filter(item => d(item.amount).gt(0))\n        .sort((a, b) => d(b.value).sub(a.value).toNumber())\n    )\n\n    setTotalRewardValue(totalValue.toString())\n  }, [dividendRewardList, getTokenAmountValue, currentPeriod])\n\n  useEffect(() => {\n    if (currentPeriod) {\n      calculateRewards()\n    }\n  }, [dividendRewardList, currentPeriod])\n\n  return {\n    summaryRewardList,\n    rewardList,\n    totalRewardValue\n  }\n}\n\nexport const XCetusVeNFTType = `${xcetusConfig.xcetus.package_id}::xcetus::VeNFT`\nexport const XCetusLockCetusType = `${xcetusConfig.xcetus.package_id}::lock_coin::LockedCoin<${envConfigs.cetus_coin.coin_type}>`\n\nexport function buildVeNFT(dataList: any[]) {\n  let veNFT: VeNFT | undefined\n  dataList.forEach(item => {\n    if (item) {\n      const type = extractStructTagFromType(getMoveObjectType(item) as string).source_address\n      if (type === XCetusVeNFTType && item.data && item.data.content) {\n        const { fields } = item.data.content\n\n        veNFT = {\n          ...buildNFT(item),\n          id: fields.id.id,\n          index: fields.index,\n          type,\n          xcetus_balance: fields.xcetus_balance\n        }\n        return veNFT\n      }\n    }\n  })\n  return veNFT\n}\n\nexport async function buildLockCetus(dataList: any[], xCetusSdk: CetusXcetusSDK) {\n  const lockCetusList: LockCetus[] = []\n  for (let i = 0; i < dataList.length; i++) {\n    const item = dataList[i]\n    if (item) {\n      const type = extractStructTagFromType(getMoveObjectType(item) as string).source_address\n      if (type === XCetusLockCetusType && item.data) {\n        const lockCetus = XCetusUtil.buildLockCetus(item.data.content)\n        lockCetus.xcetus_amount = await xCetusSdk.XCetusModule.getXCetusAmount(lockCetus.id)\n        lockCetusList.push(lockCetus)\n      }\n    }\n  }\n  return lockCetusList\n}\n"],"names":["useGetOwnerLockCetusList","xCetusSdk","useSdk","currentAccount","useAccountStore","addressRef","useRef","useEffect","setLockCetusListLoading","clearData","setLockCetusList","setAvailableXCetusAmount","veNFT","setAvailableXCetusAmountLoading","useXCetusStore","address","lockList","XCetusUtil","a","b","error","useGetVeNFTDividendInfo","setDividendRewardList","veNftId","dividendInfo","useGetOwnerVeNFT","fetchOwnerLockCetusList","setVeNFTLoading","setVeNFT","forceRefresh","useGetCurrPeriod","dividendManager","currentPeriod","setCurrentPeriod","useState","nextStartTime","setNextStartTime","calculateCurrPeriod","currentTime","start_time","interval_day","envConfigs","useGetXCetusApr","phaseDividendInfo","treasury","fetchTokenInfo","useGetToken","getTokenAmountValue","useTokenPrice","coinPriceObj","useTokenPriceStore","cetusApr","setCetusApr","calculateAPR","useCallback","bonusList","coinTypeList","bonus","fixCoinType","tokenMap","totalBonusAmountValue","coinType","coinInfo","amount","fromDecimalsAmount","acc","value","d","cetusValue","apr","useDebounceEffect","useGetUserRewards","dividendRewardList","summaryRewardList","setSummaryRewardList","rewardList","setRewardList","totalRewardValue","setTotalRewardValue","calculateRewards","totalValue","filteredList","item","reward","rewardMap","amountValue","XCetusVeNFTType","xcetusConfig","XCetusLockCetusType","buildVeNFT","dataList","type","extractStructTagFromType","getMoveObjectType","fields","buildNFT","buildLockCetus","lockCetusList","i","lockCetus"],"mappings":"uPAkBO,SAASA,GAA2B,CACzC,MAAMC,EAAYC,EAAO,QAAQ,EAC3B,CAAE,eAAAC,CAAA,EAAmBC,EAAA,EAErBC,EAAaC,EAAAA,OAAOH,GAAA,YAAAA,EAAgB,OAAO,EAEjDI,EAAAA,UAAU,IAAM,CACdF,EAAW,QAAUF,GAAA,YAAAA,EAAgB,OACvC,EAAG,CAACA,GAAA,YAAAA,EAAgB,OAAO,CAAC,EAE5B,KAAM,CAAE,wBAAAK,EAAyB,UAAAC,EAAW,iBAAAC,EAAkB,yBAAAC,EAA0B,MAAAC,EAAO,gCAAAC,CAAA,EAAoCC,EAAA,EAgCnI,MAAO,CACL,wBA/B8B,MAAOF,EAAcG,EAAUZ,GAAA,YAAAA,EAAgB,UAAY,CACzF,GAAI,CAACY,EAAS,CACZP,EAAwB,EAAK,EAC7BC,EAAA,EACA,MACF,CACAI,EAAgC,EAAI,EAEpC,GAAI,CACF,MAAMG,EAAW,MAAMf,EAAW,aAAa,uBAAuBc,CAAO,EAC7E,QAAQ,IAAI,2CAA4C,CACtD,SAAAC,EACA,MAAAJ,EACA,sBAAuBK,EAAW,mBAAmBL,EAAOI,CAAQ,CAAA,CACrE,EACGD,IAAYV,EAAW,UACzBW,EAAS,KAAK,CAACE,EAAGC,IAAMD,EAAE,kBAAoBC,EAAE,iBAAiB,EACjET,EAAiBM,CAAQ,EACrBJ,GACFD,EAAyBM,EAAW,mBAAmBL,EAAOI,CAAQ,CAAC,EAG7E,OAASI,EAAO,CACd,QAAQ,IAAI,wCAAyCA,CAAK,CAC5D,QAAA,CACEZ,EAAwB,EAAK,EAC7BK,EAAgC,EAAK,CACvC,CACF,CAGE,CAEJ,CAKO,SAASQ,GAA0B,CACxC,MAAMpB,EAAYC,EAAO,QAAQ,EAE3B,CAAE,sBAAAoB,CAAA,EAA0BR,EAAA,EAelC,MAAO,CAAE,uBAbsB,MAAOS,GAAoB,CACxD,GAAI,CACF,MAAMC,EAAe,MAAMvB,EAAW,aAAa,qBAAqBsB,CAAO,EAC/E,QAAQ,IAAI,4EAA6EC,CAAY,EAEjGA,GACFF,EAAsBE,EAAa,OAAO,CAE9C,OAASJ,EAAO,CACd,QAAQ,IAAI,uCAAwCA,EAAOG,CAAO,CACpE,CACF,CAES,CACX,CAEO,SAASE,GAAmB,CACjC,MAAMxB,EAAYC,EAAO,QAAQ,EAC3B,CAAE,eAAAC,CAAA,EAAmBC,EAAA,EACrB,CAAE,wBAAAsB,CAAA,EAA4B1B,EAAA,EAE9B,CAAE,gBAAA2B,EAAiB,UAAAlB,EAAW,SAAAmB,EAAU,gCAAAf,CAAA,EAAoCC,EAAA,EA2BlF,MAAO,CAAE,gBAzBe,MAAOC,EAAUZ,GAAA,YAAAA,EAAgB,QAAS0B,IAA2B,CAC3F,GAAI,CAACd,EAAS,CACZY,EAAgB,EAAK,EACrBlB,EAAA,EACA,MACF,CAEAkB,EAAgB,EAAI,EAEpB,GAAI,CACF,MAAMf,EAAQ,MAAMX,EAAW,aAAa,cAAcc,EAASc,CAAY,EAE/E,GADA,QAAQ,IAAI,gCAAiCjB,CAAK,EAC9CA,EACF,OAAAgB,EAAShB,EAAOG,CAAO,EACvBW,EAAwBd,EAAOG,CAAO,EAC/BH,CAEX,OAASQ,EAAO,CACd,QAAQ,IAAI,gCAAiCA,CAAK,CACpD,QAAA,CACEO,EAAgB,EAAK,EACrBd,EAAgC,EAAK,CACvC,CACF,CAES,CACX,CAKO,SAASiB,GAAmB,CACjC,KAAM,CAAE,gBAAAC,CAAA,EAAoBjB,EAAA,EACtB,CAACkB,EAAeC,CAAgB,EAAIC,WAAA,EACpC,CAACC,EAAeC,CAAgB,EAAIF,WAAA,EAEpCG,EAAuBN,GAAqC,CAChE,MAAMO,EAAc,KAAK,IAAA,EAAQ,IAC3B,CAAE,WAAAC,EAAY,aAAAC,CAAA,EAAiBT,EAE/BI,EAAgB,OAAOlB,EAAW,iBAAiBc,CAAe,EAAE,UAAU,EAE9EC,EACJS,EAAW,KAAO,UACd,KAAK,MAAMH,EAAcC,IAAeC,EAAe,GAAG,EAC1D,KAAK,MAAMF,EAAcC,IAAeC,EAAe,GAAK,KAAK,EAEvEP,EAAiBD,CAAa,EAC9BI,EAAiBD,CAAa,CAChC,EAEA5B,OAAAA,EAAAA,UAAU,IAAM,CACVwB,GACFM,EAAoBN,CAAe,CAEvC,EAAG,CAACA,CAAe,CAAC,EAEb,CACL,cAAAC,EACA,cAAAG,EACA,oBAAAE,CAAA,CAEJ,CAKO,SAASK,EAAgBC,EAAuCC,EAAmB,CACxF,KAAM,CAAE,eAAAC,CAAA,EAAmBC,EAAA,EACrB,CAAE,oBAAAC,CAAA,EAAwBC,EAAA,EAC1B,CAAE,aAAAC,CAAA,EAAiBC,EAAA,EACnB,CAACC,EAAUC,CAAW,EAAIlB,EAAAA,SAAiB,GAAG,EAC9CmB,EAAeC,EAAAA,YAAY,SAAY,CAC3C,GAAI,GAACX,GAAqB,CAACC,GAE3B,GAAI,CACF,MAAMW,EAAYZ,EAAkB,MAC9Ba,EAAeD,EAAU,IAAIE,GAASC,EAAYD,EAAM,KAAM,EAAK,CAAC,EACpEE,EAAW,MAAMd,EAAyBW,CAAY,EAEtDI,EAAwBL,EAC3B,IAAIE,GAAS,CACZ,MAAMI,EAAWH,EAAYD,EAAM,KAAM,EAAK,EACxCK,EAAWH,GAAA,YAAAA,EAAU,IAAIE,GAC/B,GAAIC,EAAU,CACZ,MAAMC,EAASC,EAAmBP,EAAM,MAAOK,EAAS,QAAQ,EAAE,SAAA,EAKlE,OAJcf,EAAoBc,EAAUE,CAAM,CAKpD,CACA,MAAO,GACT,CAAC,EACA,OAAO,CAACE,EAAKC,IAAUD,EAAI,IAAIC,CAAK,EAAGC,EAAE,CAAC,CAAC,EAExCC,EAAarB,EAAoBN,EAAW,WAAW,UAAWuB,EAAmBpB,EAAU,CAAC,EAAE,UAAU,EAG5GyB,EAAMF,EAAEC,CAAU,EAAE,GAAG,CAAC,EAAIR,EAAsB,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,IAAIQ,CAAU,EAAE,IAAI,GAAG,EAAE,QAAQ,CAAC,EAAI,IAE9GhB,EAAY,OAAOiB,CAAG,EAAI,GAAK,OAAOA,CAAG,EAAI,IAAO,OAASA,EAAI,SAAA,CAAU,CAC7E,OAASjD,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CgC,EAAY,MAAM,CACpB,CACF,EAAG,CAACT,GAAA,YAAAA,EAAmB,MAAOC,EAAUK,CAAY,CAAC,EAErD,OAAAqB,EAAkB,IAAM,CACtBjB,EAAA,CACF,EAAG,CAACV,GAAA,YAAAA,EAAmB,MAAOC,EAAUK,CAAY,CAAC,EAE9C,CAAE,SAAAE,CAAA,CACX,CAKO,SAASoB,EAAkBvC,EAAwB,CACxD,KAAM,CAAE,mBAAAwC,CAAA,EAAuB1D,EAAA,EACzB,CAAE,eAAA+B,CAAA,EAAmBC,EAAA,EACrB,CAAE,oBAAAC,CAAA,EAAwBC,EAAA,EAC1B,CAACyB,EAAmBC,CAAoB,EAAIxC,EAAAA,SAA6B,CAAA,CAAE,EAC3E,CAACyC,EAAYC,CAAa,EAAI1C,EAAAA,SAA2B,CAAA,CAAE,EAC3D,CAAC2C,EAAkBC,CAAmB,EAAI5C,EAAAA,SAAiB,GAAG,EAE9D6C,EAAmBzB,EAAAA,YAAY,SAAY,CAC/C,IAAI0B,EAAab,EAAE,CAAC,EAGpB,MAAMc,EAAeT,EAAmB,OAAOU,GACzC,EAAAA,EAAK,SAAWlD,GAGhBkD,EAAK,QAAQ,KAAKC,GAAUhB,EAAEgB,EAAO,MAAM,EAAE,GAAG,CAAC,CAAC,EAIvD,EAED,QAAQ,IAAI,uEAAwE,CAClF,aAAAF,EACA,mBAAAT,EACA,cAAAxC,CAAA,CACD,EAED4C,EAAcK,CAAY,EAE1B,MAAMG,EAA8C,CAAA,EAC9C5B,EAAeyB,EAAa,QAAQC,GAAQA,EAAK,QAAQ,IAAIC,GAAUzB,EAAYyB,EAAO,UAAW,EAAK,CAAC,CAAC,EAC5GxB,EAAW,MAAMd,EAAyBW,CAAY,EAE5DyB,EAAa,QAAQC,GAAQ,CAC3B,UAAWC,KAAUD,EAAK,QAAS,CACjC,MAAMrB,EAAWH,EAAYyB,EAAO,UAAW,EAAK,EAC9CrB,EAAWH,GAAA,YAAAA,EAAU,IAAIE,GAC/B,GAAIC,EAAU,CACZ,MAAMC,EAASC,EAAmBmB,EAAO,OAAQrB,EAAS,QAAQ,EAAE,SAAA,EAE9DuB,EAActC,EAAoBc,EAAUE,CAAM,EAKxDiB,EAAaA,EAAW,IAAIK,CAAW,EAGvCD,EAAUvB,CAAQ,EAAIuB,EAAUvB,CAAQ,EACpC,CACE,GAAGuB,EAAUvB,CAAQ,EACrB,OAAQM,EAAEiB,EAAUvB,CAAQ,EAAE,MAAM,EAAE,IAAIE,CAAM,EAAE,SAAA,EAClD,MAAOI,EAAEiB,EAAUvB,CAAQ,EAAE,KAAK,EAAE,IAAIwB,CAAW,EAAE,SAAA,CAAS,EAEhE,CACE,OAAAtB,EACA,UAAWF,EACX,MAAOwB,CAAA,CAEf,CACF,CACF,CAAC,EACDX,EACE,OAAO,OAAOU,CAAS,EACpB,OAAOF,GAAQf,EAAEe,EAAK,MAAM,EAAE,GAAG,CAAC,CAAC,EACnC,KAAK,CAAChE,EAAGC,IAAMgD,EAAEhD,EAAE,KAAK,EAAE,IAAID,EAAE,KAAK,EAAE,SAAA,CAAU,CAAA,EAGtD4D,EAAoBE,EAAW,UAAU,CAC3C,EAAG,CAACR,EAAoBzB,EAAqBf,CAAa,CAAC,EAE3DzB,OAAAA,EAAAA,UAAU,IAAM,CACVyB,GACF+C,EAAA,CAEJ,EAAG,CAACP,EAAoBxC,CAAa,CAAC,EAE/B,CACL,kBAAAyC,EACA,WAAAE,EACA,iBAAAE,CAAA,CAEJ,CAEO,MAAMS,EAAkB,GAAGC,EAAa,OAAO,UAAU,kBACnDC,EAAsB,GAAGD,EAAa,OAAO,UAAU,2BAA2B9C,EAAW,WAAW,SAAS,IAEvH,SAASgD,EAAWC,EAAiB,CAC1C,IAAI9E,EACJ,OAAA8E,EAAS,QAAQR,GAAQ,CACvB,GAAIA,EAAM,CACR,MAAMS,EAAOC,EAAyBC,EAAkBX,CAAI,CAAW,EAAE,eACzE,GAAIS,IAASL,GAAmBJ,EAAK,MAAQA,EAAK,KAAK,QAAS,CAC9D,KAAM,CAAE,OAAAY,CAAA,EAAWZ,EAAK,KAAK,QAE7B,OAAAtE,EAAQ,CACN,GAAGmF,EAASb,CAAI,EAChB,GAAIY,EAAO,GAAG,GACd,MAAOA,EAAO,MACd,KAAAH,EACA,eAAgBG,EAAO,cAAA,EAElBlF,CACT,CACF,CACF,CAAC,EACMA,CACT,CAEA,eAAsBoF,EAAeN,EAAiBzF,EAA2B,CAC/E,MAAMgG,EAA6B,CAAA,EACnC,QAASC,EAAI,EAAGA,EAAIR,EAAS,OAAQQ,IAAK,CACxC,MAAMhB,EAAOQ,EAASQ,CAAC,EACvB,GAAIhB,GACWU,EAAyBC,EAAkBX,CAAI,CAAW,EAAE,iBAC5DM,GAAuBN,EAAK,KAAM,CAC7C,MAAMiB,EAAYlF,EAAW,eAAeiE,EAAK,KAAK,OAAO,EAC7DiB,EAAU,cAAgB,MAAMlG,EAAU,aAAa,gBAAgBkG,EAAU,EAAE,EACnFF,EAAc,KAAKE,CAAS,CAC9B,CAEJ,CACA,OAAOF,CACT"}