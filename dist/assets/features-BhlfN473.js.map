{"version":3,"file":"features-BhlfN473.js","sources":["../../../../node_modules/.pnpm/@reown+appkit-controllers@1.8.5_@react-native-async-storage+async-storage@1.24.0_react-native_czqosovdogvopotkpm2ujmlvfi/node_modules/@reown/appkit-controllers/dist/esm/src/features/reown-authentication/ReownAuthenticationMessenger.js","../../../../node_modules/.pnpm/@reown+appkit-controllers@1.8.5_@react-native-async-storage+async-storage@1.24.0_react-native_czqosovdogvopotkpm2ujmlvfi/node_modules/@reown/appkit-controllers/dist/esm/src/features/reown-authentication/ReownAuthentication.js"],"sourcesContent":["import { NetworkUtil } from '@reown/appkit-common';\nimport { ChainController } from '../../controllers/ChainController.js';\nexport class ReownAuthenticationMessenger {\n    constructor(params) {\n        this.getNonce = params.getNonce;\n    }\n    async createMessage(input) {\n        const params = {\n            accountAddress: input.accountAddress,\n            chainId: input.chainId,\n            version: '1',\n            domain: typeof document === 'undefined' ? 'Unknown Domain' : document.location.host,\n            uri: typeof document === 'undefined' ? 'Unknown URI' : document.location.href,\n            resources: this.resources,\n            nonce: await this.getNonce(input),\n            issuedAt: this.stringifyDate(new Date()),\n            statement: undefined,\n            expirationTime: undefined,\n            notBefore: undefined\n        };\n        const methods = {\n            toString: () => this.stringify(params)\n        };\n        return Object.assign(params, methods);\n    }\n    stringify(params) {\n        const networkName = this.getNetworkName(params.chainId);\n        return [\n            `${params.domain} wants you to sign in with your ${networkName} account:`,\n            params.accountAddress,\n            params.statement ? `\\n${params.statement}\\n` : '',\n            `URI: ${params.uri}`,\n            `Version: ${params.version}`,\n            `Chain ID: ${params.chainId}`,\n            `Nonce: ${params.nonce}`,\n            params.issuedAt && `Issued At: ${params.issuedAt}`,\n            params.expirationTime && `Expiration Time: ${params.expirationTime}`,\n            params.notBefore && `Not Before: ${params.notBefore}`,\n            params.requestId && `Request ID: ${params.requestId}`,\n            params.resources?.length &&\n                params.resources.reduce((acc, resource) => `${acc}\\n- ${resource}`, 'Resources:')\n        ]\n            .filter(line => typeof line === 'string')\n            .join('\\n')\n            .trim();\n    }\n    getNetworkName(chainId) {\n        const requestedNetworks = ChainController.getAllRequestedCaipNetworks();\n        return NetworkUtil.getNetworkNameByCaipNetworkId(requestedNetworks, chainId);\n    }\n    stringifyDate(date) {\n        return date.toISOString();\n    }\n}\n//# sourceMappingURL=ReownAuthenticationMessenger.js.map","//\nimport { ConstantsUtil, SafeLocalStorage, SafeLocalStorageKeys } from '@reown/appkit-common';\nimport { AccountController } from '../../controllers/AccountController.js';\nimport { ApiController } from '../../controllers/ApiController.js';\nimport { BlockchainApiController } from '../../controllers/BlockchainApiController.js';\nimport { ChainController } from '../../controllers/ChainController.js';\nimport { getActiveCaipNetwork } from '../../utils/ChainControllerUtil.js';\nimport { ReownAuthenticationMessenger } from './ReownAuthenticationMessenger.js';\n/**\n * This is the configuration for using SIWX with Reown Authentication service.\n * It allows you to authenticate and capture user sessions through the Cloud Dashboard.\n */\nexport class ReownAuthentication {\n    constructor(params = {}) {\n        this.otpUuid = null;\n        this.listeners = {\n            sessionChanged: []\n        };\n        this.localAuthStorageKey =\n            params.localAuthStorageKey ||\n                SafeLocalStorageKeys.SIWX_AUTH_TOKEN;\n        this.localNonceStorageKey =\n            params.localNonceStorageKey ||\n                SafeLocalStorageKeys.SIWX_NONCE_TOKEN;\n        this.required = params.required ?? true;\n        this.messenger = new ReownAuthenticationMessenger({\n            getNonce: this.getNonce.bind(this)\n        });\n    }\n    async createMessage(input) {\n        return this.messenger.createMessage(input);\n    }\n    async addSession(session) {\n        const response = await this.request({\n            method: 'POST',\n            key: 'authenticate',\n            body: {\n                data: session.data,\n                message: session.message,\n                signature: session.signature,\n                clientId: this.getClientId(),\n                walletInfo: this.getWalletInfo()\n            },\n            headers: ['nonce', 'otp']\n        });\n        this.setStorageToken(response.token, this.localAuthStorageKey);\n        this.emit('sessionChanged', session);\n        this.setAppKitAccountUser(jwtDecode(response.token));\n        this.otpUuid = null;\n    }\n    async getSessions(chainId, address) {\n        try {\n            if (!this.getStorageToken(this.localAuthStorageKey)) {\n                return [];\n            }\n            const account = await this.request({\n                method: 'GET',\n                key: 'me',\n                query: {},\n                headers: ['auth']\n            });\n            if (!account) {\n                return [];\n            }\n            const isSameAddress = account.address.toLowerCase() === address.toLowerCase();\n            const isSameNetwork = account.caip2Network === chainId;\n            if (!isSameAddress || !isSameNetwork) {\n                return [];\n            }\n            const session = {\n                data: {\n                    accountAddress: account.address,\n                    chainId: account.caip2Network\n                },\n                message: '',\n                signature: ''\n            };\n            this.emit('sessionChanged', session);\n            this.setAppKitAccountUser(account);\n            return [session];\n        }\n        catch {\n            return [];\n        }\n    }\n    async revokeSession(_chainId, _address) {\n        return Promise.resolve(this.clearStorageTokens());\n    }\n    async setSessions(sessions) {\n        if (sessions.length === 0) {\n            this.clearStorageTokens();\n        }\n        else {\n            const session = (sessions.find(s => s.data.chainId === getActiveCaipNetwork()?.caipNetworkId) || sessions[0]);\n            await this.addSession(session);\n        }\n    }\n    getRequired() {\n        return this.required;\n    }\n    async getSessionAccount() {\n        if (!this.getStorageToken(this.localAuthStorageKey)) {\n            throw new Error('Not authenticated');\n        }\n        return this.request({\n            method: 'GET',\n            key: 'me',\n            body: undefined,\n            query: {\n                includeAppKitAccount: true\n            },\n            headers: ['auth']\n        });\n    }\n    async setSessionAccountMetadata(metadata = null) {\n        if (!this.getStorageToken(this.localAuthStorageKey)) {\n            throw new Error('Not authenticated');\n        }\n        return this.request({\n            method: 'PUT',\n            key: 'account-metadata',\n            body: { metadata },\n            headers: ['auth']\n        });\n    }\n    on(event, callback) {\n        this.listeners[event].push(callback);\n        return () => {\n            this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n        };\n    }\n    removeAllListeners() {\n        const keys = Object.keys(this.listeners);\n        keys.forEach(key => {\n            this.listeners[key] = [];\n        });\n    }\n    async requestEmailOtp({ email, account }) {\n        const otp = await this.request({\n            method: 'POST',\n            key: 'otp',\n            body: { email, account }\n        });\n        this.otpUuid = otp.uuid;\n        this.messenger.resources = [`email:${email}`];\n        return otp;\n    }\n    confirmEmailOtp({ code }) {\n        return this.request({\n            method: 'PUT',\n            key: 'otp',\n            body: { code },\n            headers: ['otp']\n        });\n    }\n    async request({ method, key, query, body, headers }) {\n        const { projectId, st, sv } = this.getSDKProperties();\n        const url = new URL(`${ConstantsUtil.W3M_API_URL}/auth/v1/${String(key)}`);\n        url.searchParams.set('projectId', projectId);\n        url.searchParams.set('st', st);\n        url.searchParams.set('sv', sv);\n        if (query) {\n            Object.entries(query).forEach(([queryKey, queryValue]) => url.searchParams.set(queryKey, String(queryValue)));\n        }\n        const response = await fetch(url, {\n            method,\n            body: body ? JSON.stringify(body) : undefined,\n            headers: Array.isArray(headers)\n                ? headers.reduce((acc, header) => {\n                    switch (header) {\n                        case 'nonce':\n                            acc['x-nonce-jwt'] = `Bearer ${this.getStorageToken(this.localNonceStorageKey)}`;\n                            break;\n                        case 'auth':\n                            acc['Authorization'] = `Bearer ${this.getStorageToken(this.localAuthStorageKey)}`;\n                            break;\n                        case 'otp':\n                            if (this.otpUuid) {\n                                acc['x-otp'] = this.otpUuid;\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                    return acc;\n                }, {})\n                : undefined\n        });\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n        if (response.headers.get('content-type')?.includes('application/json')) {\n            return response.json();\n        }\n        return null;\n    }\n    getStorageToken(key) {\n        return SafeLocalStorage.getItem(key);\n    }\n    setStorageToken(token, key) {\n        SafeLocalStorage.setItem(key, token);\n    }\n    clearStorageTokens() {\n        this.otpUuid = null;\n        SafeLocalStorage.removeItem(this.localAuthStorageKey);\n        SafeLocalStorage.removeItem(this.localNonceStorageKey);\n        this.emit('sessionChanged', undefined);\n    }\n    async getNonce() {\n        const { nonce, token } = await this.request({\n            method: 'GET',\n            key: 'nonce'\n        });\n        this.setStorageToken(token, this.localNonceStorageKey);\n        return nonce;\n    }\n    getClientId() {\n        return BlockchainApiController.state.clientId;\n    }\n    getWalletInfo() {\n        const { connectedWalletInfo } = AccountController.state;\n        if (!connectedWalletInfo) {\n            return undefined;\n        }\n        if ('social' in connectedWalletInfo) {\n            const social = connectedWalletInfo['social'];\n            const identifier = connectedWalletInfo['identifier'];\n            return { type: 'social', social, identifier };\n        }\n        const { name, icon } = connectedWalletInfo;\n        let type = 'unknown';\n        switch (connectedWalletInfo['type']) {\n            case 'EXTERNAL':\n            case 'INJECTED':\n            case 'ANNOUNCED':\n                type = 'extension';\n                break;\n            case 'WALLET_CONNECT':\n                type = 'walletconnect';\n                break;\n            default:\n                type = 'unknown';\n        }\n        return {\n            type,\n            name,\n            icon\n        };\n    }\n    getSDKProperties() {\n        return ApiController._getSdkProperties();\n    }\n    emit(event, data) {\n        this.listeners[event].forEach(listener => listener(data));\n    }\n    setAppKitAccountUser(session) {\n        const { email } = session;\n        if (email) {\n            Object.values(ConstantsUtil.CHAIN).forEach(chainNamespace => {\n                ChainController.setAccountProp('user', { email }, chainNamespace);\n            });\n        }\n    }\n}\n/**\n * Decodes a JWT token and returns its payload\n * @param token - The JWT token to decode\n * @returns The decoded payload or null if invalid\n */\nfunction jwtDecode(token) {\n    // Split the token into parts\n    const parts = token.split('.');\n    // Check if the token has the correct format (header.payload.signature)\n    if (parts.length !== 3) {\n        throw new Error('Invalid token');\n    }\n    // Decode the payload (second part)\n    const payload = parts[1];\n    if (typeof payload !== 'string') {\n        throw new Error('Invalid token');\n    }\n    // Convert base64url to base64\n    const base64 = payload.replace(/-/gu, '+').replace(/_/gu, '/');\n    // Add padding if needed\n    const padded = base64.padEnd(base64.length + ((4 - (base64.length % 4)) % 4), '=');\n    // Decode and parse the JSON\n    const decoded = JSON.parse(atob(padded));\n    return decoded;\n}\n//# sourceMappingURL=ReownAuthentication.js.map"],"names":["ReownAuthenticationMessenger","params","input","networkName","_a","acc","resource","line","chainId","requestedNetworks","ChainController","NetworkUtil","date","ReownAuthentication","SafeLocalStorageKeys","session","response","jwtDecode","address","account","isSameAddress","isSameNetwork","_chainId","_address","sessions","getActiveCaipNetwork","metadata","event","callback","cb","key","email","otp","code","method","query","body","headers","projectId","st","sv","url","ConstantsUtil","queryKey","queryValue","header","SafeLocalStorage","token","nonce","BlockchainApiController","connectedWalletInfo","AccountController","social","identifier","name","icon","type","ApiController","data","listener","chainNamespace","parts","payload","base64","padded"],"mappings":"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","x_google_ignoreList":[0,1]}