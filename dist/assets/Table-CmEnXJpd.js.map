{"version":3,"file":"Table-CmEnXJpd.js","sources":["../../../ui-kit/src/components/Pagination.tsx","../../../ui-kit/src/components/TableLoading.tsx","../../../ui-kit/src/components/Table.tsx"],"sourcesContent":["import { HStack, Text } from '@chakra-ui/react'\nimport { useMemo } from 'react'\nimport Icon from './Icon'\n\nexport interface PaginationProps {\n  total: number\n  size: number\n  currentPage: number\n  onChange: (value: number) => void\n  handleCurrentPage?: (value: number) => void\n  value?: number\n}\n\nexport default function Pagination(props: PaginationProps) {\n  const { total, size, onChange, currentPage } = props\n  const lastPage = useMemo(() => {\n    return Math.ceil(total / size)\n  }, [currentPage, total, size])\n\n  const prev = () => {\n    if (currentPage > 1) {\n      onChange(currentPage - 1)\n    }\n  }\n  const next = () => {\n    if (currentPage < lastPage) {\n      onChange(currentPage + 1)\n    }\n  }\n  return (\n    <HStack>\n      <Icon\n        iconCursor={currentPage == 1 ? 'not-allowed' : 'pointer'}\n        xlinkHref=\"#icon-icon_left\"\n        svgFill={currentPage == 1 ? 'text_paragraph' : 'text_caption'}\n        svgHover={currentPage == 1 ? 'text_paragraph' : 'primary'}\n        onClick={currentPage == 1 ? () => {} : prev}\n      />\n      <Text color=\"text_caption\" fontSize=\"14px\" fontWeight=\"500\">\n        Page {currentPage} of {lastPage}\n      </Text>\n      <Icon\n        iconCursor={currentPage == lastPage ? 'not-allowed' : 'pointer'}\n        xlinkHref=\"#icon-icon_right\"\n        svgFill={currentPage == lastPage ? 'text_paragraph' : 'text_caption'}\n        svgHover={currentPage == lastPage ? 'text_paragraph' : 'primary'}\n        onClick={currentPage == lastPage ? () => {} : next}\n      />\n    </HStack>\n  )\n}\n","import { Flex, Skeleton, TableProps, TableRowProps, Tbody, Td, Tr } from '@chakra-ui/react'\nimport { ReactNode } from 'react'\ninterface TableLoadingProps<T> extends TableProps {\n  tableListLength: number\n  tdListLength: number\n  minW?: string\n  firstTd?: ReactNode\n  rowStyle?: TableRowProps | ((record: T, index?: number) => TableRowProps)\n  isFlexStart?: boolean\n}\nexport default function TableLoading<T>(props: TableLoadingProps<T>) {\n  const { rowStyle, minW, tableListLength, tdListLength, firstTd, isFlexStart } = props\n  const tableList = new Array(tableListLength).fill(0)\n  const tdList = new Array(tdListLength).fill(0)\n\n  return (\n    <Tbody>\n      {tableList?.map((item: any, index: any) => {\n        return (\n          <Tr\n            key={item + `${index}`}\n            sx={{\n              td: {\n                _last: {\n                  '>div': {\n                    justifyContent: 'flex-end'\n                  }\n                }\n              }\n            }}\n            {...(typeof rowStyle === 'function' ? rowStyle(item, index) : rowStyle)}\n          >\n            <>\n              {firstTd && <Td>{firstTd}</Td>}\n              {tdList?.map((item: any, index: any) => {\n                return (\n                  <Td\n                    key={index}\n                    sx={{\n                      div: {\n                        justifyContent: isFlexStart ? 'flex-start' : !firstTd && index == 0 ? 'flex-start' : 'flex-end'\n                      },\n                      _last: {\n                        div: {\n                          justifyContent: 'flex-end'\n                        }\n                      }\n                    }}\n                  >\n                    <Flex w=\"100%\">\n                      <Skeleton />\n                    </Flex>\n                  </Td>\n                )\n              })}\n            </>\n          </Tr>\n        )\n      })}\n    </Tbody>\n  )\n}\n","import {\n  Center,\n  Table as CKTable,\n  TableBodyProps,\n  TableCellProps,\n  TableColumnHeaderProps,\n  TableContainer,\n  TableContainerProps,\n  TableHeadProps,\n  TableProps,\n  TableRowProps,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr\n} from '@chakra-ui/react'\nimport { Key, ReactNode } from 'react'\nimport Pagination, { PaginationProps } from './Pagination'\nimport TableLoading from './TableLoading'\n\nexport type ColumnsType<T> = {\n  title: ReactNode | ((...args: any) => ReactNode)\n  render?: ReactNode | ((record: T, index?: number) => ReactNode)\n  key: Key | ((...args: any) => Key)\n  hidden?: any\n  showLabel?: boolean\n  thConfig?: TableColumnHeaderProps\n  tdConfig?: TableCellProps\n}\n\ninterface TableType<T> extends TableProps {\n  dataSource: T[]\n  skeletonLength?: number\n  columns: ColumnsType<T>[]\n  rowKey?: string | ((record: T) => string)\n  rowClassName?: string | ((record: T) => string)\n  onRowClick?: (record: T, index?: number) => void\n  onBodyHover?: () => void\n  onBodyLeave?: () => void\n  rowStyle?: TableRowProps | ((record: T, index?: number) => TableRowProps)\n  loading: boolean\n  tdBorder?: boolean\n  firstTdSkeleton?: ReactNode | ((...args: any) => ReactNode)\n  theadConfig?: TableHeadProps\n  tbodyConfig?: TableBodyProps\n  pagination?: PaginationProps\n  isFlexStart?: boolean //table左对齐\n  trPadding?: string //table左对齐\n  noData?: ReactNode | undefined // nodata在th下面展示\n  tableContainerWrapStyle?: TableContainerProps\n  fixedHeader?: boolean //是否固定表头\n  maxHeight?: string | number //  max height\n  headBg?: string // 表头固定时候的背景色\n}\n\nfunction Table<T>({\n  dataSource,\n  skeletonLength = 3,\n  columns,\n  rowKey,\n  rowClassName,\n  loading,\n  tdBorder,\n  firstTdSkeleton,\n  theadConfig,\n  tbodyConfig,\n  rowStyle = {},\n  onRowClick,\n  onBodyHover,\n  onBodyLeave,\n  pagination,\n  isFlexStart,\n  trPadding = '16px',\n  noData,\n  tableContainerWrapStyle = {},\n  fixedHeader = false, // Default to false\n  maxHeight = 'unset', // Default height\n  headBg = 'bg_primary',\n  ...args\n}: TableType<T>) {\n  return (\n    <>\n      <TableContainer\n        w=\"100%\"\n        maxHeight={maxHeight}\n        overflowY={fixedHeader ? 'visible' : 'unset'} // 修改为 visible\n        position={fixedHeader ? 'relative' : 'unset'}\n        {...tableContainerWrapStyle}\n        sx={{\n          th: {\n            _first: {\n              pl: `${trPadding} !important`\n            },\n            _last: {\n              pr: `${trPadding} !important`\n            }\n          },\n          tbody: {\n            tr: {\n              td: {\n                _first: {\n                  pl: `${trPadding} !important`\n                },\n                _last: {\n                  pr: `${trPadding} !important`\n                }\n              }\n            }\n          },\n          ...(fixedHeader\n            ? {\n                thead: {\n                  position: 'sticky',\n                  top: 0,\n                  zIndex: 1,\n                  bg: headBg\n                }\n              }\n            : {})\n        }}\n      >\n        <CKTable size=\"sm\" {...args}>\n          <Thead {...theadConfig}>\n            <Tr>\n              {columns.map(({ title, key, thConfig }) => {\n                return (\n                  <Th key={typeof key === 'function' ? key() : key} {...thConfig}>\n                    {typeof title === 'function' ? title() : title}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </Thead>\n          {loading ? (\n            <TableLoading<T>\n              tableListLength={skeletonLength}\n              tdListLength={columns.length}\n              firstTd={typeof firstTdSkeleton === 'function' ? firstTdSkeleton() : firstTdSkeleton}\n              rowStyle={rowStyle}\n              isFlexStart={isFlexStart}\n            />\n          ) : (\n            <Tbody {...tbodyConfig} onMouseEnter={() => onBodyHover && onBodyHover()} onMouseLeave={() => onBodyLeave && onBodyLeave()}>\n              {noData && !loading ? (\n                <Tr\n                  sx={{\n                    _hover: {\n                      bg: 'none !important'\n                    }\n                  }}\n                >\n                  <Td colSpan={columns.length} textAlign=\"center\" py=\"24px\" color=\"text.secondary\">\n                    {noData}\n                  </Td>\n                </Tr>\n              ) : (\n                dataSource?.map((item: any, index) => (\n                  <Tr\n                    key={rowKey ? (typeof rowKey === 'function' ? rowKey(item) : (item as any)[`${rowKey}`]) : (item as any)?.key || index}\n                    className={rowClassName ? (typeof rowClassName === 'function' ? rowClassName(item) : rowClassName) : ''}\n                    borderBottom={tdBorder ? '1px solid' : 'none'}\n                    borderColor={tdBorder ? 'border' : 'transparent'}\n                    onClick={() => onRowClick && onRowClick(item, index)}\n                    {...(typeof rowStyle === 'function' ? rowStyle(item, index) : rowStyle)}\n                  >\n                    {columns.map(({ render, key, tdConfig }) => (\n                      <Td key={key as any} {...tdConfig} fontWeight=\"500\">\n                        {typeof render === 'function' ? render(item, index) : render || item[key as string]}\n                      </Td>\n                    ))}\n                  </Tr>\n                ))\n              )}\n            </Tbody>\n          )}\n        </CKTable>\n      </TableContainer>\n      {pagination && pagination?.total > pagination?.size && (\n        <Center mt=\"16px\">\n          <Pagination {...pagination} />\n        </Center>\n      )}\n    </>\n  )\n}\n\nexport default Table\n"],"names":["Pagination","props","total","size","onChange","currentPage","lastPage","useMemo","prev","next","HStack","jsx","Icon","Text","TableLoading","rowStyle","minW","tableListLength","tdListLength","firstTd","isFlexStart","tableList","tdList","Tbody","item","index","Tr","jsxs","Fragment","Td","Flex","Skeleton","Table","dataSource","skeletonLength","columns","rowKey","rowClassName","loading","tdBorder","firstTdSkeleton","theadConfig","tbodyConfig","onRowClick","onBodyHover","onBodyLeave","pagination","trPadding","noData","tableContainerWrapStyle","fixedHeader","maxHeight","headBg","args","TableContainer","CKTable","Thead","title","key","thConfig","Th","render","tdConfig","Center"],"mappings":"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"}