{"version":3,"file":"useDlmmPreCalc-D8nwessI.js","sources":["../../src/hooks/create-pool/useCreateDlmmButtonStatus.ts","../../src/store/pool/createDlmmPool.ts","../../src/hooks/create-pool/useDlmmCreatChart.ts","../../src/components/pools/createPool/depositAmount/DlMMChart.tsx","../../src/components/pools/createPool/depositAmount/DLMMDepositAmount.tsx","../../src/hooks/dlmm/useDlmmPreCalc.ts"],"sourcesContent":["import { useAccountStore } from '@cetus/stores'\nimport { BalanceInfo, Token } from '@cetus/types'\nimport { d, textEllipses } from '@cetus/utils'\nimport { useMemo } from 'react'\n\nfunction useCreateDlmmButtonStatus(\n  baseAmount?: string,\n  quoteAmount?: string,\n  baseToken?: Token,\n  quoteToken?: Token,\n  baseBalanceInfo?: BalanceInfo,\n  quoteBalanceInfo?: BalanceInfo,\n  positionCount?: number,\n  baseTokenLock?: boolean,\n  quoteTokenLock?: boolean\n) {\n  const { currentAccount } = useAccountStore()\n\n  const submitBtnInfo = useMemo(() => {\n    const btnInfo: {\n      text?: string\n      disabled: boolean\n    } = {\n      text: 'Create',\n      disabled: false\n    }\n\n    // 判断钱包\n    if (!currentAccount?.address) {\n      btnInfo.text = 'Connect Wallet'\n      btnInfo.disabled = false\n      return btnInfo\n    }\n\n    // 判断输入\n    if (!baseAmount || !quoteAmount || (baseAmount && !+baseAmount) || (quoteAmount && !+quoteAmount)) {\n      btnInfo.text = 'Enter an amount'\n      btnInfo.disabled = true\n      return btnInfo\n    }\n\n    //判断余额\n    if (baseAmount && +baseAmount && d(baseAmount).gt(baseBalanceInfo?.balanceFormat || 0)) {\n      btnInfo.disabled = true\n      btnInfo.text = `Insufficient ${textEllipses(baseToken?.symbol)} Balance`\n      return btnInfo\n    }\n    //判断余额\n    if (quoteAmount && +quoteAmount && d(quoteAmount).gt(quoteBalanceInfo?.balanceFormat || 0)) {\n      btnInfo.disabled = true\n      btnInfo.text = `Insufficient ${textEllipses(quoteToken?.symbol)} Balance`\n      return btnInfo\n    }\n\n    if (!baseAmount || !quoteAmount) {\n      btnInfo.disabled = true\n      return btnInfo\n    }\n    if (positionCount && +positionCount && positionCount > 1) {\n      btnInfo.disabled = true\n      btnInfo.text = 'Change the price range'\n      return btnInfo\n    }\n\n    if (baseTokenLock || quoteTokenLock) {\n      btnInfo.disabled = true\n      btnInfo.text = 'Change the price range'\n      return btnInfo\n    }\n    return btnInfo\n  }, [\n    currentAccount?.address,\n    baseAmount,\n    quoteAmount,\n    baseBalanceInfo?.balanceDisplay,\n    quoteBalanceInfo?.balanceDisplay,\n    baseToken?.coin_type,\n    quoteToken?.coin_type,\n    positionCount,\n    baseTokenLock,\n    quoteTokenLock\n  ])\n  return {\n    btnText: submitBtnInfo.text,\n    btnDisabled: submitBtnInfo.disabled\n  }\n}\n\nexport default useCreateDlmmButtonStatus\n","import { BinLiquidityInfo, StrategyType } from '@cetusprotocol/dlmm-sdk'\nimport { create, StateCreator } from 'zustand'\nimport { RangePriceType } from '../dlmm/addDlmmLiquidity'\n\ntype BinStepType = {\n  binStep: number\n  fee: string\n  feeDisplay: string\n  description: string\n  poolAddress?: string\n  title: string\n  baseFactor: number\n}\n\ntype RangePriceDataType = Omit<RangePriceType, 'tokenA' | 'tokenB'>\n\ninterface CreateDlmmPoolState {\n  initPrice: string\n  setInitPrice: (value: string) => void\n  binStep: BinStepType | undefined\n  setBinStep: (value: BinStepType | undefined) => void\n  baseAmount: string\n  setBaseAmount: (value: string) => void\n  quoteAmount: string\n  setQuoteAmount: (value: string) => void\n  baseTokenLock: boolean\n  setBaseTokenLock: (value: boolean) => void\n  quoteTokenLock: boolean\n  setQuoteTokenLock: (value: boolean) => void\n  isAutoFill: boolean\n  setIsAutoFill: (value: boolean) => void\n  strategy: StrategyType\n  setStrategy: (value: StrategyType) => void\n  fixAmountA: boolean\n  setFixAmountA: (value: boolean) => void\n  activeId: number | undefined\n  setActiveId: (value: number | undefined) => void\n  minPriceData: RangePriceDataType | undefined\n  setMinPriceData: (value: RangePriceDataType | undefined) => void\n  maxPriceData: RangePriceDataType | undefined\n  setMaxPriceData: (value: RangePriceDataType | undefined) => void\n  createBinInfos: BinLiquidityInfo | undefined\n  setCreateBinInfos: (value: BinLiquidityInfo | undefined) => void\n  positionCount: number\n  setPositionCount: (value: number) => void\n  numBins: number | string\n  setNumBins: (value: number | string) => void\n  resetCreateDlmmPoolState: () => void\n}\n\nconst store: StateCreator<CreateDlmmPoolState> = (set, get) => ({\n  initPrice: '',\n  setInitPrice: (value: string) => {\n    set(() => ({\n      initPrice: value\n    }))\n  },\n  binStep: undefined,\n  setBinStep: (value: BinStepType | undefined) => {\n    set(() => ({\n      binStep: value\n    }))\n  },\n  baseAmount: '',\n  setBaseAmount: (value: string) => {\n    set(() => ({\n      baseAmount: value\n    }))\n  },\n  quoteAmount: '',\n  setQuoteAmount: (value: string) => {\n    set(() => ({\n      quoteAmount: value\n    }))\n  },\n  baseTokenLock: false,\n  setBaseTokenLock: (value: boolean) => {\n    set(() => ({\n      baseTokenLock: value\n    }))\n  },\n  quoteTokenLock: false,\n  setQuoteTokenLock: (value: boolean) => {\n    set(() => ({\n      quoteTokenLock: value\n    }))\n  },\n  isAutoFill: true,\n  setIsAutoFill: (value: boolean) => {\n    set(() => ({\n      isAutoFill: value\n    }))\n  },\n  strategy: StrategyType.Spot,\n  setStrategy: (value: StrategyType) => {\n    set(() => ({\n      strategy: value\n    }))\n  },\n  fixAmountA: true,\n  setFixAmountA: (value: boolean) => {\n    set(() => ({\n      fixAmountA: value\n    }))\n  },\n  activeId: undefined,\n  setActiveId: (value: number | undefined) => {\n    set(() => ({\n      activeId: value\n    }))\n  },\n  minPriceData: undefined,\n  setMinPriceData: (value: RangePriceDataType | undefined) => {\n    set(() => ({\n      minPriceData: value\n    }))\n  },\n  maxPriceData: undefined,\n  setMaxPriceData: (value: RangePriceDataType | undefined) => {\n    set(() => ({\n      maxPriceData: value\n    }))\n  },\n  createBinInfos: undefined,\n  setCreateBinInfos: (value: BinLiquidityInfo | undefined) => {\n    set(() => ({\n      createBinInfos: value\n    }))\n  },\n  positionCount: 0,\n  setPositionCount: (value: number) => {\n    set(() => ({\n      positionCount: value\n    }))\n  },\n  numBins: 0,\n  setNumBins: (value: number | string) => {\n    set(() => ({\n      numBins: value\n    }))\n  },\n  resetCreateDlmmPoolState: () => {\n    set(() => ({\n      initPrice: '',\n      positionCount: 0,\n      numBins: 0,\n      binStep: undefined,\n      baseAmount: '',\n      quoteAmount: '',\n      baseTokenLock: false,\n      quoteTokenLock: false,\n      isAutoFill: true,\n      strategy: StrategyType.Spot,\n      fixAmountA: true,\n      minPriceData: undefined,\n      maxPriceData: undefined,\n      createBinInfos: undefined\n    }))\n  }\n})\n\nconst useCreateDlmmPoolStore = create(store)\nexport default useCreateDlmmPoolStore\n","import useCreateDlmmPoolStore from '@/store/pool/createDlmmPool'\nimport useCreatePoolStore from '@/store/pool/useCreatePool'\nimport { ChartBinItem, CurrentBinChartData, MaxBinRangeChartData } from '@/types/dlmm'\nimport { defaultBinsNum, formatBinList, formatPriceFromBin, getRelatedDisplayPrice } from '@/utils/dlmm'\nimport { d, formatPrice } from '@cetus/utils'\nimport { BinUtils } from '@cetusprotocol/dlmm-sdk'\nimport { useDeepCompareEffect } from 'ahooks'\nimport { useCallback, useEffect, useState } from 'react'\n\nexport default function useDlmmCreatChart(direct: boolean) {\n  const { activeId, createBinInfos, binStep, setMinPriceData, setMaxPriceData, minPriceData, maxPriceData } = useCreateDlmmPoolStore()\n  const { baseToken, quoteToken } = useCreatePoolStore()\n  const [currentLiquidityBins, setCurrentLiquidityBins] = useState<CurrentBinChartData>()\n  const [maxBinRangeData, setMaxBinRangeData] = useState<MaxBinRangeChartData>()\n\n  // const getMaxBinRangeData = useCallback(({activeBin, binStep, baseDecimal, quoteDecimal, direct = true, minBin, maxBin}: {activeBin: number; binStep: number; baseDecimal: number; quoteDecimal: number; direct: boolean; minBin: number; maxBin: number}) => {\n  //   let i = activeBin\n  //   const list: ChartBinItem[] = []\n\n  //   const minBinNum = minBin !== undefined && activeBin - minBin > 34 ? minBin : activeBin - 34\n  //   while (i >= minBinNum) {\n  //     const price = formatPriceFromBin(i, binStep, baseDecimal, quoteDecimal)\n  //     list.push({\n  //       amount_a: '0',\n  //       amount_b: '0',\n  //       bin_id: i,\n  //       liquidity: '100',\n  //       price: formatPrice(direct ? price : d(1).div(price).toString(), 6),\n  //       price_per_lamport: ''\n  //     })\n  //     i--\n  //   }\n\n  //   let j = activeBin\n  //   const maxBinNum = maxBin !== undefined && maxBin - activeBin > 34 ? maxBin : activeBin + 34\n  //   while (j < maxBinNum) {\n  //     j++\n  //     const price = formatPriceFromBin(j, binStep, baseDecimal, quoteDecimal)\n  //     list.push({\n  //       amount_a: '0',\n  //       amount_b: '0',\n  //       bin_id: j,\n  //       liquidity: '100',\n  //       price: formatPrice(direct ? price : d(1).div(price).toString(), 6),\n  //       price_per_lamport: ''\n  //     })\n  //   }\n\n  //   const sortList = list.sort((a: ChartBinItem, b: ChartBinItem) => {\n  //     const priceA = Number(a.price)\n  //     const priceB = Number(b.price)\n  //     return priceA - priceB\n  //   })\n  //   console.log('🚀 ~ getMaxBinRangeData ~ sortList:', sortList)\n\n  //   return {\n  //     list: sortList,\n  //     max: 100\n  //   }\n  // }, [])\n  const getMaxBinRangeData = useCallback(\n    ({\n      activeBin,\n      binStep,\n      baseDecimal,\n      quoteDecimal,\n      direct = true,\n      minBin,\n      maxBin\n    }: {\n      activeBin: number\n      binStep: number\n      baseDecimal: number\n      quoteDecimal: number\n      direct: boolean\n      minBin: number\n      maxBin: number\n    }) => {\n      const createBinItem = (binId: number): ChartBinItem => {\n        const price = formatPriceFromBin(binId, binStep, baseDecimal, quoteDecimal)\n        return {\n          amount_a: '0',\n          amount_b: '0',\n          bin_id: binId,\n          liquidity: '100',\n          price: formatPrice(direct ? price : d(1).div(price).toString(), 6),\n          price_per_lamport: ''\n        }\n      }\n\n      const generateBins = (start: number, end: number, step: number) => {\n        const bins: ChartBinItem[] = []\n        for (let i = start; step > 0 ? i <= end : i >= end; i += step) {\n          bins.push(createBinItem(i))\n        }\n        return bins\n      }\n\n      const half = d(defaultBinsNum).sub(2).div(2).toNumber()\n\n      const minBinNum = minBin !== undefined && activeBin - minBin > half ? minBin : activeBin - half\n      const maxBinNum = maxBin !== undefined && maxBin - activeBin > half ? maxBin : activeBin + half\n\n      const lowerBins = generateBins(activeBin, minBinNum, -1)\n      const upperBins = generateBins(activeBin + 1, maxBinNum, 1)\n\n      const sortList = [...lowerBins, ...upperBins].sort((a, b) => Number(a.price) - Number(b.price))\n\n      return {\n        list: sortList,\n        max: 100\n      }\n    },\n    []\n  )\n\n  useDeepCompareEffect(() => {\n    if (\n      createBinInfos &&\n      createBinInfos?.bins?.length > 0 &&\n      baseToken?.coin_type &&\n      quoteToken?.coin_type &&\n      activeId !== undefined &&\n      binStep?.binStep !== undefined\n    ) {\n      const list = formatBinList(createBinInfos.bins, baseToken, quoteToken, direct, activeId, binStep?.binStep)\n      setCurrentLiquidityBins(list)\n    }\n  }, [createBinInfos, baseToken?.coin_type, quoteToken?.coin_type, direct, activeId, binStep])\n\n  useEffect(() => {\n    if (\n      activeId !== undefined &&\n      binStep !== undefined &&\n      baseToken?.coin_type &&\n      quoteToken?.coin_type &&\n      minPriceData?.binId !== undefined &&\n      maxPriceData?.binId !== undefined\n    ) {\n      const list = getMaxBinRangeData({\n        activeBin: Number(activeId),\n        binStep: binStep.binStep,\n        baseDecimal: baseToken.decimals,\n        quoteDecimal: quoteToken.decimals,\n        direct,\n        minBin: minPriceData?.binId,\n        maxBin: maxPriceData?.binId\n      })\n\n      setMaxBinRangeData(list)\n    }\n  }, [binStep?.binStep, baseToken?.coin_type, quoteToken?.coin_type, activeId, direct, minPriceData?.binId, maxPriceData?.binId])\n\n  const handleRangeChange = (minBin: number, maxBin: number) => {\n    if (\n      binStep?.binStep !== undefined &&\n      baseToken?.decimals !== undefined &&\n      quoteToken?.decimals !== undefined &&\n      minBin !== undefined &&\n      maxBin !== undefined\n    ) {\n      const minPrice = BinUtils.getPriceFromBinId(minBin, binStep?.binStep, baseToken?.decimals, quoteToken?.decimals)\n      const [displayMinPrice, reverseMinPrice, displayReverseMinPrice] = getRelatedDisplayPrice(minPrice)\n      const maxPrice = BinUtils.getPriceFromBinId(maxBin, binStep?.binStep, baseToken?.decimals, quoteToken?.decimals)\n      const [displayMaxPrice, reverseMaxPrice, displayReverseMaxPrice] = getRelatedDisplayPrice(maxPrice)\n\n      const minPriceData = {\n        binId: minBin,\n        price: minPrice,\n        displayPrice: displayMinPrice,\n        reversePrice: reverseMinPrice,\n        displayReversePrice: displayReverseMinPrice,\n        type: 'lower'\n      }\n\n      const maxPriceData = {\n        binId: maxBin,\n        price: maxPrice,\n        displayPrice: displayMaxPrice,\n        reversePrice: reverseMaxPrice,\n        displayReversePrice: displayReverseMaxPrice,\n        type: 'upper'\n      }\n\n      setMinPriceData({ ...minPriceData, type: 'lower' as const })\n      setMaxPriceData({ ...maxPriceData, type: 'upper' as const })\n    }\n  }\n\n  return {\n    currentLiquidityBins,\n    activeId,\n    maxBinRangeData,\n    handleRangeChange\n  }\n}\n","import BinRangeSelectChart from '@/components/chart/dlmmChart/BinRangeSelectChart'\nimport CurrentLiquidityChart from '@/components/chart/dlmmChart/CurrentLiquidityChart'\nimport useDlmmCreatChart from '@/hooks/create-pool/useDlmmCreatChart'\nimport useCreateDlmmPoolStore from '@/store/pool/createDlmmPool'\nimport { VStack } from '@chakra-ui/react'\n\nconst width = 476\nexport default function CreateDlMMChart({ direct }: { direct: boolean }) {\n  const { currentLiquidityBins, activeId, maxBinRangeData, handleRangeChange } = useDlmmCreatChart(direct)\n  const { minPriceData, maxPriceData } = useCreateDlmmPoolStore()\n  // const handleRangeChange = (minBin: number, maxBin: number) => {\n  //   console.log('🚀 DLMMChart ~ handleRangeChange ~ minBin:', minBin)\n  //   console.log('🚀 DLMMChart ~ handleRangeChange ~ maxBin:', maxBin)\n  // }\n\n  return (\n    <VStack position=\"relative\" width={`${width}px`} w=\"100%\" h=\"200px\">\n      <CurrentLiquidityChart data={currentLiquidityBins} activeBin={Number(activeId)} width={width} height={162} direct={direct} />\n      {maxBinRangeData && maxBinRangeData?.list?.length > 0 && (\n        <BinRangeSelectChart\n          activeBin={Number(activeId)}\n          data={maxBinRangeData}\n          width={width}\n          height={0}\n          type=\"liquidity\"\n          noToolTip={true}\n          onChangeRange={handleRangeChange}\n          minBinId={minPriceData?.binId}\n          maxBinId={maxPriceData?.binId}\n          direct={direct}\n        />\n      )}\n    </VStack>\n  )\n}\n","import FunnelPrice from '@/components/common/FunnelPrice'\nimport TotalAmount from '@/components/common/TotalAmount'\nimport PriceInput from '@/components/liquidity/dlmm/ControlPriceRange/PriceInput'\nimport { Strategy } from '@/components/liquidity/dlmm/SelectStrategy'\nimport useCreateDlmmButtonStatus from '@/hooks/create-pool/useCreateDlmmButtonStatus'\nimport { useShowDlmmPriceWarn } from '@/hooks/create-pool/useCreatePoolHelper'\nimport useCreateDlmmPoolStore from '@/store/pool/createDlmmPool'\nimport { CetusTooltip, ErrorTips, SelectTab, TradeInputGroup } from '@cetus/design'\nimport { useGetTokenBalance } from '@cetus/hooks/src/useTokenBalance'\nimport useTokenPrice from '@cetus/hooks/src/useTokenPrice'\nimport { HTextLabelBox, Icon } from '@cetus/ui-kit'\nimport { isAvailableObject, textEllipses } from '@cetus/utils'\nimport { d } from '@cetusprotocol/common-sdk'\nimport { MAX_BIN_PER_POSITION, StrategyType } from '@cetusprotocol/dlmm-sdk'\nimport { Box, Button, Center, FormControl, FormLabel, Heading, HStack, Stack, Switch, Text, VStack } from '@chakra-ui/react'\nimport { useEffect, useMemo, useState } from 'react'\nimport CreateDlMMChart from './DlMMChart'\nimport type { DLMMDepositAmountProps } from './type'\n\nfunction DLMMDepositAmount({\n  initPrice,\n  currentStep,\n  editStep,\n  onCreate,\n  baseToken,\n  quoteToken,\n  baseAmount,\n  quoteAmount,\n  displayBaseToken,\n  displayQuoteToken,\n  onBaseAmountChange,\n  onQuoteAmountChange,\n  isReverse,\n  handlePriceAction,\n  minPriceData,\n  maxPriceData,\n  binStep,\n  fixAmountA,\n  setFixAmountA,\n  isAutoFill,\n  setIsAutoFill,\n  strategy,\n  setStrategy,\n  onPriceChange\n}: DLMMDepositAmountProps) {\n  const { balanceInfo: baseBalanceInfo } = useGetTokenBalance(baseToken)\n  const { balanceInfo: quoteBalanceInfo } = useGetTokenBalance(quoteToken)\n  const { fetchTokenPrices, getTokenAmountValue } = useTokenPrice()\n  const { numBins, positionCount, baseTokenLock, quoteTokenLock, activeId } = useCreateDlmmPoolStore()\n  const { btnText, btnDisabled } = useCreateDlmmButtonStatus(\n    baseAmount,\n    quoteAmount,\n    baseToken,\n    quoteToken,\n    baseBalanceInfo,\n    quoteBalanceInfo,\n    positionCount,\n    baseTokenLock,\n    quoteTokenLock\n  )\n  const { showInputPriceWarn, showPriceRangeWarn } = useShowDlmmPriceWarn(activeId, minPriceData?.binId, maxPriceData?.binId)\n  // 刷新市场价格\n  const refreshMarketPrice = () => {\n    const list = []\n    if (baseToken?.coin_type) {\n      list.push(baseToken?.coin_type)\n    }\n\n    if (quoteToken?.coin_type) {\n      list.push(quoteToken?.coin_type)\n    }\n\n    if (list.length > 0) {\n      fetchTokenPrices(list)\n    }\n  }\n\n  useEffect(() => {\n    refreshMarketPrice()\n  }, [baseToken?.coin_type, quoteToken?.coin_type])\n\n  const baseAmountValue = getTokenAmountValue(baseToken?.coin_type, baseAmount)\n  const quoteAmountValue = getTokenAmountValue(quoteToken?.coin_type, quoteAmount)\n\n  const totalAmount = useMemo(() => {\n    if (+baseAmountValue && +quoteAmountValue) {\n      return d(baseAmountValue || '0')\n        .plus(quoteAmountValue || '0')\n        .toString()\n    }\n    return undefined\n  }, [baseAmountValue, quoteAmountValue])\n\n  const tabList = useMemo(() => {\n    if (isAvailableObject(baseToken) && isAvailableObject(quoteToken)) {\n      return [baseToken, quoteToken].filter(Boolean).map(item => ({\n        label: item?.symbol,\n        isToken: true,\n        imgInfo: {\n          src: item?.logo_url,\n          w: '16px',\n          h: '16px',\n          borderRadius: '50%',\n          fallbackSrc: '/images/placeholder-token@2x.png'\n        }\n      }))\n    }\n    return []\n  }, [baseToken, quoteToken])\n\n  const [currentTab, setCurrentTab] = useState('')\n\n  useEffect(() => {\n    if (tabList?.length > 0) {\n      setCurrentTab(tabList?.[0]?.label + '')\n    }\n  }, [tabList])\n\n  const isDirect = useMemo(() => {\n    return currentTab === baseToken?.symbol\n  }, [currentTab, baseToken?.symbol])\n\n  const perText = useMemo(() => {\n    return isDirect\n      ? `${textEllipses(quoteToken?.symbol)} per ${textEllipses(baseToken?.symbol)}`\n      : `${textEllipses(baseToken?.symbol)} per ${textEllipses(quoteToken?.symbol)}`\n  }, [baseToken?.symbol, quoteToken?.symbol, isDirect])\n\n  return (\n    <>\n      {currentStep === 4 && editStep === 4 ? (\n        <VStack w=\"100%\" gap=\"40px\" bg=\"bg_fifth\" borderRadius=\"12px\" p={{ base: '16px 8px', lg: '32px' }} align=\"flex-start\">\n          <VStack w=\"100%\" gap=\"12px\">\n            <VStack w=\"100%\" align=\"flex-start\">\n              <HStack w=\"100%\" justify=\"space-between\">\n                <Heading fontSize=\"16px\" fontWeight=\"500\">\n                  Deposit amounts\n                </Heading>\n                <FormControl display=\"flex\" alignItems=\"center\" w=\"fit-content\">\n                  <FormLabel htmlFor=\"auto-fill\" mb=\"0\" fontSize=\"14px\" color=\"text_paragraph\">\n                    Auto Fill\n                  </FormLabel>\n                  <Switch id=\"auto-fill\" isChecked={isAutoFill} onChange={() => {}} isDisabled />\n                </FormControl>\n              </HStack>\n              <Text fontSize=\"12px\">Please enter the amount you want to deposit into the pool</Text>\n            </VStack>\n\n            <TradeInputGroup\n              wrapStyle={{ mt: '4px' }}\n              from={{\n                wrapStyle: { h: '108px' },\n                balance: baseBalanceInfo?.balanceFormat || '',\n                value: baseAmount,\n                amountValue: baseAmountValue,\n                loading: false,\n                onChange: value => {\n                  setFixAmountA(true)\n                  onBaseAmountChange(value)\n                },\n                selectable: false,\n                placeholder: '0.0',\n                token: baseToken,\n                lock: {\n                  isLock: !baseTokenLock && quoteTokenLock,\n                  text: 'The current price is outside your specified price range. Single-asset deposit only.'\n                }\n              }}\n              to={{\n                wrapStyle: { h: '108px' },\n                balance: quoteBalanceInfo?.balanceFormat || '',\n                value: quoteAmount,\n                amountValue: quoteAmountValue,\n                loading: false,\n                onChange: value => {\n                  setFixAmountA(false)\n                  onQuoteAmountChange(value)\n                },\n                selectable: false,\n                placeholder: '0.0',\n                token: quoteToken,\n                lock: {\n                  isLock: baseTokenLock && !quoteTokenLock,\n                  text: 'The current price is outside your specified price range. Single-asset deposit only.'\n                }\n              }}\n              lock={{\n                isLock: baseTokenLock && quoteTokenLock,\n                style: { h: '224px' }\n              }}\n            />\n          </VStack>\n\n          <VStack w=\"100%\" align=\"flex-start\" gap=\"12px\">\n            <VStack w=\"100%\" align=\"flex-start\">\n              <Heading fontSize=\"16px\" fontWeight=\"500\">\n                Select Strategy\n              </Heading>\n\n              <Text fontSize=\"12px\">Choose the liquidity distribution strategy you want</Text>\n            </VStack>\n\n            <HStack w=\"100%\" justify=\"space-between\">\n              <Strategy type={StrategyType.Spot} isActive={strategy === StrategyType.Spot} onClick={() => setStrategy(StrategyType.Spot)} size=\"l\" />\n              <Strategy\n                type={StrategyType.Curve}\n                isActive={strategy === StrategyType.Curve}\n                onClick={() => setStrategy(StrategyType.Curve)}\n                size=\"l\"\n              />\n              <Strategy\n                type={StrategyType.BidAsk}\n                isActive={strategy === StrategyType.BidAsk}\n                onClick={() => setStrategy(StrategyType.BidAsk)}\n                size=\"l\"\n              />\n            </HStack>\n          </VStack>\n          <VStack w=\"100%\" gap=\"12px\">\n            <VStack w=\"100%\" align=\"flex-start\" gap=\"12px\">\n              <HStack w=\"100%\" justify=\"space-between\" align=\"flex-start\">\n                <VStack align=\"flex-start\">\n                  <Heading fontSize=\"16px\" fontWeight=\"500\">\n                    Set Price Range\n                  </Heading>\n                  <Text fontSize=\"12px\">Set the price range you want to provide liquidity</Text>\n                </VStack>\n\n                <SelectTab<any, any>\n                  type=\"outlineTab\"\n                  tabList={tabList}\n                  currentTab={currentTab}\n                  handleChangeTab={tab => {\n                    if (tab.label !== currentTab) {\n                      setCurrentTab(tab.label)\n                    }\n                  }}\n                  wrapStyle={{\n                    w: { base: '100%', lg: 'auto' },\n                    h: '32px',\n                    p: '3px',\n                    border: '1px solid',\n                    borderColor: 'border',\n                    borderRadius: '8px',\n                    gap: '4px'\n                  }}\n                  itemStyle={{\n                    flex: 1,\n                    h: '24px',\n                    p: '4px 12px',\n                    borderRadius: '4px',\n                    gap: '4px'\n                  }}\n                />\n              </HStack>\n              <HStack w=\"100%\" justify=\"space-between\">\n                <HStack gap=\"12px\">\n                  <Legend symbol={baseToken!.symbol} color=\"dlmm_blue\" />\n                  <Legend symbol={quoteToken!.symbol} color=\"dlmm_green\" />\n                </HStack>\n                <FunnelPrice label=\"Initial Price\" />\n              </HStack>\n\n              <CreateDlMMChart direct={isDirect} />\n\n              <HStack w=\"100%\" justifyContent=\"space-between\" bg=\"num_bins_bg\" borderRadius=\"12px\" p=\"12px 8px\">\n                <HStack left=\"12px\" top=\"17px\">\n                  <HStack gap=\"4px\">\n                    <Text>Num Bins</Text>\n                    <CetusTooltip tooltip=\"Total bins in this position or actions.\">\n                      <Center cursor=\"pointer\">\n                        <Icon xlinkHref=\"#icon-icon_tips\" svgW=\"20px\" svgH=\"20px\" />\n                      </Center>\n                    </CetusTooltip>\n                  </HStack>\n                </HStack>\n                <Text>{numBins}</Text>\n              </HStack>\n              <Stack mt=\"4px\" position=\"relative\" flexDir={{ base: 'column', lg: 'row' }} w=\"100%\" gap={{ base: '8px', lg: '16px' }}>\n                {/* opacity为0时修复出现input高亮后点击btn按钮 出现lock后 input高亮没消失的问题 */}\n                <Box opacity={1} w={{ base: '100%', lg: '50%' }}>\n                  <PriceInput\n                    title=\"Min Price\"\n                    perText={perText}\n                    maxPrice={initPrice}\n                    data={isDirect ? minPriceData : maxPriceData}\n                    direct={isDirect}\n                    loading={false}\n                    onPriceChange={onPriceChange}\n                    handleAddPrice={data => handlePriceAction?.('Add', data, isDirect)}\n                    handleSubPrice={data => handlePriceAction?.('Sub', data, isDirect)}\n                  />\n                </Box>\n                <Box opacity={1} w={{ base: '100%', lg: '50%' }}>\n                  <PriceInput\n                    title=\"Max Price\"\n                    perText={perText}\n                    minPrice={initPrice}\n                    data={isDirect ? maxPriceData : minPriceData}\n                    direct={isDirect}\n                    loading={false}\n                    onPriceChange={onPriceChange}\n                    handleAddPrice={data => handlePriceAction?.('Add', data, !isDirect)}\n                    handleSubPrice={data => handlePriceAction?.('Sub', data, !isDirect)}\n                  />\n                </Box>\n              </Stack>\n\n              {isAvailableObject(maxPriceData) && isAvailableObject(minPriceData) && d(maxPriceData?.price).lt(minPriceData?.price) && (\n                <ErrorTips\n                  isShowIcon={false}\n                  tipsFontSize=\"12px\"\n                  justifyContent=\"center\"\n                  tips=\"The Max price should be higher than or equal to the Min price.\"\n                  p=\"0 16px\"\n                  h=\"28px\"\n                  borderRadius=\"8px\"\n                />\n              )}\n              {showInputPriceWarn && !showPriceRangeWarn && (\n                <ErrorTips\n                  p=\"8px 16px\"\n                  w=\"100%\"\n                  isShowIcon={false}\n                  type=\"warning\"\n                  borderRadius=\"8px\"\n                  tipsFontSize=\"12px\"\n                  tipsLineHeight=\"16px\"\n                  tips=\"To create a new pool, the initial price you set must be within your price range.\"\n                />\n              )}\n              {positionCount && positionCount > 1 && (\n                <ErrorTips\n                  p=\"8px 16px\"\n                  w=\"100%\"\n                  isShowIcon={false}\n                  type=\"warning\"\n                  borderRadius=\"8px\"\n                  tipsFontSize=\"12px\"\n                  tipsLineHeight=\"16px\"\n                  tips={`Pool creation allows adding liquidity in only 1 position (max ${MAX_BIN_PER_POSITION - 1} bins).`}\n                />\n              )}\n            </VStack>\n\n            <Button w=\"100%\" onClick={onCreate} h=\"48px\" fontSize=\"16px\" borderRadius=\"12px\" isDisabled={btnDisabled}>\n              {btnText}\n            </Button>\n            {positionCount > 1 && (\n              <HTextLabelBox\n                isLoading={false}\n                label={\n                  <HStack gap=\"4px\">\n                    <Text>Position</Text>\n                    <CetusTooltip\n                      tooltip={\n                        <Text lineHeight=\"20px\" fontSize=\"12px\">\n                          Each position covers up to {MAX_BIN_PER_POSITION - 1} bins on Sui, multiple positions are needed to cover a larger range.\n                        </Text>\n                      }\n                    >\n                      <Icon xlinkHref=\"#icon-icon_tips\" />\n                    </CetusTooltip>\n                  </HStack>\n                }\n                value={positionCount}\n                labelStyle={{\n                  fontSize: '14px'\n                }}\n                valueStyle={{\n                  fontSize: '14px'\n                }}\n                skeletonStyle={{\n                  valueW: '128px'\n                }}\n              />\n            )}\n\n            <TotalAmount totalAmount={totalAmount} />\n          </VStack>\n        </VStack>\n      ) : null}\n    </>\n  )\n}\n\nexport const Legend = ({ symbol, color }: { symbol: string; color: string }) => {\n  return (\n    <HStack>\n      <Box w=\"8px\" h=\"8px\" borderRadius=\"2px\" bg={color} />\n      <Text fontSize=\"12px\">{symbol}</Text>\n    </HStack>\n  )\n}\n\nexport default DLMMDepositAmount\n","import useDlmmLiquidityStore from '@/store/dlmm'\nimport useAddDlmmLiquidityStore from '@/store/dlmm/addDlmmLiquidity'\nimport useTokenPrice from '@cetus/hooks/src/useTokenPrice'\nimport { useSdk } from '@cetus/sdk-factory'\nimport { Token } from '@cetus/types'\nimport { bnToAmount, d } from '@cetus/utils'\nimport { StrategyType } from '@cetusprotocol/dlmm-sdk'\nimport useCreatePriceBin from './useCreatePriceBin'\n\ntype AutoPreAddType = {\n  amount: string\n  tokenA: Token\n  tokenB: Token\n  activeId: number\n  currentBinStep: number\n  lowerBinId: number\n  upperBinId: number\n  strategy: StrategyType\n  isReverse: boolean\n  fixAmountA: boolean\n  pool?: any\n  uuid: string\n}\n\ntype NotAutoPreAddType = {\n  coinAmountA: string\n  coinAmountB: string\n  activeId: number\n  currentBinStep: number\n  lowerBinId: number\n  upperBinId: number\n  strategyType: StrategyType\n  tokenA: Token\n  tokenB: Token\n  isReverse: boolean\n  pool?: any\n  uuid: string\n}\n\nfunction useDlmmPreCalc() {\n  const { getBinInfosByAutoFill, getBinInfosByBothAmount } = useCreatePriceBin()\n  const { getTokenAmountValue } = useTokenPrice()\n  const dlmmSdk = useSdk('dlmm')\n  const { setPreCalcParams } = useAddDlmmLiquidityStore()\n  const { activeBin } = useDlmmLiquidityStore()\n  const handleAutoFillPreAdd = async ({\n    amount,\n    tokenA,\n    tokenB,\n    currentBinStep,\n    strategy,\n    isReverse,\n    fixAmountA,\n    lowerBinId,\n    upperBinId,\n    activeId,\n    pool,\n    uuid\n  }: AutoPreAddType) => {\n    const decimalsA = tokenA.decimals\n    const decimalsB = tokenB.decimals\n    let amount_in_active_bin\n\n    if (pool) {\n      amount_in_active_bin =\n        activeBin ||\n        (await dlmmSdk?.Position?.getActiveBinIfInRange(pool?.bin_manager.bin_manager_handle, lowerBinId, upperBinId, activeId, currentBinStep, true))\n    }\n\n    const params = {\n      input_amount: amount,\n      bin_step: currentBinStep,\n      strategy_type: strategy,\n      lower_bin_id: lowerBinId,\n      upper_bin_id: upperBinId,\n      fix_amount_a: fixAmountA,\n      active_id: activeId,\n      amount_in_active_bin,\n      pool_id: pool?.id\n    }\n\n    const binInfos = await getBinInfosByAutoFill(params)\n    setPreCalcParams({\n      autoFill: params\n    })\n\n    if (binInfos) {\n      const { bins, amount_a, amount_b } = binInfos\n      console.log(tokenA, tokenB, 'tokenA, tokenB')\n      const coinAmountA = bnToAmount(amount_a.toString(), decimalsA)\n      const coinAmountB = bnToAmount(amount_b.toString(), decimalsB)\n      const _AmountAValue = getTokenAmountValue(tokenA?.coin_type, coinAmountA)\n      const _AmountBValue = getTokenAmountValue(tokenB?.coin_type, coinAmountB)\n      const _totalAmountValue = d(_AmountAValue).plus(_AmountBValue).toString()\n      return {\n        uuid,\n        coinAmountAOrigin: amount_a.toString(),\n        coinAmountBOrigin: amount_b.toString(),\n        displayCoinAmountA: !isReverse ? bnToAmount(amount_a.toString(), decimalsA) : bnToAmount(amount_b.toString(), decimalsB),\n        displayCoinAmountB: !isReverse ? bnToAmount(amount_b.toString(), decimalsB) : bnToAmount(amount_a.toString(), decimalsA),\n        coinAmountA,\n        coinAmountB,\n        totalAmount: _totalAmountValue,\n        binInfos\n      }\n    }\n  }\n\n  const handleNotAutoFillPreAdd = async ({\n    coinAmountA,\n    coinAmountB,\n    currentBinStep,\n    tokenA,\n    tokenB,\n    lowerBinId,\n    upperBinId,\n    strategyType,\n    activeId,\n    isReverse,\n    pool,\n    uuid\n  }: NotAutoPreAddType) => {\n    const decimalsA = tokenA?.decimals\n    const decimalsB = tokenB?.decimals\n    let amount_in_active_bin\n    if (pool) {\n      amount_in_active_bin =\n        activeBin ||\n        (await dlmmSdk?.Position?.getActiveBinIfInRange(pool?.bin_manager.bin_manager_handle, lowerBinId, upperBinId, activeId, currentBinStep, true))\n    }\n\n    const params = {\n      amount_a: coinAmountA,\n      amount_b: coinAmountB,\n      bin_step: currentBinStep,\n      active_id: activeId,\n      strategy_type: strategyType,\n      lower_bin_id: lowerBinId,\n      upper_bin_id: upperBinId,\n      amount_in_active_bin,\n      pool_id: pool?.id\n    }\n\n    const binInfos = await getBinInfosByBothAmount(params)\n\n    setPreCalcParams({\n      notAutoFill: params\n    })\n\n    if (binInfos) {\n      const { bins, amount_a, amount_b } = binInfos\n      const _AmountAValue = getTokenAmountValue(tokenA?.coin_type, bnToAmount(amount_a.toString(), decimalsA))\n      const _AmountBValue = getTokenAmountValue(tokenB?.coin_type, bnToAmount(amount_b.toString(), decimalsB))\n      const _totalAmountValue = d(_AmountAValue).plus(_AmountBValue).toString()\n      return {\n        uuid,\n        coinAmountAOrigin: amount_a.toString(),\n        coinAmountBOrigin: amount_b.toString(),\n        displayCoinAmountA: !isReverse ? bnToAmount(amount_a.toString(), decimalsA) : bnToAmount(amount_b.toString(), decimalsB),\n        displayCoinAmountB: !isReverse ? bnToAmount(amount_b.toString(), decimalsB) : bnToAmount(amount_a.toString(), decimalsA),\n        coinAmountA: bnToAmount(amount_a.toString(), decimalsA),\n        coinAmountB: bnToAmount(amount_b.toString(), decimalsB),\n        totalAmount: _totalAmountValue,\n        binInfos\n      }\n    }\n  }\n\n  return { handleAutoFillPreAdd, handleNotAutoFillPreAdd }\n}\n\nexport default useDlmmPreCalc\n"],"names":["useCreateDlmmButtonStatus","baseAmount","quoteAmount","baseToken","quoteToken","baseBalanceInfo","quoteBalanceInfo","positionCount","baseTokenLock","quoteTokenLock","currentAccount","useAccountStore","submitBtnInfo","useMemo","btnInfo","d","textEllipses","store","set","get","value","StrategyType","useCreateDlmmPoolStore","create","useDlmmCreatChart","direct","activeId","createBinInfos","binStep","setMinPriceData","setMaxPriceData","minPriceData","maxPriceData","useCreatePoolStore","currentLiquidityBins","setCurrentLiquidityBins","useState","maxBinRangeData","setMaxBinRangeData","getMaxBinRangeData","useCallback","activeBin","baseDecimal","quoteDecimal","minBin","maxBin","createBinItem","binId","price","formatPriceFromBin","formatPrice","generateBins","start","end","step","bins","i","half","defaultBinsNum","minBinNum","maxBinNum","lowerBins","upperBins","a","b","useDeepCompareEffect","_a","list","formatBinList","useEffect","minPrice","BinUtils","displayMinPrice","reverseMinPrice","displayReverseMinPrice","getRelatedDisplayPrice","maxPrice","displayMaxPrice","reverseMaxPrice","displayReverseMaxPrice","width","CreateDlMMChart","handleRangeChange","jsxs","VStack","jsx","CurrentLiquidityChart","BinRangeSelectChart","DLMMDepositAmount","initPrice","currentStep","editStep","onCreate","displayBaseToken","displayQuoteToken","onBaseAmountChange","onQuoteAmountChange","isReverse","handlePriceAction","fixAmountA","setFixAmountA","isAutoFill","setIsAutoFill","strategy","setStrategy","onPriceChange","useGetTokenBalance","fetchTokenPrices","getTokenAmountValue","useTokenPrice","numBins","btnText","btnDisabled","showInputPriceWarn","showPriceRangeWarn","useShowDlmmPriceWarn","refreshMarketPrice","baseAmountValue","quoteAmountValue","totalAmount","tabList","isAvailableObject","item","currentTab","setCurrentTab","isDirect","perText","Fragment","HStack","Heading","FormControl","FormLabel","Switch","Text","TradeInputGroup","Strategy","SelectTab","tab","Legend","FunnelPrice","CetusTooltip","Center","Icon","Stack","Box","PriceInput","data","ErrorTips","MAX_BIN_PER_POSITION","Button","HTextLabelBox","TotalAmount","symbol","color","useDlmmPreCalc","getBinInfosByAutoFill","getBinInfosByBothAmount","useCreatePriceBin","dlmmSdk","useSdk","setPreCalcParams","useAddDlmmLiquidityStore","useDlmmLiquidityStore","amount","tokenA","tokenB","currentBinStep","lowerBinId","upperBinId","pool","uuid","decimalsA","decimalsB","amount_in_active_bin","params","binInfos","amount_a","amount_b","coinAmountA","bnToAmount","coinAmountB","_AmountAValue","_AmountBValue","_totalAmountValue","strategyType"],"mappings":"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"}