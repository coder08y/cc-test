{"version":3,"file":"useSwap-Dd8XQ9_C.js","sources":["../../src/hooks/common/useCheckTokenScamsAlert.ts","../../src/hooks/swap/useFindRfqRouting.ts","../../src/hooks/swap/useSwap.ts"],"sourcesContent":["import { useFetch } from '@cetus/hooks'\nimport { Token } from '@cetus/types'\nimport { useDeepCompareEffect } from 'ahooks'\nimport { useState } from 'react'\n\n/**\n * token È£éÈô©ÊèêÁ§∫Ê£ÄÊü•\n * @returns\n */\nexport default function useCheckTokenScamsAlert(coinList: Token[]) {\n  const { fetchByApi } = useFetch()\n  const [scamsCoinList, setScamsCoinList] = useState<Token[]>([])\n\n  const checkIsScamsCoin = async (coinList: Token[]) => {\n    const filterCoinList = coinList.filter(coin => !(coin.is_verified === undefined ? coin.is_trusted : coin.is_verified))\n\n    try {\n      const coinTypes = filterCoinList.map(coin => coin.coin_type).join(',')\n      const { coins } = await fetchByApi(`/router_v3/honey_pot_check?coins=${coinTypes}`, 'GET')\n      console.log('üöÄüöÄüöÄ ~ useCheckTokenScamsAlert.ts:23 ~ checkIsScamsCoin ~ coins:', coins)\n      if (coins && coins.length > 0) {\n        const scamsCoinList = coins.filter(coin => coin.is_honey_pot_scam)\n        return scamsCoinList\n      }\n\n      return []\n    } catch (error) {\n      console.log('üöÄ ~ file: useCheckTokenScamsAlert.ts:19 ~ checkTokenScams ~ error:', error)\n    }\n\n    return []\n  }\n\n  useDeepCompareEffect(() => {\n    setScamsCoinList([])\n    if (coinList.length > 0) {\n      checkIsScamsCoin(coinList).then(res => {\n        setScamsCoinList(res)\n      })\n    }\n  }, [coinList])\n\n  return {\n    scamsCoinList\n  }\n}\n","import useSwapConfigStore from '@/store/swap/swapConfig'\nimport { RfqConfigs, SwapRfqData } from '@/types/swap'\nimport { useGetTokenBalance } from '@cetus/hooks/src/useTokenBalance'\nimport useTokenPrice from '@cetus/hooks/src/useTokenPrice'\nimport { useAccountStore } from '@cetus/stores'\nimport { Token } from '@cetus/types'\nimport envConfigs from '@cetus/types/src/config/envConfigs'\nimport { d, fetchGet, fromDecimalsAmountFix } from '@cetus/utils'\nimport { fixCoinType } from '@cetusprotocol/common-sdk'\nimport { normalizeSuiAddress } from '@mysten/sui/utils'\nimport { useCallback, useMemo } from 'react'\nimport { useChainTime } from '../common/useChainTime'\n\nexport function useFindRfqRouting() {\n  const { currentAccount } = useAccountStore()\n  const { isOpenRfqSwitch, rfqConfigs, setRfqConfigs } = useSwapConfigStore()\n  const { getTokenAmountValue } = useTokenPrice()\n  const { getBalanceInfoFromCache } = useGetTokenBalance()\n  const { getCountDown } = useChainTime()\n  const rfq_version: string = 'v1'\n  const rfqPath = useMemo(() => {\n    if (rfq_version === 'v2') {\n      return 'rfq_v2'\n    }\n    return 'rfq'\n  }, [rfq_version])\n  /**\n   * Ëé∑ÂèñrfqÊä•‰ª∑\n   * @param options\n   */\n  const fetchRfqQuote = async (options: { fromToken: Token; toToken: Token; amount: string; uuid: string }): Promise<SwapRfqData | undefined> => {\n    const { fromToken, toToken, amount, uuid } = options\n\n    try {\n      const res = await fetchGet(`${envConfigs.rfq_api}/${rfqPath}/quote`, {\n        from: fixCoinType(fromToken.coin_type, false),\n        target: fixCoinType(toToken.coin_type, false),\n        amount_in: amount,\n        sender: currentAccount?.address || normalizeSuiAddress('0x0')\n      })\n      console.log('üöÄ ~ fetchRfqQuote ~ res:', res)\n      const fromAmountUi = fromDecimalsAmountFix(res.amount_in.toString(), fromToken.decimals).toString()\n      const toAmountUi = fromDecimalsAmountFix(res.amount_out.toString(), toToken.decimals).toString()\n      const swapRfqData: SwapRfqData = {\n        rfqQuote: res,\n        uuid,\n        fromAmountUi,\n        toAmountUi,\n        price: d(toAmountUi).div(fromAmountUi).toString()\n      }\n      swapRfqData.rfqQuote.total_countdown = await getCountDown(res.expired_at)\n      console.log('üöÄ ~ fetchRfqQuote ~ swapRfqData:', swapRfqData)\n      return swapRfqData\n    } catch (error) {\n      console.log('üöÄ ~ fetchRfqQuote ~ error:', error)\n      return undefined\n    }\n  }\n\n  /**\n   * Ëé∑Âèñrfq‰∫§Êòì\n   * @param id\n   */\n  const fetchRfqTransactions = async (id: string): Promise<string> => {\n    try {\n      const res = await fetchGet(`${envConfigs.rfq_api}/${rfqPath}/confirm`, {\n        id\n      })\n      return res.transactions\n    } catch (error) {\n      console.log('üöÄ ~ handleRfqQuote ~ error:', error)\n      throw new Error('Failed to fetch rfq transactions')\n    }\n  }\n\n  /**\n   * Ëé∑ÂèñrfqÈÖçÁΩÆ\n   */\n  const fetchRfqConfigs = async (): Promise<RfqConfigs | undefined> => {\n    try {\n      const res = await fetchGet(`${envConfigs.rfq_api}/${rfqPath}/status`)\n      if (res) {\n        setRfqConfigs(res)\n      }\n      return res\n    } catch (error) {\n      console.log('üöÄ ~ fetchRfqConfigs ~ error:', error)\n      return undefined\n    }\n  }\n\n  /**\n   * Ê†°È™årfqÊòØÂê¶ÂèØÁî®\n   */\n  const verifyRfqAvailable = useCallback(\n    (fromToken: Token, toToken: Token, amount: string) => {\n      // 1. Ê£ÄÊü•Èí±ÂåÖËøûÊé•\n      if (!currentAccount?.address) {\n        return false\n      }\n\n      // 2. Ê£ÄÊü•RFQÈÖçÁΩÆÂíåÂºÄÂÖ≥\n      if (!rfqConfigs?.enable || !isOpenRfqSwitch) {\n        return false\n      }\n\n      // 3. Ê£ÄÊü•‰∫§ÊòìÈáëÈ¢ùÊòØÂê¶Âú®ÊúâÊïàËåÉÂõ¥ÂÜÖ\n      const amountValue = getTokenAmountValue(fromToken.coin_type, amount)\n      if (!d(amountValue).gte(rfqConfigs.quote_limit.min) || !d(amountValue).lte(rfqConfigs.quote_limit.max)) {\n        return false\n      }\n\n      // 4. Ê£ÄÊü•‰ΩôÈ¢ùÊòØÂê¶Ë∂≥Â§ü\n      const fromBalanceInfo = getBalanceInfoFromCache(fromToken)\n      if (!fromBalanceInfo?.balanceFormat || d(fromBalanceInfo.balanceFormat).lt(amount)) {\n        return false\n      }\n\n      // 5. Ê£ÄÊü•‰∫§ÊòìÂØπÊòØÂê¶Âú®ÁôΩÂêçÂçïÂÜÖ\n      return (\n        rfqConfigs.allow_paths?.some(\n          path =>\n            fixCoinType(fromToken.coin_type, false) === fixCoinType(path.from, false) &&\n            fixCoinType(toToken.coin_type, false) === fixCoinType(path.target, false)\n        ) ?? false\n      )\n    },\n    [rfqConfigs, isOpenRfqSwitch, currentAccount?.address, getTokenAmountValue, getBalanceInfoFromCache]\n  )\n\n  return {\n    fetchRfqQuote,\n    fetchRfqTransactions,\n    fetchRfqConfigs,\n    verifyRfqAvailable\n  }\n}\n","import { AggregatorDexMap } from '@/config/aggregator'\nimport useTransaction from '@/hooks/common/useTransaction'\nimport useGlobalStore from '@/store/common/global'\nimport useProStore from '@/store/pro'\nimport { SwapConfigState } from '@/store/swap/swap'\nimport useSwapConfigStore from '@/store/swap/swapConfig'\nimport { SwapRfqData, SwapRouterData } from '@/types/swap'\nimport { isDecimalWithZeros } from '@/utils'\nimport { useAccountBalance, useDebounceFunction } from '@cetus/hooks'\nimport { useGetToken } from '@cetus/hooks/src/useToken'\nimport useTokenPrice from '@cetus/hooks/src/useTokenPrice'\nimport { useAccountStore } from '@cetus/stores'\nimport useClmmSDKStore from '@cetus/stores/src/useClmmSDKStore'\nimport { BalanceChanges, CommonTypeInfo, ToastType, Token, TransactionStatusType } from '@cetus/types'\nimport envConfigs from '@cetus/types/src/config/envConfigs'\nimport { addComma, amountToBN, getBalanceChanges, isSuiObjectType, sleepTime } from '@cetus/utils'\nimport { dealWithFastRouterSwapParamsForMsafe } from '@cetusprotocol/aggregator-sdk'\nimport { fixCoinType } from '@cetusprotocol/common-sdk'\nimport { Transaction } from '@mysten/sui/transactions'\nimport { fromBase64 } from '@mysten/sui/utils'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { useGetTokenBalance } from '../../../../hooks/src/useTokenBalance'\nimport useCheckTokenScamsAlert from '../common/useCheckTokenScamsAlert'\nimport { useFindBestRouting } from './useFindBestRouting'\nimport { useFindRfqRouting } from './useFindRfqRouting'\nimport { useGetAmountLimit } from './useSwapHelper'\n\nexport const aggregatorPartner =\n  envConfigs.env === 'mainnet'\n    ? '0xeb863165a109f7791a3182be08aff1438ab2a429314fc135ae19d953afe1edd6'\n    : '0xd67361aaecc23e5fdfd77970a61153ca183dfcb2ae466e65a60e3859eeb8aad0'\nexport function useSwapHook(option: SwapConfigState, isSwapWidget: boolean, rfqCountdownFlagRef?: React.MutableRefObject<number | undefined>) {\n  const {\n    fromCoin,\n    toCoin,\n    setFromCoin,\n    setToCoin,\n    setToAmount,\n    fromAmount,\n    toAmount,\n    setFromAmount,\n    setFindRouterLoading,\n    setByAmountIn,\n    byAmountIn,\n    setRfqData,\n    setRouterData,\n    rfqData,\n    routerData,\n    userSelectQuoteMode\n  } = option\n  const { from, to } = useParams()\n  const { currentAccount } = useAccountStore()\n  const { fetchRfqQuote, verifyRfqAvailable } = useFindRfqRouting()\n  const { findBestRouters, checkProvidersKeys } = useFindBestRouting()\n  const { fetchRfqTransactions } = useFindRfqRouting()\n  const { fetchTokenPrices, getTokenAmountValue } = useTokenPrice()\n  const { slippage, mevProtect, maxCapForGas, transactionMode, customGasPrice } = useGlobalStore()\n  const { aggregatorSDK } = useClmmSDKStore()\n  const navigate = useNavigate()\n  const { fetchTokenInfo } = useGetToken()\n  const [isOpenConfirmModel, setIsOpenConfirmModel] = useState<boolean>(false)\n\n  const { signAndExecuteTransaction, transactionConfirmation, handleError } = useTransaction()\n  const { providersSwitchStates, isOpenRfqSwitch } = useSwapConfigStore()\n\n  const { fetchAccountBalance } = useAccountBalance()\n\n  const { setCurrentProTab, currentProTab, isProMode, setProTransactionList, coinBvPrice, coinBvPirceUnit, showTokenInfo } = useProStore()\n\n  // ‰ΩôÈ¢ù\n  const { balanceInfo: fromBalanceInfo } = useGetTokenBalance(fromCoin)\n  const { balanceInfo: toBalanceInfo } = useGetTokenBalance(toCoin)\n\n  // ‰ª∑ÂÄº\n  const fromAmountValue = getTokenAmountValue(fromCoin?.coin_type, fromAmount)\n  const toAmountValue = getTokenAmountValue(toCoin?.coin_type, toAmount)\n\n  const [uuid, setUuid] = useState<string>('')\n\n  const uuidRef = useRef<string>('')\n  const byAmountInRef = useRef<boolean>(true)\n  const fromAmountRef = useRef<string>('')\n  const toAmountRef = useRef<string>('')\n  const fromCoinRef = useRef<Token | undefined>()\n  const toCoinRef = useRef<Token | undefined>()\n  const providerRef = useRef<any>([])\n\n  useEffect(() => {\n    fromCoinRef.current = fromCoin\n  }, [fromCoin])\n\n  useEffect(() => {\n    toCoinRef.current = toCoin\n  }, [toCoin])\n\n  useEffect(() => {\n    uuidRef.current = uuid\n  }, [uuid])\n\n  useEffect(() => {\n    byAmountInRef.current = byAmountIn\n  }, [byAmountIn])\n\n  useEffect(() => {\n    fromAmountRef.current = fromAmount\n  }, [fromAmount])\n\n  useEffect(() => {\n    toAmountRef.current = toAmount\n  }, [toAmount])\n\n  const fromToString = useMemo(() => {\n    return String(to) + String(from)\n  }, [from, to])\n  // Initialization Swap Token\n  useEffect(() => {\n    if (!isSwapWidget) {\n      initiaTokenSelect()\n    }\n  }, [fromToString])\n\n  const initiaTokenSelect = useCallback(() => {\n    resetInputAmount()\n    if (!from && !to) {\n      setFromCoin(envConfigs.clmm_swap.from_coin)\n      setToCoin(envConfigs.clmm_swap.to_coin)\n      navigate(`/swap`)\n    } else {\n      //   if (navFromToken?.coin_type !== fromCoin?.coin_type) {\n      //     setFromCoin(navFromToken)\n      //   }\n      //   if (navToToken?.coin_type !== toCoin?.coin_type) {\n      //     setToCoin(navToToken)\n      //   }\n      if (from && isSuiObjectType(from)) {\n        fetchTokenInfo<string>(from)\n          .then((token: Token | undefined) => {\n            if (!token) {\n              navigate(`/swap/${fromCoin?.coin_type}/${toCoin?.coin_type}`)\n            } else {\n              if (token?.coin_type !== fromCoin?.coin_type) {\n                setFromCoin(token)\n              }\n            }\n          })\n          .catch(() => {\n            navigate(`/swap/${fromCoin?.coin_type}/${toCoin?.coin_type}`)\n          })\n      } else {\n        setFromCoin(undefined)\n      }\n      if (to && isSuiObjectType(to)) {\n        fetchTokenInfo<string>(to)\n          .then((token: Token | undefined) => {\n            if (!token) {\n              navigate(`/swap/${fromCoin?.coin_type}/${toCoin?.coin_type}`)\n            } else {\n              if (token?.coin_type !== toCoin?.coin_type) {\n                setToCoin(token)\n              }\n            }\n          })\n          .catch(() => {\n            navigate(`/swap/${fromCoin?.coin_type}/${toCoin?.coin_type}`)\n          })\n      } else {\n        setToCoin(undefined)\n      }\n    }\n  }, [from, to])\n\n  /**\n   * È¢ÑËÆ°ÁÆó\n   */\n  const findRouters = async (amount: string, by_amount_in: boolean, uuid: string, useRfq: boolean) => {\n    console.log('üöÄüöÄüöÄ ~ useSwap.ts:182 ~ findRouters ~ providersSwitchStates:', providersSwitchStates)\n    if (fromCoinRef.current && toCoinRef.current && +amount) {\n      const providersKeys = isSwapWidget\n        ? Object.entries(AggregatorDexMap).map(([key, _]) => key)\n        : Object.entries(providersSwitchStates)\n            .filter(([_, value]) => value === true)\n            .map(([key, _]) => key)\n\n      if (+fromAmountRef.current || +toAmountRef.current) {\n        setFindRouterLoading(true)\n        setRfqData(undefined)\n      }\n\n      // const formatAmount = toDecimalsAmount(amount, by_amount_in ? fromCoinRef.current.decimals : toCoinRef.current.decimals)\n      const formatAmount = amountToBN(amount, by_amount_in ? fromCoinRef.current.decimals : toCoinRef.current.decimals)\n\n      if (useRfq && !isSwapWidget && by_amount_in && verifyRfqAvailable(fromCoinRef.current, toCoinRef.current, amount)) {\n        // ÂºÇÊ≠•Â§ÑÁêÜrfqÊï∞ÊçÆ\n        fetchRfqQuote({ fromToken: fromCoinRef.current, toToken: toCoinRef.current, amount: formatAmount.toString(), uuid }).then(res => {\n          if (uuidRef.current === uuid) {\n            setRfqData(res)\n          }\n        })\n      }\n\n      const checkProvidersKeysRes = await checkProvidersKeys(providersKeys as string[])\n      console.log('üöÄüöÄüöÄ ~ useSwap.ts:203 ~ findRouters ~ providersKeys:', providersKeys)\n      console.log('üöÄüöÄüöÄ ~ useSwap.ts:203 ~ findRouters ~ checkProvidersKeysRes:', checkProvidersKeysRes)\n\n      const result = await findBestRouters({\n        fromToken: fromCoinRef.current,\n        toToken: toCoinRef.current,\n        amount: formatAmount.toString(),\n        providersKeys: checkProvidersKeysRes,\n        by_amount_in,\n        uuid\n      })\n\n      setFindRouterLoading(false)\n\n      if (uuidRef.current === uuid) {\n        providerRef.current = checkProvidersKeysRes\n        if (by_amount_in) {\n          if (+fromAmountRef.current) {\n            setToAmount(result?.toAmountUi || '')\n            setRouterData(result)\n          } else {\n            setToAmount('')\n          }\n        } else {\n          if (+toAmountRef.current) {\n            setFromAmount(result?.fromAmountUi || '')\n            setRouterData(result)\n          } else {\n            setFromAmount('')\n          }\n        }\n      }\n    } else {\n      resetInputAmount(!by_amount_in)\n    }\n  }\n\n  const debouncedFindRouters = useDebounceFunction(findRouters, 500)\n\n  /**\n   * ËæìÂÖ•Êï∞ÈáèÁõëÂê¨\n   * @param amount\n   */\n  const handleAmountChange = (amount: string, by_amount_in: boolean, resetInput: boolean = false) => {\n    if (rfqCountdownFlagRef) {\n      rfqCountdownFlagRef.current = undefined\n    }\n\n    setByAmountIn(by_amount_in)\n    if (by_amount_in) {\n      setFromAmount(amount)\n      if (resetInput) {\n        setToAmount('')\n      }\n    } else {\n      setToAmount(amount)\n      if (resetInput) {\n        setFromAmount('')\n      }\n    }\n\n    if (+amount && fromCoinRef.current && toCoinRef.current) {\n      const uuid = v4()\n      setUuid(uuid)\n      debouncedFindRouters(amount, by_amount_in, uuid, true)\n    } else {\n      setFindRouterLoading(false)\n      setRfqData(undefined)\n      setRouterData(undefined)\n      if (!amount && isDecimalWithZeros(amount)) {\n        resetInputAmount()\n      } else {\n        by_amount_in ? setToAmount('') : setFromAmount('')\n      }\n    }\n  }\n\n  /**\n   * ÈáçÊñ∞ËÆ°ÁÆóRouteData\n   */\n  const reCalculateRouteData = (refreshRfq = true) => {\n    if (rfqCountdownFlagRef) {\n      rfqCountdownFlagRef.current = undefined\n    }\n    const amount = byAmountInRef.current ? fromAmountRef.current : toAmountRef.current\n\n    console.log(\n      'üöÄ ~ file: useSwap.ts:273 ~ reCalculateRouteData ~ amount:',\n      amount,\n      byAmountInRef.current,\n      fromAmountRef.current,\n      toAmountRef.current\n    )\n\n    if (+amount && fromCoinRef.current && toCoinRef.current) {\n      const uuid = v4()\n      setUuid(uuid)\n      debouncedFindRouters(amount, byAmountInRef.current, uuid, refreshRfq)\n    } else {\n      if (isDecimalWithZeros(amount)) {\n        resetInputAmount()\n      }\n    }\n  }\n\n  // Ë∑ØÁî±Ê∫êÊîπÂèòÂêéÔºåÈáçÊñ∞ËÆ°ÁÆó\n  useEffect(() => {\n    reCalculateRouteData()\n  }, [JSON.stringify(providersSwitchStates) + isOpenRfqSwitch])\n\n  /**\n   * ÂàáÊç¢tokenÁõëÂê¨\n   * @param coin\n   * @param isFrom\n   */\n  const handleSelectToken = useCallback(\n    (coin?: Token, isFrom: boolean = true) => {\n      resetInputAmount()\n\n      // ToDo: widgetÂíåswapÈÄâÊã©token‰∏çÂ∫îËØ•ÂêåÊ≠•\n      if (!isSwapWidget) {\n        if (isFrom) {\n          if (coin && fixCoinType(coin?.coin_type || '') === fixCoinType(toCoin?.coin_type || '')) {\n            setCurrentProTab(currentProTab === 'Buy' ? 'Sell' : 'Buy')\n            navigate(`/swap/${coin?.coin_type}/${fromCoin?.coin_type}`)\n          } else {\n            navigate(`/swap/${coin?.coin_type}/${toCoin?.coin_type}`)\n          }\n        } else {\n          if (coin && fixCoinType(coin?.coin_type || '') === fixCoinType(fromCoin?.coin_type || '')) {\n            setCurrentProTab(currentProTab === 'Buy' ? 'Sell' : 'Buy')\n            navigate(`/swap/${toCoin?.coin_type}/${coin?.coin_type}`)\n          } else {\n            navigate(`/swap/${fromCoin?.coin_type}/${coin?.coin_type}`)\n          }\n        }\n      } else {\n        if (isFrom) {\n          if (coin && fixCoinType(coin?.coin_type || '') === fixCoinType(toCoin?.coin_type || '')) {\n            setToCoin(fromCoin)\n          }\n          setFromCoin(coin)\n        } else {\n          if (coin && fixCoinType(coin?.coin_type || '') === fixCoinType(fromCoin?.coin_type || '')) {\n            setFromCoin(toCoin)\n          }\n          setToCoin(coin)\n        }\n      }\n    },\n    [fromCoin?.coin_type, toCoin?.coin_type, currentProTab]\n  )\n\n  const { amountLimit } = useGetAmountLimit(slippage, routerData)\n\n  const resetInputAmount = (resetAmountFrom?: boolean) => {\n    if (resetAmountFrom === undefined) {\n      setFromAmount('')\n      setToAmount('')\n    } else {\n      if (resetAmountFrom) {\n        setFromAmount('')\n      } else {\n        setToAmount('')\n      }\n    }\n    setFindRouterLoading(false)\n    setRfqData(undefined)\n    setRouterData(undefined)\n  }\n\n  // ÁõëÂê¨token ÂàáÊç¢ Âà∑Êñ∞‰ª∑Ê†º\n  useEffect(() => {\n    refreshMarketPrice()\n  }, [fromCoin?.coin_type, toCoin?.coin_type])\n\n  // Âà∑Êñ∞Â∏ÇÂú∫‰ª∑Ê†º\n  const refreshMarketPrice = () => {\n    const list = []\n    if (fromCoin) {\n      list.push(fromCoin.coin_type)\n    }\n\n    if (toCoin) {\n      list.push(toCoin.coin_type)\n    }\n\n    if (list.length > 0) {\n      fetchTokenPrices(list)\n    }\n  }\n\n  const getSwapSecondaryData = () => {\n    if (userSelectQuoteMode === 'rfq') {\n      return rfqData!\n    }\n    return routerData!\n  }\n\n  /**\n   * ÊâßË°åswap\n   * @param data\n   */\n  const handleRouterSwap = async (data: SwapRouterData | SwapRfqData) => {\n    const isSelectedRfq = 'rfqQuote' in data\n    setIsOpenConfirmModel(false)\n    let toastType: ToastType\n    let txb: () => Promise<Transaction>\n    let fromAmountUi: string\n    let toAmountUi: string\n    let msafeParams: any\n\n    try {\n      fromAmountUi = data.fromAmountUi!\n      toAmountUi = data.toAmountUi!\n\n      // ÊûÑÈÄ†txb\n      if (isSelectedRfq) {\n        txb = async () => {\n          const transactions = await fetchRfqTransactions(data!.rfqQuote.id)\n          console.log('üöÄ ~ file: useSwap.ts:481 ~ handleRouterSwap ~ transactions:', transactions)\n          return Transaction.from(fromBase64(transactions))\n        }\n      } else {\n        const tx = new Transaction()\n\n        // const params: any = {\n        //   router: data!.routerData,\n        const sdkParams: any = {\n          router: data!.routerData!,\n          partner: aggregatorPartner,\n          txb: tx,\n          slippage: Number(slippage),\n          refreshAllCoins: true\n        }\n        console.log('üöÄ ~ handleRouterSwap ~ sdkParams:', sdkParams)\n\n        txb = async () => {\n          await aggregatorSDK!.fastRouterSwap(sdkParams)\n          return tx\n        }\n\n        console.log('useSwap üöÄ ~ txb= ~ txb:', await txb)\n\n        msafeParams = {\n          action: 'AggregatorSwap',\n          txbParams: {\n            ...sdkParams,\n            router: dealWithFastRouterSwapParamsForMsafe(sdkParams?.router)\n          }\n        }\n      }\n\n      // ÂÖ≥Èó≠ÂºπÁ™ó\n      setIsOpenConfirmModel(false)\n\n      let transactionData: any = {\n        currentCoin: showTokenInfo,\n        type: currentProTab\n      }\n\n      // ÊûÑÈÄ†toast\n      toastType = {\n        isSwapWidget,\n        actionType: 'swap',\n        getShowInfo: (status: TransactionStatusType, balanceChanges?: Record<string, BalanceChanges>) => {\n          const description = `Swapping ${addComma(fromAmountUi as string)} ${fromCoin?.symbol} for ${addComma(toAmountUi as string)} ${toCoin?.symbol}`\n          const info: CommonTypeInfo = {\n            modalDescriptionText: description,\n            toastTitleText: description\n          }\n          if (status === 'success') {\n            let payAmountF = fromAmountUi\n            let receiveAmountF = toAmountUi\n\n            if (balanceChanges) {\n              payAmountF = getBalanceChanges(balanceChanges, fromCoin) || fromAmountUi\n              receiveAmountF = getBalanceChanges(balanceChanges, toCoin) || toAmountUi\n            }\n            const description = `Swapped ${addComma(payAmountF as string)} ${fromCoin?.symbol} for ${addComma(receiveAmountF as string)} ${toCoin?.symbol}`\n\n            info.toastDescriptionContent = description\n            info.modalDescriptionText = description\n            info.toastTitleText = 'Swap Successful'\n\n            if (isProMode) {\n              transactionData = {\n                ...transactionData,\n                amount: currentProTab === 'Buy' ? receiveAmountF : payAmountF,\n                time: new Date().getTime(),\n                price: coinBvPrice?.price,\n                priceUnit: coinBvPirceUnit\n              }\n\n              setProTransactionList(transactionData)\n            }\n          }\n\n          if (status === 'rejected') {\n            info.toastTitleText = description.replace('Swapping', 'Swap')\n          }\n\n          return info\n        }\n      }\n\n      if (!isSwapWidget) {\n        transactionConfirmation(toastType)\n      }\n      console.log('üöÄ ~ handleRouterSwap ~ txb:', txb)\n      const res = await signAndExecuteTransaction(txb, toastType, {\n        useMev: mevProtect,\n        useFastMode: !isSelectedRfq && transactionMode === 'Fast Mode',\n        maxCapForGas,\n        customGasPrice,\n        msafeParams,\n        otherParams: {\n          routerData: option,\n          providerKey: providerRef.current,\n          from: fromCoinRef.current?.coin_type,\n          to: toCoinRef.current?.coin_type\n        }\n      })\n\n      console.log('üöÄ ~ file: useSwap.ts:272 ~ doSwapAction ~ res:', res)\n\n      if (res) {\n        // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü\n        resetInputAmount()\n        //Ëé∑Âèñ‰ΩôÈ¢ù\n        fetchAccountBalance()\n        return true\n      } else {\n        // Â¶Ç‰ΩïÂ§±Ë¥• Âà∑Êñ∞‰∏ÄÊ¨°Ë∑ØÁî±ËÆ°ÁÆó\n        reCalculateRouteData()\n        return false\n      }\n    } catch (error) {\n      console.log('üöÄ ~ handleRouterSwap ~ error text:', error)\n    }\n  }\n\n  // È£éÈô©token\n  const { scamsCoinList } = useCheckTokenScamsAlert(fromCoin && toCoin ? [fromCoin, toCoin] : [])\n\n  const scamsText = useMemo(() => {\n    if (scamsCoinList.length === 0) {\n      return undefined\n    }\n\n    // Ê£ÄÊü• fromCoin Âíå toCoin ÊòØÂê¶Âú®È£éÈô©ÂàóË°®‰∏≠\n    const isFromScamsCoin = fromCoin && scamsCoinList.some(coin => coin.coin_type === fromCoin.coin_type)\n    const isToScamsCoin = toCoin && scamsCoinList.some(coin => coin.coin_type === toCoin.coin_type)\n\n    if (isFromScamsCoin && isToScamsCoin && fromCoin?.symbol && toCoin?.symbol) {\n      return `${fromCoin.symbol} and ${toCoin.symbol} are`\n    }\n\n    if (isFromScamsCoin && fromCoin?.symbol) {\n      return `${fromCoin.symbol} token is `\n    }\n\n    if (isToScamsCoin && toCoin?.symbol) {\n      return `${toCoin.symbol} token is `\n    }\n\n    return undefined\n  }, [scamsCoinList, fromCoin, toCoin])\n\n  const onReverseClick = async (isOpenAggregatorMode: boolean, isClickToggle?: boolean) => {\n    if (isClickToggle) {\n      setCurrentProTab(currentProTab === 'Buy' ? 'Sell' : 'Buy', 'toggleBtn')\n    }\n    if (!isOpenAggregatorMode) {\n      if (byAmountIn) {\n        if (isSwapWidget) {\n          setFromCoin(toCoin)\n          setToCoin(fromCoin)\n        } else {\n          navigate(`/swap/${toCoin?.coin_type}/${fromCoin?.coin_type}`)\n        }\n\n        setFromAmount('')\n        setToAmount(fromAmount)\n        setByAmountIn(false)\n\n        await sleepTime(200)\n        reCalculateRouteData()\n      } else {\n        if (isSwapWidget) {\n          setFromCoin(toCoin)\n          setToCoin(fromCoin)\n        } else {\n          navigate(`/swap/${fromCoin?.coin_type}/${toCoin?.coin_type}`)\n        }\n\n        setFromAmount(toAmount)\n        setToAmount('')\n        setByAmountIn(true)\n\n        await sleepTime(200)\n        reCalculateRouteData()\n      }\n    } else {\n      if (isSwapWidget) {\n        setFromCoin(toCoin)\n        setToCoin(fromCoin)\n      } else {\n        setFromCoin(toCoin)\n        setToCoin(fromCoin)\n        navigate(`/swap/${toCoin?.coin_type}/${fromCoin?.coin_type}`)\n      }\n\n      setFromAmount(toAmount)\n      setToAmount('')\n      setByAmountIn(true)\n\n      await sleepTime(200)\n      reCalculateRouteData()\n    }\n  }\n\n  // ÈîÄÊØÅÊó∂Ê∏ÖÁ©∫ËæìÂÖ•\n  useEffect(() => {\n    return () => {\n      if (!isSwapWidget) {\n        setFromCoin(undefined)\n        setToCoin(undefined)\n      }\n      setFromAmount('')\n      setToAmount('')\n    }\n  }, [])\n\n  return {\n    handleSelectToken,\n    handleAmountChange,\n    fromAmount,\n    toAmount,\n    fromAmountValue,\n    toAmountValue,\n    amountLimit,\n    getSwapSecondaryData,\n    reCalculateRouteData,\n    fromBalanceInfo,\n    toBalanceInfo,\n    handleRouterSwap,\n    scamsText,\n    refreshMarketPrice,\n    isOpenConfirmModel,\n    setIsOpenConfirmModel,\n    resetInputAmount,\n    onReverseClick\n  }\n}\n"],"names":["useCheckTokenScamsAlert","coinList","fetchByApi","useFetch","scamsCoinList","setScamsCoinList","useState","checkIsScamsCoin","filterCoinList","coin","coinTypes","coins","error","useDeepCompareEffect","res","useFindRfqRouting","currentAccount","useAccountStore","isOpenRfqSwitch","rfqConfigs","setRfqConfigs","useSwapConfigStore","getTokenAmountValue","useTokenPrice","getBalanceInfoFromCache","useGetTokenBalance","getCountDown","useChainTime","rfqPath","useMemo","fetchRfqQuote","options","fromToken","toToken","amount","uuid","fetchGet","envConfigs","fixCoinType","normalizeSuiAddress","fromAmountUi","fromDecimalsAmountFix","toAmountUi","swapRfqData","d","fetchRfqTransactions","id","fetchRfqConfigs","verifyRfqAvailable","useCallback","amountValue","fromBalanceInfo","_a","path","aggregatorPartner","useSwapHook","option","isSwapWidget","rfqCountdownFlagRef","fromCoin","toCoin","setFromCoin","setToCoin","setToAmount","fromAmount","toAmount","setFromAmount","setFindRouterLoading","setByAmountIn","byAmountIn","setRfqData","setRouterData","rfqData","routerData","userSelectQuoteMode","from","to","useParams","findBestRouters","checkProvidersKeys","useFindBestRouting","fetchTokenPrices","slippage","mevProtect","maxCapForGas","transactionMode","customGasPrice","useGlobalStore","aggregatorSDK","useClmmSDKStore","navigate","useNavigate","fetchTokenInfo","useGetToken","isOpenConfirmModel","setIsOpenConfirmModel","signAndExecuteTransaction","transactionConfirmation","useTransaction","providersSwitchStates","fetchAccountBalance","useAccountBalance","setCurrentProTab","currentProTab","isProMode","setProTransactionList","coinBvPrice","coinBvPirceUnit","showTokenInfo","useProStore","toBalanceInfo","fromAmountValue","toAmountValue","setUuid","uuidRef","useRef","byAmountInRef","fromAmountRef","toAmountRef","fromCoinRef","toCoinRef","providerRef","useEffect","fromToString","initiaTokenSelect","resetInputAmount","isSuiObjectType","token","debouncedFindRouters","useDebounceFunction","by_amount_in","useRfq","providersKeys","AggregatorDexMap","key","_","value","formatAmount","amountToBN","checkProvidersKeysRes","result","handleAmountChange","resetInput","v4","isDecimalWithZeros","reCalculateRouteData","refreshRfq","handleSelectToken","isFrom","amountLimit","useGetAmountLimit","resetAmountFrom","refreshMarketPrice","list","getSwapSecondaryData","handleRouterSwap","data","isSelectedRfq","toastType","txb","msafeParams","transactions","Transaction","fromBase64","tx","sdkParams","dealWithFastRouterSwapParamsForMsafe","transactionData","status","balanceChanges","description","addComma","info","payAmountF","receiveAmountF","getBalanceChanges","_b","scamsText","isFromScamsCoin","isToScamsCoin","onReverseClick","isOpenAggregatorMode","isClickToggle","sleepTime"],"mappings":"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"}