{"version":3,"file":"RemoveBlock-BSsuAUPi.js","sources":["../../src/components/position/details/RemoveBlock.tsx"],"sourcesContent":["import ZapDeposite from '@/components/zap/ZapDeposite'\nimport ZapSubmiteInfo from '@/components/zap/ZapSubmiteInfo'\nimport usePosRemovePage from '@/hooks/position/usePosRemovePage'\nimport usePositionStore from '@/store/position'\nimport usePositionDetailStore from '@/store/position/detail'\nimport { Block, SelectTab, TradeInputGroup } from '@cetus/design'\nimport { Tab } from '@cetus/design/src/components/common/SelectTab'\nimport { d, formatNumberWithDown } from '@cetus/utils'\nimport {\n  Box,\n  Button,\n  FlexProps,\n  HStack,\n  Slider,\n  SliderFilledTrack,\n  SliderThumb,\n  SliderTrack,\n  StackProps,\n  Text,\n  TextProps,\n  VStack\n} from '@chakra-ui/react'\nimport { useEffect, useMemo } from 'react'\nimport FarmsBlock from '../clmm/details/FarmsBlock'\nimport TradeTitle from '../clmm/details/TradeTitle'\n\nexport default function RemoveBlock() {\n  const { currentPosBaseInfo, posPoolsRelatedData, posApiPoolData } = usePositionStore()\n  const { isFixedDisplayTokenA, slideValue, setSlideValue, curPosContractPoolInfo, useZapIn, currentPosPoolInfo } = usePositionDetailStore()\n  const {\n    tokenAmountA,\n    tokenAmountB,\n    tokenABalance,\n    tokenBBalance,\n    displayTokenA,\n    displayTokenB,\n    tokenAmountValueA,\n    tokenAmountValueB,\n    preRemoveLoading,\n    handleAmountChange,\n    changeSlideFun,\n    btnStatusText,\n    toRemove,\n    isRemoveLoading,\n    showDisplayTokenALock,\n    showDisplayTokenBLock,\n    resetInputAmount,\n    onlyAmountA,\n    onlyAmountB,\n    currentApiPoolInfo,\n    currentPoolSqrtPrice,\n    currentPosLiquidityData\n  } = usePosRemovePage()\n\n  useEffect(() => {\n    return () => {\n      resetInputAmount()\n    }\n  }, [])\n\n  const changeSlideValue = (value: string | number) => {\n    console.log('ðŸš€ ~ changeSlideValue ~ value:', value)\n    if (value == 'MAX' || value == 100) {\n      setSlideValue(100)\n\n      changeSlideFun(100)\n    } else {\n      setSlideValue(Number((value + '').split('%')[0]))\n      changeSlideFun(Number((value + '').split('%')[0]))\n    }\n  }\n  useEffect(() => {\n    return setSlideValue('--')\n  }, [])\n\n  const currentPosPoolsRelatedData = posPoolsRelatedData[currentPosBaseInfo?.posId]\n\n  return (\n    <VStack w=\"100%\" gap={{ base: '12px', lg: '16px' }}>\n      <VStack\n        w=\"100%\"\n        position=\"relative\"\n        gap={{ base: '12px', lg: '16px' }}\n        p={{ base: '0 8px 16px', lg: '0 16px 16px' }}\n        bg=\"card_bg\"\n        borderRadius=\"0px 0px 16px 16px\"\n      >\n        <Box w=\"100%\">\n          {currentApiPoolInfo?.haveZap && currentPosBaseInfo?.posType !== 'burn' && !showDisplayTokenALock && !showDisplayTokenBLock && (\n            <TradeTitle action=\"Withdraw\" resetInputAmount={resetInputAmount} />\n          )}\n          {useZapIn ? (\n            <ZapDeposite\n              action=\"Withdraw\"\n              apiPoolInfo={currentApiPoolInfo}\n              currentSqrtPrice={currentPoolSqrtPrice}\n              onlyAmountA={onlyAmountA}\n              onlyAmountB={onlyAmountB}\n              liquidity={currentPosBaseInfo?.liquidity}\n              lowerTick={currentPosBaseInfo?.lowerTick}\n              upperTick={currentPosBaseInfo?.upperTick}\n              slideValue={String(slideValue)}\n              currentPosLiquidityData={currentPosLiquidityData}\n              // changeSlideValue={changeSlideValue}\n            />\n          ) : (\n            <>\n              <TradeInputGroup\n                from={{\n                  wrapStyle: {\n                    h: '108px'\n                  },\n                  balance: tokenABalance || '',\n                  value: tokenAmountA,\n                  amountValue: !isFixedDisplayTokenA && preRemoveLoading ? '' : tokenAmountValueA,\n                  loading: !isFixedDisplayTokenA && preRemoveLoading,\n                  onChange: value => {\n                    handleAmountChange(value, true)\n                  },\n                  needRemainBalance: false,\n                  placeholder: '0.0',\n                  balanceLabel: 'Available',\n                  token: displayTokenA,\n                  half: false,\n                  lock: {\n                    isLock: currentPosBaseInfo && curPosContractPoolInfo && showDisplayTokenALock\n                  }\n                }}\n                to={{\n                  wrapStyle: {\n                    h: '108px'\n                  },\n                  balance: tokenBBalance || '',\n                  value: tokenAmountB,\n                  amountValue: isFixedDisplayTokenA && preRemoveLoading ? '' : tokenAmountValueB,\n                  loading: isFixedDisplayTokenA && preRemoveLoading,\n                  onChange: value => {\n                    handleAmountChange(value, false)\n                  },\n                  needRemainBalance: false,\n                  placeholder: '0.0',\n                  balanceLabel: 'Available',\n                  token: displayTokenB,\n                  half: false,\n                  lock: {\n                    isLock: currentPosBaseInfo && curPosContractPoolInfo && showDisplayTokenBLock\n                  }\n                }}\n                lock={{\n                  isLock: !currentPosBaseInfo || !curPosContractPoolInfo || (currentPosBaseInfo && currentPosBaseInfo?.posType == 'burn'),\n                  text: currentPosBaseInfo && currentPosBaseInfo?.posType == 'burn' ? 'Your liquidity has been permanently locked' : undefined,\n                  style: {\n                    h: '224px'\n                  }\n                }}\n              />\n            </>\n          )}\n        </Box>\n        {currentPosBaseInfo?.posType !== 'burn' && (\n          <PositionSlider\n            sliderBg=\"bg_secondary\"\n            percentage={slideValue}\n            onChange={(value: string | number) => changeSlideValue(value)}\n            textFontSize=\"20px\"\n            sliderTrackHeight=\"8px\"\n          />\n        )}\n        {useZapIn ? (\n          <ZapDeposite\n            action=\"Withdraw\"\n            apiPoolInfo={currentApiPoolInfo}\n            currentSqrtPrice={currentPoolSqrtPrice}\n            onlyAmountA={onlyAmountA}\n            onlyAmountB={onlyAmountB}\n            liquidity={currentPosBaseInfo?.liquidity}\n            lowerTick={currentPosBaseInfo?.lowerTick}\n            upperTick={currentPosBaseInfo?.upperTick}\n            slideValue={String(slideValue)}\n            currentPosLiquidityData={currentPosLiquidityData}\n            changeSlideValue={changeSlideValue}\n          />\n        ) : (\n          <>\n            <TradeInputGroup\n              from={{\n                wrapStyle: {\n                  h: '108px',\n                  borderRadius: '12px'\n                },\n                balance: tokenABalance || '',\n                value: tokenAmountA,\n                amountValue: tokenAmountValueA,\n                loading: !isFixedDisplayTokenA && preRemoveLoading,\n                onChange: value => {\n                  handleAmountChange(value, true)\n                },\n                needRemainBalance: false,\n                placeholder: '0.0',\n                balanceLabel: 'Available',\n                token: displayTokenA,\n                half: false,\n                lock: {\n                  isLock: currentPosBaseInfo && curPosContractPoolInfo && showDisplayTokenALock,\n                  style: {\n                    borderRadius: '12px'\n                  }\n                }\n              }}\n              to={{\n                wrapStyle: {\n                  h: '108px',\n                  borderRadius: '12px'\n                },\n                balance: tokenBBalance || '',\n                value: tokenAmountB,\n                amountValue: tokenAmountValueB,\n                loading: isFixedDisplayTokenA && preRemoveLoading,\n                onChange: value => {\n                  handleAmountChange(value, false)\n                },\n                needRemainBalance: false,\n                placeholder: '0.0',\n                balanceLabel: 'Available',\n                token: displayTokenB,\n                half: false,\n                lock: {\n                  isLock: currentPosBaseInfo && curPosContractPoolInfo && showDisplayTokenBLock,\n                  style: {\n                    borderRadius: '12px'\n                  }\n                }\n              }}\n              lock={{\n                isLock: !currentPosBaseInfo || !curPosContractPoolInfo || (currentPosBaseInfo && currentPosBaseInfo?.posType == 'burn'),\n                text: currentPosBaseInfo && currentPosBaseInfo?.posType == 'burn' ? 'Your liquidity has been permanently locked' : undefined,\n                style: {\n                  h: '224px',\n                  borderRadius: '12px'\n                }\n              }}\n            />\n          </>\n        )}\n\n        {currentPosBaseInfo?.posType !== 'burn' && (\n          <Block borderRadius=\"12px\" p=\"16px\" mt=\"8px\">\n            <Text color=\"primary_gray\">Amount</Text>\n            <PositionSlider percentage={slideValue} onChange={(value: string | number) => changeSlideValue(value)} />\n          </Block>\n        )}\n      </VStack>\n\n      {useZapIn ? (\n        <ZapSubmiteInfo\n          action=\"Withdraw\"\n          onClick={toRemove}\n          hideDepositRatio={true}\n          otherLoading={isRemoveLoading}\n          isReverse={currentPosBaseInfo?.isReverse}\n        />\n      ) : (\n        <Button\n          isLoading={isRemoveLoading}\n          onClick={toRemove}\n          isDisabled={btnStatusText.disabled || isRemoveLoading || currentPosBaseInfo?.isFrozen}\n          w=\"100%\"\n          h=\"56px\"\n          fontSize=\"20px\"\n          fontWeight=\"500\"\n        >\n          {btnStatusText.text}\n        </Button>\n      )}\n      {currentPosBaseInfo?.posType !== 'burn' && <FarmsBlock haveFarming={currentPosPoolInfo?.haveFarming} />}\n      {/* {currentPosPoolsRelatedData && currentPosPoolsRelatedData?.minPrice !== '0' && currentPosPoolsRelatedData?.maxPrice !== 'âˆž' && (\n        <RangeAlerts subscriptionSource=\"PositionDetail\" wrapStyle={{ p: { base: '16px 8px', lg: '16px' } }} />\n      )} */}\n    </VStack>\n  )\n}\n\nexport function PercentageTab(props: {\n  percentage: string | number\n  onChange: (value: string | number) => void\n  wrapStyle?: StackProps\n  selectTabStyle?: FlexProps\n  selectTabItemStyle?: FlexProps\n  selectTabItemTextStyle?: TextProps\n  textFontSize?: string\n  isShowPercentageText?: boolean\n  percentageTextMinW?: string\n}) {\n  const {\n    percentage,\n    onChange,\n    wrapStyle,\n    textFontSize,\n    selectTabStyle,\n    selectTabItemStyle,\n    selectTabItemTextStyle,\n    isShowPercentageText = true,\n    percentageTextMinW = '62px'\n  } = props\n  const tabList: Tab[] = [{ label: '25%' }, { label: '50%' }, { label: '75%' }, { label: 'MAX' }]\n  const currentTab = useMemo(() => {\n    if (Number(percentage) !== 100) {\n      return `${percentage}%`\n    } else {\n      return 'MAX'\n    }\n  }, [percentage])\n\n  return (\n    <HStack w=\"100%\" {...wrapStyle}>\n      {isShowPercentageText && (\n        <Text minW={percentageTextMinW} fontSize={textFontSize} color=\"text_caption\">\n          {percentage == '--' ? '--' : d(percentage).gt(0) && Number(percentage) < 0.01 ? '<0.01' : formatNumberWithDown(percentage, 2)}%\n        </Text>\n      )}\n\n      <SelectTab\n        type=\"outlineTab\"\n        tabList={tabList}\n        currentTab={currentTab}\n        handleChangeTab={tab => {\n          if (tab.label === 'MAX') {\n            onChange(100)\n          } else {\n            onChange(tab.label.replace('%', ''))\n          }\n        }}\n        wrapStyle={selectTabStyle}\n        itemStyle={selectTabItemStyle}\n        selectTabItemTextStyle={selectTabItemTextStyle}\n      />\n    </HStack>\n  )\n}\n\nexport function PositionSlider(props: {\n  percentage: string | number\n  onChange: (value: string | number) => void\n  percentageTextMinW?: '62px'\n  textFontSize?: string\n  sliderBg?: string\n  sliderTrackHeight?: string\n}) {\n  const { percentage, onChange, percentageTextMinW, textFontSize = '24px', sliderBg = 'bg_four', sliderTrackHeight = '4px' } = props\n  return (\n    <Box w=\"100%\">\n      <PercentageTab\n        percentage={percentage}\n        onChange={onChange}\n        percentageTextMinW={percentageTextMinW}\n        wrapStyle={{\n          justifyContent: 'space-between'\n        }}\n        selectTabStyle={{\n          w: { base: '220px', lg: '310px' },\n          h: '32px',\n          p: '3px',\n          borderRadius: '8px'\n        }}\n        selectTabItemStyle={{\n          flex: '1',\n          fontSize: '14px',\n          margin: '0px'\n        }}\n        textFontSize={textFontSize}\n      />\n      <Box mt=\"10px\" w=\"100%\">\n        <Slider\n          aria-label=\"slider-ex-1\"\n          min={0}\n          max={100}\n          focusThumbOnChange={false}\n          value={percentage == '--' ? 0 : Number(percentage)}\n          onChange={value => onChange(value + '%')}\n        >\n          <SliderTrack bg={sliderBg} h={sliderTrackHeight}>\n            <SliderFilledTrack h=\"4px\" />\n          </SliderTrack>\n          <SliderThumb />\n        </Slider>\n      </Box>\n    </Box>\n  )\n}\n"],"names":["PercentageTab","props","percentage","onChange","wrapStyle","textFontSize","selectTabStyle","selectTabItemStyle","selectTabItemTextStyle","isShowPercentageText","percentageTextMinW","tabList","currentTab","useMemo","jsxs","HStack","Text","d","formatNumberWithDown","jsx","SelectTab","tab","PositionSlider","sliderBg","sliderTrackHeight","Box","Slider","value","SliderTrack","SliderFilledTrack","SliderThumb"],"mappings":"0cA0RO,SAASA,EAAcC,EAU3B,CACD,KAAM,CACJ,WAAAC,EACA,SAAAC,EACA,UAAAC,EACA,aAAAC,EACA,eAAAC,EACA,mBAAAC,EACA,uBAAAC,EACA,qBAAAC,EAAuB,GACvB,mBAAAC,EAAqB,MAAA,EACnBT,EACEU,EAAiB,CAAC,CAAE,MAAO,KAAA,EAAS,CAAE,MAAO,KAAA,EAAS,CAAE,MAAO,KAAA,EAAS,CAAE,MAAO,MAAO,EACxFC,EAAaC,EAAAA,QAAQ,IACrB,OAAOX,CAAU,IAAM,IAClB,GAAGA,CAAU,IAEb,MAER,CAACA,CAAU,CAAC,EAEf,OACEY,EAAAA,KAACC,EAAA,CAAO,EAAE,OAAQ,GAAGX,EAClB,SAAA,CAAAK,UACEO,EAAA,CAAK,KAAMN,EAAoB,SAAUL,EAAc,MAAM,eAC3D,SAAA,CAAAH,GAAc,KAAO,KAAOe,EAAEf,CAAU,EAAE,GAAG,CAAC,GAAK,OAAOA,CAAU,EAAI,IAAO,QAAUgB,EAAqBhB,EAAY,CAAC,EAAE,GAAA,EAChI,EAGFiB,EAAAA,IAACC,EAAA,CACC,KAAK,aACL,QAAAT,EACA,WAAAC,EACA,gBAAiBS,GAAO,CAClBA,EAAI,QAAU,MAChBlB,EAAS,GAAG,EAEZA,EAASkB,EAAI,MAAM,QAAQ,IAAK,EAAE,CAAC,CAEvC,EACA,UAAWf,EACX,UAAWC,EACX,uBAAAC,CAAA,CAAA,CACF,EACF,CAEJ,CAEO,SAASc,EAAerB,EAO5B,CACD,KAAM,CAAE,WAAAC,EAAY,SAAAC,EAAU,mBAAAO,EAAoB,aAAAL,EAAe,OAAQ,SAAAkB,EAAW,UAAW,kBAAAC,EAAoB,KAAA,EAAUvB,EAC7H,OACEa,EAAAA,KAACW,EAAA,CAAI,EAAE,OACL,SAAA,CAAAN,EAAAA,IAACnB,EAAA,CACC,WAAAE,EACA,SAAAC,EACA,mBAAAO,EACA,UAAW,CACT,eAAgB,eAAA,EAElB,eAAgB,CACd,EAAG,CAAE,KAAM,QAAS,GAAI,OAAA,EACxB,EAAG,OACH,EAAG,MACH,aAAc,KAAA,EAEhB,mBAAoB,CAClB,KAAM,IACN,SAAU,OACV,OAAQ,KAAA,EAEV,aAAAL,CAAA,CAAA,EAEFc,EAAAA,IAACM,EAAA,CAAI,GAAG,OAAO,EAAE,OACf,SAAAX,EAAAA,KAACY,EAAA,CACC,aAAW,cACX,IAAK,EACL,IAAK,IACL,mBAAoB,GACpB,MAAOxB,GAAc,KAAO,EAAI,OAAOA,CAAU,EACjD,SAAUyB,GAASxB,EAASwB,EAAQ,GAAG,EAEvC,SAAA,CAAAR,EAAAA,IAACS,EAAA,CAAY,GAAIL,EAAU,EAAGC,EAC5B,SAAAL,EAAAA,IAACU,EAAA,CAAkB,EAAE,KAAA,CAAM,CAAA,CAC7B,QACCC,EAAA,CAAA,CAAY,CAAA,CAAA,CAAA,CACf,CACF,CAAA,EACF,CAEJ"}