{"version":3,"file":"dlmm-B3MPeVqN.js","sources":["../../src/utils/clmm.ts","../../src/utils/dlmm.ts"],"sourcesContent":["import { PoolApiInfo } from '@/types'\nimport { d, fixDown, fixRounding } from '@cetus/utils'\n\nexport const getFeeTierList = (list: Partial<PoolApiInfo>[]) => {\n  if (list?.length) {\n    const data = list?.map(item => ({\n      feeDisplay: item?.feeDisplay,\n      feeRate: item?.feeRate,\n      poolAddress: item?.poolAddress,\n      tickSpacing: item.tickSpacing,\n      fee: item.fee,\n      tvl: item?.tvl === '--' ? '0' : item?.tvl,\n      liquidity: item?.object?.liquidity === '--' ? '0' : item?.object?.liquidity\n    }))\n    const total = data?.reduce((sum, current) => d(sum).plus(current.tvl as string), d(0)).toString()\n    if (d(total).gt(0)) {\n      let rates = []\n      rates = data?.map(item => {\n        const rate = d(item?.tvl as string)\n          .div(total)\n          .mul(100)\n          .toString()\n        return rate\n      })\n      return getRates(data, rates)\n    }\n    if (data.length === 1) {\n      return data?.map((item, index) => {\n        const rateValue = '100% select'\n        return {\n          ...item,\n          title: rateValue\n        }\n      })\n    }\n\n    const liquidityTotal = data?.reduce((sum, current) => d(sum).plus((current?.liquidity || '0') as string), d(0)).toString()\n    let rates = []\n    if (d(liquidityTotal).gt(0)) {\n      rates = data?.map(item => {\n        const rate = d(item?.liquidity as string)\n          .div(liquidityTotal)\n          .mul(100)\n          .toString()\n        return rate\n      })\n      return getRates(data, rates)\n    } else {\n      rates = data?.map(item => {\n        return 0\n      })\n      return getRates(data, rates)\n    }\n  } else {\n    return []\n  }\n}\n\nexport const getRates = (data: any[], rates: any[], dealZero = true) => {\n  const hasExtremelySmallNumber = rates?.some(item => d(item).lt(0.01) && d(item).gt(0))\n  const zeroNum = rates?.filter(item => d(item).eq(0)).length\n  let zeroCount = zeroNum\n  if (hasExtremelySmallNumber) {\n    rates = rates.map(rate => {\n      if (d(rate).gte(0.01)) {\n        return fixDown(rate, 2)\n      } else {\n        return rate\n      }\n    })\n  } else {\n    rates = rates.map(rate => {\n      return fixRounding(rate, 2)\n    })\n  }\n  if (zeroNum > 0 && dealZero) {\n    rates = rates.map(rate => {\n      if (d(rate).gte(0) && d(rate).lt(0.02)) {\n        return rate\n      } else {\n        if (zeroCount > 0) {\n          zeroCount--\n          return d(rate).sub('0.01').toString()\n        }\n        return rate\n      }\n    })\n  }\n  return data?.map((item, index) => {\n    const rate = rates[index]\n    const rateValue = d(rate).gt(0) && d(rate).lt(0.01) ? '<0.01 % select' : rate + '% select'\n    return {\n      ...item,\n      title: rateValue\n    }\n  })\n}\n\nexport const getRangeChartGap = (brushDomain: any) => {\n  const rangeGap = d(brushDomain[1]).minus(brushDomain[0]).abs()\n  let brushDomainGap = rangeGap\n  if (d(brushDomain[0]).lte('0')) return brushDomainGap.toString()\n  while (d(brushDomain[0]).minus(brushDomainGap).lt('0')) {\n    brushDomainGap = brushDomainGap.mul(0.8)\n    if (brushDomainGap.lte(rangeGap.div(10))) break\n  }\n\n  return brushDomainGap.toString()\n}\n","import { ChartBinItem, DlmmPosBaseInfo } from '@/types/dlmm'\nimport { Token } from '@cetus/types'\nimport { bnToAmount, d, formatPrice, formatTickPrice, removeComma } from '@cetus/utils'\nimport { BinAmount, BinLiquidityInfo, BinUtils } from '@cetusprotocol/dlmm-sdk'\nimport { getRates } from './clmm'\nimport { getReversePrice } from './pool'\n\nexport const defaultBinsNum = 50\nexport const getRelatedDisplayPrice = (price: string) => {\n  const displayPrice = price === '∞' ? '∞' : formatTickPrice(removeComma(price), 6) + ''\n  const reversePrice = getReversePrice(removeComma(price)) + ''\n  const displayReversePrice = reversePrice === '∞' ? '∞' : formatTickPrice(reversePrice, 6) + ''\n  return [displayPrice, reversePrice, displayReversePrice]\n}\n\n/**\n *  和useDlmmPosChart 中 计算保持一致\n * @param price\n * @returns\n */\nexport const getRelatedDisplayChartPrice = (price: string) => {\n  const displayPrice = price === '∞' ? '∞' : formatPrice(removeComma(price)) + ''\n  const reversePrice = getReversePrice(removeComma(price)) + ''\n  const displayReversePrice = reversePrice === '∞' ? '∞' : formatPrice(reversePrice) + ''\n  return [displayPrice, reversePrice, displayReversePrice]\n}\n\nexport const formatBinPriceFromLamport = (priceLamport: string, baseDecimal: number, quoteDecimal: number) => {\n  return String(BinUtils.getPriceFromLamport(baseDecimal, quoteDecimal, priceLamport))\n}\n\nexport const formatPriceFromBin = (bin: number, binStep: number, baseDecimal: number, quoteDecimal: number) => {\n  return String(BinUtils.getPriceFromBinId(bin, binStep, baseDecimal, quoteDecimal))\n}\n\nexport const formatBinList = (\n  bins: BinAmount[],\n  baseToken: Token,\n  quoteToken: Token,\n  direct = true,\n  activeBin?: number,\n  binStep?: number\n): {\n  list: ChartBinItem[]\n  max: number\n} => {\n  let max = 0\n  const noRadius = bins?.length > 150\n  const baseDecimal = baseToken?.decimals\n  const quoteDecimal = quoteToken?.decimals\n  const res = bins?.map((item: BinAmount) => {\n    const liquidity = d(item?.liquidity)?.div(Math.pow(10, 10)).toNumber()\n    const price = removeComma(formatBinPriceFromLamport(item.price_per_lamport, baseDecimal, quoteDecimal))\n    const baseAmount = bnToAmount(item?.amount_a, baseDecimal)\n    const quoteAmount = bnToAmount(item?.amount_b, quoteDecimal)\n    let quantityA\n    let quantityB\n    if (item?.bin_id === activeBin) {\n      const total = d(baseAmount).mul(price).add(quoteAmount)\n      quantityA = d(baseAmount).mul(price).div(total).toString()\n      quantityB = d(quoteAmount).div(total).toString()\n    }\n\n    max = Math.max(max, liquidity)\n\n    return {\n      ...item,\n      liquidity,\n      price: direct || direct === undefined ? price : d(1).div(price).toString(),\n      priceOrigin: direct || direct === undefined ? Number(price) : Number(d(1).div(price).toString()),\n      baseSymbol: baseToken?.symbol,\n      quoteSymbol: quoteToken?.symbol,\n      baseAmount,\n      quoteAmount,\n      quantityA,\n      quantityB,\n      noRadius\n    }\n  })\n\n  if (activeBin !== undefined && binStep !== undefined && res?.[0]?.bin_id > activeBin) {\n    const price = formatPriceFromBin(activeBin, binStep, baseDecimal, quoteDecimal)\n    res.unshift({\n      // ...sortList?.[0],\n      bin_id: activeBin,\n      price: direct || direct === undefined ? price : d(1).div(price).toString(),\n      priceOrigin: direct || direct === undefined ? Number(price) : Number(d(1).div(price).toString()),\n      liquidity: undefined\n    })\n  }\n\n  if (activeBin !== undefined && binStep !== undefined && res?.[res?.length - 1]?.bin_id < activeBin) {\n    const price = formatPriceFromBin(activeBin, binStep, baseDecimal, quoteDecimal)\n    res.push({\n      // ...sortList?.[sortList?.length - 1],\n      bin_id: activeBin,\n      price: direct || direct === undefined ? price : d(1).div(price).toString(),\n      priceOrigin: direct || direct === undefined ? Number(price) : Number(d(1).div(price).toString()),\n      liquidity: undefined\n    })\n  }\n\n  const sortList = res.sort((a, b) => a?.priceOrigin - b?.priceOrigin)\n  return {\n    list: [...sortList],\n    max: d(max).toNumber()\n  }\n}\n\n// export const getMaxBinRangeData = ({\n//   activeBin,\n//   allBins,\n//   binStep,\n//   baseToken,\n//   quoteToken,\n//   maxBinsLength = 69,\n//   direct = true,\n//   maxBin,\n//   minBin\n// }: {\n//   activeBin: number\n//   allBins: Record<string, ChartBinItem>\n//   binStep: number\n//   baseToken: Token\n//   quoteToken: Token\n//   maxBinsLength?: number\n//   direct?: boolean\n//   maxBin?: number,\n//   minBin?: number\n// }) => {\n//   let i = activeBin\n//   const list: ChartBinItem[] = []\n//   const half = d(maxBinsLength).sub(1).div(2).toNumber()\n//   const minBinNum = minBin !== undefined && activeBin - minBin > half ? minBin : activeBin - half\n//   let max1 = 0\n//   while (i >= minBinNum) {\n//     const item = allBins?.[String(i)]\n//     const price = formatPriceFromBin(i, binStep, baseToken?.decimals, quoteToken?.decimals)\n//     const liquidity = d(item?.liquidity || '0')\n//       .div(Math.pow(10, 10))\n//       .toNumber()\n//     list.push({\n//       amount_a: item?.amount_a || '0',\n//       amount_b: item?.amount_b || '0',\n//       bin_id: i,\n//       liquidity,\n//       price: formatNumberWithDown(direct ? price : d(1).div(price).toString(), 6),\n//       price_per_lamport: item?.price_per_lamport || '',\n//       baseSymbol: baseToken?.symbol,\n//       quoteSymbol: quoteToken?.symbol,\n//       baseAmount: bnToAmount(item?.amount_a, baseToken?.decimals),\n//       quoteAmount: bnToAmount(item?.amount_b, quoteToken?.decimals)\n//     })\n//     max1 = Math.max(max1, liquidity)\n//     i--\n//   }\n\n//   let j = activeBin\n//   const maxBinNum = maxBin !== undefined && maxBin - activeBin > half ? maxBin : activeBin + half\n//   let max2 = 0\n//   while (j < maxBinNum) {\n//     j++\n//     const item = allBins?.[String(j)]\n//     const price = formatPriceFromBin(j, binStep, baseToken?.decimals, quoteToken?.decimals)\n//     const liquidity = d(item?.liquidity || '0')\n//       .div(Math.pow(10, 10))\n//       .toNumber()\n//     list.push({\n//       amount_a: item?.amount_a || '0',\n//       amount_b: item?.amount_b || '0',\n//       bin_id: j,\n//       liquidity,\n//       price: formatNumberWithDown(direct ? price : d(1).div(price).toString(), 6),\n//       price_per_lamport: item?.price_per_lamport || '',\n//       baseSymbol: baseToken?.symbol,\n//       quoteSymbol: quoteToken?.symbol,\n//       baseAmount: bnToAmount(item?.amount_a, baseToken?.decimals),\n//       quoteAmount: bnToAmount(item?.amount_b, quoteToken?.decimals)\n//     })\n//     max2 = Math.max(max2, liquidity)\n//   }\n\n//   const sortList = list.sort((a: ChartBinItem, b: ChartBinItem) => a.price - b.price)\n\n//   return {\n//     list: sortList,\n//     max: Math.max(max1, max2)\n//   }\n// }\n\nexport const getMaxBinRangeData = ({\n  activeBin,\n  allBins,\n  binStep,\n  baseToken,\n  quoteToken,\n  maxBinsLength = 49,\n  direct = true,\n  maxBin,\n  minBin\n}: {\n  activeBin: number\n  allBins: Record<string, ChartBinItem>\n  binStep: number\n  baseToken: Token\n  quoteToken: Token\n  maxBinsLength?: number\n  direct?: boolean\n  maxBin?: number\n  minBin?: number\n}) => {\n  const half = d(maxBinsLength).sub(1).div(2).toNumber()\n  const minBinNum = minBin !== undefined && activeBin - minBin > half ? minBin : activeBin - half\n  const maxBinNum = maxBin !== undefined && maxBin - activeBin > half ? maxBin : activeBin + half\n\n  const createBinItem = (binId: number): ChartBinItem => {\n    const item = allBins?.[String(binId)]\n    const price = removeComma(formatPriceFromBin(binId, binStep, baseToken?.decimals, quoteToken?.decimals))\n    console.log('🚀 ~ createBinItem ~ item:', item)\n    const liquidity = item?.liquidity && d(item?.liquidity).gt('0') ? d(item?.liquidity).div(Math.pow(10, 10)).toNumber() : 0\n\n    const baseAmount = bnToAmount(item?.amount_a, baseToken?.decimals)\n    const quoteAmount = bnToAmount(item?.amount_b, quoteToken?.decimals)\n\n    let quantityA\n    let quantityB\n    if (item?.bin_id === activeBin) {\n      const total = d(baseAmount).mul(price).add(quoteAmount)\n      quantityA = d(baseAmount).mul(price).div(total).toString()\n      quantityB = d(quoteAmount).div(total).toString()\n    }\n    return {\n      amount_a: item?.amount_a || '0',\n      amount_b: item?.amount_b || '0',\n      bin_id: binId,\n      liquidity,\n      // price: formatNumberWithDown(direct ? price : d(1).div(price).toString(), 6),\n      price: direct ? price : d(1).div(price).toString(),\n      priceOrigin: direct ? Number(price) : Number(d(1).div(price).toString()),\n      price_per_lamport: item?.price_per_lamport || '',\n      baseSymbol: baseToken?.symbol,\n      quoteSymbol: quoteToken?.symbol,\n      baseLogo: baseToken?.logo_url,\n      quoteLogo: quoteToken?.logo_url,\n      baseAmount,\n      quoteAmount,\n      quantityA,\n      quantityB\n    }\n  }\n\n  // Process bins below activeBin\n  let i = activeBin\n  let max1 = 0\n  const lowerBins: ChartBinItem[] = []\n  while (i >= minBinNum) {\n    const binItem = createBinItem(i)\n    lowerBins.push(binItem)\n    max1 = binItem?.liquidity ? Math.max(max1, Number(binItem.liquidity)) : max1\n    i--\n  }\n\n  // Process bins above activeBin\n  let j = activeBin\n  let max2 = 0\n  const upperBins: ChartBinItem[] = []\n  while (j < maxBinNum) {\n    j++\n    const binItem = createBinItem(j)\n    upperBins.push(binItem)\n    max2 = Math.max(max2, binItem.liquidity)\n  }\n\n  const combinedList = [...lowerBins, ...upperBins]\n  const sortList = combinedList.sort((a, b) => Number(a.priceOrigin) - Number(b.priceOrigin))\n\n  return {\n    list: sortList,\n    max: Math.max(max1, max2)\n  }\n}\n\nexport const getBaseFeeList = (list: any[]) => {\n  if (list?.length > 0) {\n    const data = list?.map(item => ({\n      feeDisplay: item?.feeDisplay,\n      feeRate: item?.feeRate,\n      poolAddress: item?.poolAddress,\n      tvl: item?.tvl === '--' ? '0' : item?.tvl,\n      fee: item.fee\n    }))\n    const total = data?.reduce((sum, current) => d(sum).plus(current.tvl as string), d(0)).toString()\n    if (d(total).gt(0)) {\n      let rates = []\n      rates = data?.map(item => {\n        const rate = d(item?.tvl as string)\n          .div(total)\n          .mul(100)\n          .toString()\n        return rate\n      })\n      return getRates(data, rates, false)\n    }\n    if (d(total).eq(0)) {\n      return data?.map((item, index) => {\n        const rateValue = '0% select'\n        return {\n          ...item,\n          title: rateValue\n        }\n      })\n    }\n    if (data.length === 1) {\n      return data?.map((item, index) => {\n        const rateValue = '100% select'\n        return {\n          ...item,\n          title: rateValue\n        }\n      })\n    }\n  }\n  return []\n}\n\nexport function spitClaimDlmmPosList(positionBaseList: DlmmPosBaseInfo[], maxBinCount: number) {\n  const batches: DlmmPosBaseInfo[][] = []\n  let currentBatch: DlmmPosBaseInfo[] = []\n  let currentBatchBinCount = 0\n\n  positionBaseList.forEach(position => {\n    const positionBinCount = position.liquidityShares?.length || 0\n\n    // 如果当前仓位加入后会超过900，先保存当前批次，然后开始新批次\n    if (currentBatchBinCount + positionBinCount > maxBinCount && currentBatch.length > 0) {\n      console.log('🚀 ~ getDlmmPosFeeAndReward ~ currentBatchBinCount 1:', {\n        currentBatchBinCount,\n        currentBatch\n      })\n      batches.push([...currentBatch])\n      currentBatch = []\n      currentBatchBinCount = 0\n    }\n\n    // 添加当前仓位到批次中\n    currentBatch.push(position)\n\n    currentBatchBinCount += positionBinCount\n  })\n\n  // 添加最后一个批次\n  if (currentBatch.length > 0) {\n    console.log('🚀 ~ getDlmmPosFeeAndReward ~ currentBatchBinCount 2:', {\n      currentBatchBinCount,\n      currentBatch\n    })\n    batches.push(currentBatch)\n  }\n\n  console.log('🚀 ~ getDlmmPosFeeAndReward ~ batches:', batches, 'totalBatches:', batches.length)\n\n  return batches\n}\n\nexport function getBatchBinInfo(bins: BinAmount[], index: number, batchSize: number) {\n  const startIndex = index * batchSize\n  const endIndex = Math.min(startIndex + batchSize, bins.length)\n  const batchBins = bins.slice(startIndex, endIndex)\n\n  const batchBinInfo: BinLiquidityInfo = {\n    bins: batchBins,\n    amount_a: batchBins.reduce((sum, bin) => d(sum).add(d(bin.amount_a)).toFixed(0), '0'),\n    amount_b: batchBins.reduce((sum, bin) => d(sum).add(d(bin.amount_b)).toFixed(0), '0')\n  }\n  return batchBinInfo\n}\n"],"names":["getFeeTierList","list","data","item","_a","_b","total","sum","current","d","rates","getRates","index","liquidityTotal","dealZero","hasExtremelySmallNumber","zeroNum","zeroCount","rate","fixDown","fixRounding","rateValue","getRangeChartGap","brushDomain","rangeGap","brushDomainGap","defaultBinsNum","getRelatedDisplayPrice","price","displayPrice","formatTickPrice","removeComma","reversePrice","getReversePrice","displayReversePrice","getRelatedDisplayChartPrice","formatPrice","formatBinPriceFromLamport","priceLamport","baseDecimal","quoteDecimal","BinUtils","formatPriceFromBin","bin","binStep","formatBinList","bins","baseToken","quoteToken","direct","activeBin","max","noRadius","res","liquidity","baseAmount","bnToAmount","quoteAmount","quantityA","quantityB","a","b","getMaxBinRangeData","allBins","maxBinsLength","maxBin","minBin","half","minBinNum","maxBinNum","createBinItem","binId","i","max1","lowerBins","binItem","j","max2","upperBins","getBaseFeeList","spitClaimDlmmPosList","positionBaseList","maxBinCount","batches","currentBatch","currentBatchBinCount","position","positionBinCount","getBatchBinInfo","batchSize","startIndex","endIndex","batchBins"],"mappings":"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"}