{"version":3,"file":"SelectToken-D-b9Lw5g.js","sources":["../../src/hooks/create-pool/useQuoteWhiteTokenList.ts","../../src/components/selectPool/SelectToken.tsx"],"sourcesContent":["import useCreatePoolStore from '@/store/pool/useCreatePool'\nimport { useGetToken } from '@cetus/hooks/src/useToken'\nimport { CoinType, Token } from '@cetus/types'\nimport envConfigs from '@cetus/types/src/config/envConfigs'\nimport { fixCoinType } from '@cetusprotocol/common-sdk'\nimport { useCallback, useEffect } from 'react'\n\nexport default function useQuoteWhiteTokenList() {\n  const { quoteWhiteTokenList, setQuoteWhiteTokenList } = useCreatePoolStore()\n  const { getTokenListInfo } = useGetToken()\n\n  useEffect(() => {\n    fetchQuoteWhiteTokenList()\n  }, [])\n\n  /**\n   * 获取创建池子quote list 白名单\n   * @returns\n   */\n  const fetchQuoteWhiteTokenList = async () => {\n    const coinTypeList = envConfigs?.create_pool_quote_coin_list?.map(coinType => coinType)\n    const tokenMap = await getTokenListInfo(coinTypeList as CoinType[])\n    const list = envConfigs.create_pool_quote_coin_list.map(coinType => tokenMap?.get(coinType as CoinType))\n    setQuoteWhiteTokenList(list.filter(item => !!item) as Token[])\n  }\n\n  const isWhiteQuoteToken = useCallback(\n    (coinType?: string) => {\n      if (coinType) {\n        return quoteWhiteTokenList.find(token => fixCoinType(token.coin_type) === fixCoinType(coinType)) !== undefined\n      }\n\n      return false\n    },\n    [quoteWhiteTokenList]\n  )\n\n  return {\n    isWhiteQuoteToken,\n    quoteWhiteTokenList\n  }\n}\n","import { PoolsDropSelect } from '@cetus/design'\nimport { Token } from '@cetus/types'\nimport { Icon, SingleCoinImage } from '@cetus/ui-kit'\nimport { textEllipses } from '@cetus/utils'\nimport {\n  Box,\n  HStack,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n  Skeleton,\n  SkeletonCircle,\n  Text,\n  useDisclosure,\n  VStack\n} from '@chakra-ui/react'\nimport { useRef } from 'react'\nimport { SelectTokenProps } from './type'\n\nexport const SelectToken = ({\n  title,\n  value,\n  onChange,\n  whiteTokenList,\n  isWhiteSelect,\n  disabled = false,\n  wrapStyle = {},\n  symbolStyle = {},\n  tokenSize = '28px',\n  tokenStyle = {},\n  loading = false\n}: SelectTokenProps) => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const firstItemRef = useRef(null)\n\n  return (\n    <>\n      <Popover\n        modifiers={[\n          {\n            name: 'flip',\n            enabled: false // Disable automatic flip\n          },\n          {\n            name: 'shift',\n            enabled: false // Disable automatic shift\n          }\n        ]}\n        initialFocusRef={firstItemRef}\n        isLazy\n        isOpen={isOpen}\n        trigger=\"click\"\n        onClose={onClose}\n        onOpen={onOpen}\n        placement=\"bottom-start\"\n      >\n        <PopoverTrigger>\n          <Box w=\"100%\" as=\"button\" ref={firstItemRef} disabled={disabled}>\n            {loading ? (\n              <HStack>\n                <SkeletonCircle w={tokenSize} h={tokenSize} />\n                <Skeleton h={symbolStyle.fontSize || '16px'} />\n              </HStack>\n            ) : (\n              <VStack flex=\"1\" gap=\"8px\" align=\"flex-start\">\n                {title && (\n                  <Text fontSize=\"12px\" fontWeight=\"500\">\n                    {title}\n                  </Text>\n                )}\n                <HStack\n                  h=\"48px\"\n                  w=\"100%\"\n                  justify=\"space-between\"\n                  p=\"9px 16px\"\n                  cursor=\"pointer\"\n                  onClick={onOpen}\n                  borderRadius=\"12px\"\n                  border=\"1px solid\"\n                  borderColor=\"border\"\n                  bg=\"bg_secondary\"\n                  _hover={{\n                    svg: {\n                      fill: 'text_caption'\n                    }\n                  }}\n                  {...wrapStyle}\n                >\n                  {value ? (\n                    <HStack>\n                      <SingleCoinImage imageUrl={value?.logo_url} w={tokenSize} h={tokenSize} coinType={value?.coin_type} {...tokenStyle} />\n                      <Text color=\"text_caption\" fontSize=\"16px\" fontWeight=\"600\" whiteSpace=\"nowrap\" {...symbolStyle}>\n                        {textEllipses(value?.symbol)}\n                      </Text>\n                    </HStack>\n                  ) : (\n                    <Text color=\"text_caption\" fontSize=\"14px\" fontWeight=\"500\" whiteSpace=\"nowrap\">\n                      Select token\n                    </Text>\n                  )}\n                  <Icon\n                    xlinkHref=\"#icon-icon_arrow\"\n                    fontSize=\"12px\"\n                    transition=\"transform 0.5s\"\n                    transform={isOpen ? 'rotate(180deg)' : 'rotate(0deg)'}\n                  />\n                </HStack>\n              </VStack>\n            )}\n          </Box>\n        </PopoverTrigger>\n        <PopoverContent w={firstItemRef?.current?.clientWidth || '224px'} minW=\"224px\">\n          <PopoverBody p=\"0\">\n            <PoolsDropSelect\n              selectTokenList={value ? [value] : []}\n              onClickToken={(token: Token) => {\n                onChange(token)\n                onClose()\n              }}\n              whiteTokenList={whiteTokenList}\n              hideCheckbox\n            />\n          </PopoverBody>\n        </PopoverContent>\n      </Popover>\n    </>\n  )\n}\n"],"names":["useQuoteWhiteTokenList","quoteWhiteTokenList","setQuoteWhiteTokenList","useCreatePoolStore","getTokenListInfo","useGetToken","useEffect","fetchQuoteWhiteTokenList","coinTypeList","_b","_a","envConfigs","coinType","tokenMap","list","item","useCallback","token","fixCoinType","SelectToken","title","value","onChange","whiteTokenList","isWhiteSelect","disabled","wrapStyle","symbolStyle","tokenSize","tokenStyle","loading","isOpen","onOpen","onClose","useDisclosure","firstItemRef","useRef","jsx","Fragment","jsxs","Popover","PopoverTrigger","Box","HStack","SkeletonCircle","Skeleton","VStack","Text","SingleCoinImage","textEllipses","Icon","PopoverContent","PopoverBody","PoolsDropSelect"],"mappings":"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"}